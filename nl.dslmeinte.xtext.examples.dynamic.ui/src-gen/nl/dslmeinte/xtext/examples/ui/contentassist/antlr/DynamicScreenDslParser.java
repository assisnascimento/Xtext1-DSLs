/*
* generated by Xtext
*/
package nl.dslmeinte.xtext.examples.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import nl.dslmeinte.xtext.examples.services.DynamicScreenDslGrammarAccess;

public class DynamicScreenDslParser extends AbstractContentAssistParser {
	
	@Inject
	private DynamicScreenDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected nl.dslmeinte.xtext.examples.ui.contentassist.antlr.internal.InternalDynamicScreenDslParser createParser() {
		nl.dslmeinte.xtext.examples.ui.contentassist.antlr.internal.InternalDynamicScreenDslParser result = new nl.dslmeinte.xtext.examples.ui.contentassist.antlr.internal.InternalDynamicScreenDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
					put(grammarAccess.getGroupElementAccess().getAlternatives(), "rule__GroupElement__Alternatives");
					put(grammarAccess.getAttributeAccess().getAlternatives(), "rule__Attribute__Alternatives");
					put(grammarAccess.getEnumFieldAttributeAccess().getAlternatives(), "rule__EnumFieldAttribute__Alternatives");
					put(grammarAccess.getReferenceTargetAccess().getAlternatives(), "rule__ReferenceTarget__Alternatives");
					put(grammarAccess.getDummyForExternalVariableAccess().getAlternatives(), "rule__DummyForExternalVariable__Alternatives");
					put(grammarAccess.getTerminalBExpressionAccess().getAlternatives(), "rule__TerminalBExpression__Alternatives");
					put(grammarAccess.getAtomicReferringBExpressionAccess().getAlternatives(), "rule__AtomicReferringBExpression__Alternatives");
					put(grammarAccess.getEnumComparisonAccess().getAlternatives(), "rule__EnumComparison__Alternatives");
					put(grammarAccess.getEnumLiteralsCollectionAccess().getAlternatives(), "rule__EnumLiteralsCollection__Alternatives");
					put(grammarAccess.getAttributeClassAccess().getAlternatives(), "rule__AttributeClass__Alternatives");
					put(grammarAccess.getBLiteralAccess().getAlternatives(), "rule__BLiteral__Alternatives");
					put(grammarAccess.getEnumMembershipAccess().getAlternatives(), "rule__EnumMembership__Alternatives");
					put(grammarAccess.getDynamicScreenAccess().getGroup(), "rule__DynamicScreen__Group__0");
					put(grammarAccess.getDataImportAccess().getGroup(), "rule__DataImport__Group__0");
					put(grammarAccess.getLabelAccess().getGroup(), "rule__Label__Group__0");
					put(grammarAccess.getLabelAccess().getGroup_1(), "rule__Label__Group_1__0");
					put(grammarAccess.getPathTailAccess().getGroup(), "rule__PathTail__Group__0");
					put(grammarAccess.getPathTailAccess().getGroup_2(), "rule__PathTail__Group_2__0");
					put(grammarAccess.getExternalVariableAccess().getGroup(), "rule__ExternalVariable__Group__0");
					put(grammarAccess.getEnumListAccess().getGroup(), "rule__EnumList__Group__0");
					put(grammarAccess.getDataStoreAccess().getGroup(), "rule__DataStore__Group__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getFieldGroupAccess().getGroup(), "rule__FieldGroup__Group__0");
					put(grammarAccess.getFieldGroupAccess().getGroup_2(), "rule__FieldGroup__Group_2__0");
					put(grammarAccess.getNormalAttributeAccess().getGroup(), "rule__NormalAttribute__Group__0");
					put(grammarAccess.getNormalAttributeAccess().getGroup_1(), "rule__NormalAttribute__Group_1__0");
					put(grammarAccess.getAttributeClassExpressionAccess().getGroup(), "rule__AttributeClassExpression__Group__0");
					put(grammarAccess.getAttributeClassExpressionAccess().getGroup_1(), "rule__AttributeClassExpression__Group_1__0");
					put(grammarAccess.getRestrictionAttributeAccess().getGroup(), "rule__RestrictionAttribute__Group__0");
					put(grammarAccess.getRestrictionGroupAttributeAccess().getGroup(), "rule__RestrictionGroupAttribute__Group__0");
					put(grammarAccess.getRestrictionRuleAccess().getGroup(), "rule__RestrictionRule__Group__0");
					put(grammarAccess.getBOrExpressionAccess().getGroup(), "rule__BOrExpression__Group__0");
					put(grammarAccess.getBOrExpressionAccess().getGroup_1(), "rule__BOrExpression__Group_1__0");
					put(grammarAccess.getBAndExpressionAccess().getGroup(), "rule__BAndExpression__Group__0");
					put(grammarAccess.getBAndExpressionAccess().getGroup_1(), "rule__BAndExpression__Group_1__0");
					put(grammarAccess.getTerminalBExpressionAccess().getGroup_2(), "rule__TerminalBExpression__Group_2__0");
					put(grammarAccess.getNegationExpressionAccess().getGroup(), "rule__NegationExpression__Group__0");
					put(grammarAccess.getBComparisonAccess().getGroup(), "rule__BComparison__Group__0");
					put(grammarAccess.getBComparisonAccess().getGroup_2(), "rule__BComparison__Group_2__0");
					put(grammarAccess.getSingleEnumComparisonAccess().getGroup(), "rule__SingleEnumComparison__Group__0");
					put(grammarAccess.getMultiEnumComparisonAccess().getGroup(), "rule__MultiEnumComparison__Group__0");
					put(grammarAccess.getStringValueComparisonAccess().getGroup(), "rule__StringValueComparison__Group__0");
					put(grammarAccess.getPresenceCheckAccess().getGroup(), "rule__PresenceCheck__Group__0");
					put(grammarAccess.getDirectEnumLiteralsCollectionAccess().getGroup(), "rule__DirectEnumLiteralsCollection__Group__0");
					put(grammarAccess.getDynamicScreenAccess().getLabelAssignment_1(), "rule__DynamicScreen__LabelAssignment_1");
					put(grammarAccess.getDynamicScreenAccess().getDataImportAssignment_2(), "rule__DynamicScreen__DataImportAssignment_2");
					put(grammarAccess.getDynamicScreenAccess().getViewClassAssignment_5(), "rule__DynamicScreen__ViewClassAssignment_5");
					put(grammarAccess.getDynamicScreenAccess().getDeclarationsAssignment_6(), "rule__DynamicScreen__DeclarationsAssignment_6");
					put(grammarAccess.getDynamicScreenAccess().getGroupsAssignment_7(), "rule__DynamicScreen__GroupsAssignment_7");
					put(grammarAccess.getDataImportAccess().getImportURIAssignment_2(), "rule__DataImport__ImportURIAssignment_2");
					put(grammarAccess.getLabelAccess().getEnAssignment_0(), "rule__Label__EnAssignment_0");
					put(grammarAccess.getLabelAccess().getNlAssignment_1_1(), "rule__Label__NlAssignment_1_1");
					put(grammarAccess.getPathTailAccess().getFieldAssignment_1(), "rule__PathTail__FieldAssignment_1");
					put(grammarAccess.getPathTailAccess().getAsEntityAssignment_2_1(), "rule__PathTail__AsEntityAssignment_2_1");
					put(grammarAccess.getPathTailAccess().getTailAssignment_3(), "rule__PathTail__TailAssignment_3");
					put(grammarAccess.getExternalVariableAccess().getPathAssignment_1(), "rule__ExternalVariable__PathAssignment_1");
					put(grammarAccess.getExternalVariableAccess().getNameAssignment_3(), "rule__ExternalVariable__NameAssignment_3");
					put(grammarAccess.getEnumListAccess().getNameAssignment_1(), "rule__EnumList__NameAssignment_1");
					put(grammarAccess.getEnumListAccess().getLiteralsAssignment_4(), "rule__EnumList__LiteralsAssignment_4");
					put(grammarAccess.getEnumListAccess().getEnumAssignment_7(), "rule__EnumList__EnumAssignment_7");
					put(grammarAccess.getDataStoreAccess().getNameAssignment_1(), "rule__DataStore__NameAssignment_1");
					put(grammarAccess.getDataStoreAccess().getClassAssignment_3(), "rule__DataStore__ClassAssignment_3");
					put(grammarAccess.getDataStoreAccess().getMultiAssignment_4(), "rule__DataStore__MultiAssignment_4");
					put(grammarAccess.getFieldAccess().getNameAssignment_0(), "rule__Field__NameAssignment_0");
					put(grammarAccess.getFieldAccess().getLabelAssignment_1(), "rule__Field__LabelAssignment_1");
					put(grammarAccess.getFieldAccess().getPathAssignment_2(), "rule__Field__PathAssignment_2");
					put(grammarAccess.getFieldAccess().getAttributesAssignment_3(), "rule__Field__AttributesAssignment_3");
					put(grammarAccess.getFieldGroupAccess().getLabelAssignment_1(), "rule__FieldGroup__LabelAssignment_1");
					put(grammarAccess.getFieldGroupAccess().getWithAssignment_2_1(), "rule__FieldGroup__WithAssignment_2_1");
					put(grammarAccess.getFieldGroupAccess().getElementsAssignment_4(), "rule__FieldGroup__ElementsAssignment_4");
					put(grammarAccess.getFieldGroupAccess().getAttributesAssignment_6(), "rule__FieldGroup__AttributesAssignment_6");
					put(grammarAccess.getNormalAttributeAccess().getClassExprAssignment_0(), "rule__NormalAttribute__ClassExprAssignment_0");
					put(grammarAccess.getNormalAttributeAccess().getClauseAssignment_1_1(), "rule__NormalAttribute__ClauseAssignment_1_1");
					put(grammarAccess.getAttributeClassExpressionAccess().getClassesAssignment_0(), "rule__AttributeClassExpression__ClassesAssignment_0");
					put(grammarAccess.getAttributeClassExpressionAccess().getClassesAssignment_1_1(), "rule__AttributeClassExpression__ClassesAssignment_1_1");
					put(grammarAccess.getRestrictionAttributeAccess().getLiteralsAssignment_1(), "rule__RestrictionAttribute__LiteralsAssignment_1");
					put(grammarAccess.getRestrictionAttributeAccess().getClauseAssignment_3(), "rule__RestrictionAttribute__ClauseAssignment_3");
					put(grammarAccess.getRestrictionGroupAttributeAccess().getRulesAssignment_3(), "rule__RestrictionGroupAttribute__RulesAssignment_3");
					put(grammarAccess.getRestrictionRuleAccess().getLiteralsAssignment_0(), "rule__RestrictionRule__LiteralsAssignment_0");
					put(grammarAccess.getRestrictionRuleAccess().getClauseAssignment_2(), "rule__RestrictionRule__ClauseAssignment_2");
					put(grammarAccess.getReferenceAccess().getRefAssignment(), "rule__Reference__RefAssignment");
					put(grammarAccess.getBOrExpressionAccess().getRightAssignment_1_2(), "rule__BOrExpression__RightAssignment_1_2");
					put(grammarAccess.getBAndExpressionAccess().getRightAssignment_1_2(), "rule__BAndExpression__RightAssignment_1_2");
					put(grammarAccess.getNegationExpressionAccess().getExprAssignment_1(), "rule__NegationExpression__ExprAssignment_1");
					put(grammarAccess.getBComparisonAccess().getRefAssignment_1(), "rule__BComparison__RefAssignment_1");
					put(grammarAccess.getBComparisonAccess().getBLiteralAssignment_2_1(), "rule__BComparison__BLiteralAssignment_2_1");
					put(grammarAccess.getSingleEnumComparisonAccess().getRefAssignment_0(), "rule__SingleEnumComparison__RefAssignment_0");
					put(grammarAccess.getSingleEnumComparisonAccess().getELiteralAssignment_2(), "rule__SingleEnumComparison__ELiteralAssignment_2");
					put(grammarAccess.getMultiEnumComparisonAccess().getRefAssignment_0(), "rule__MultiEnumComparison__RefAssignment_0");
					put(grammarAccess.getMultiEnumComparisonAccess().getMembershipAssignment_1(), "rule__MultiEnumComparison__MembershipAssignment_1");
					put(grammarAccess.getMultiEnumComparisonAccess().getELiteralsAssignment_2(), "rule__MultiEnumComparison__ELiteralsAssignment_2");
					put(grammarAccess.getStringValueComparisonAccess().getRefAssignment_0(), "rule__StringValueComparison__RefAssignment_0");
					put(grammarAccess.getStringValueComparisonAccess().getTargetValueAssignment_2(), "rule__StringValueComparison__TargetValueAssignment_2");
					put(grammarAccess.getPresenceCheckAccess().getRefAssignment_0(), "rule__PresenceCheck__RefAssignment_0");
					put(grammarAccess.getDirectEnumLiteralsCollectionAccess().getLiteralsAssignment_2(), "rule__DirectEnumLiteralsCollection__LiteralsAssignment_2");
					put(grammarAccess.getEnumListReferenceAccess().getRefAssignment(), "rule__EnumListReference__RefAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			nl.dslmeinte.xtext.examples.ui.contentassist.antlr.internal.InternalDynamicScreenDslParser typedParser = (nl.dslmeinte.xtext.examples.ui.contentassist.antlr.internal.InternalDynamicScreenDslParser) parser;
			typedParser.entryRuleDynamicScreen();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DynamicScreenDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DynamicScreenDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
