/*
* generated by Xtext
*/
grammar InternalDynamicScreenDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package nl.dslmeinte.xtext.examples.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package nl.dslmeinte.xtext.examples.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import nl.dslmeinte.xtext.examples.services.DynamicScreenDslGrammarAccess;

}

@parser::members {
 
 	private DynamicScreenDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DynamicScreenDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDynamicScreen
entryRuleDynamicScreen 
:
{ before(grammarAccess.getDynamicScreenRule()); }
	 ruleDynamicScreen
{ after(grammarAccess.getDynamicScreenRule()); } 
	 EOF 
;

// Rule DynamicScreen
ruleDynamicScreen
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDynamicScreenAccess().getGroup()); }
(rule__DynamicScreen__Group__0)
{ after(grammarAccess.getDynamicScreenAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLabel
entryRuleLabel 
:
{ before(grammarAccess.getLabelRule()); }
	 ruleLabel
{ after(grammarAccess.getLabelRule()); } 
	 EOF 
;

// Rule Label
ruleLabel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLabelAccess().getGroup()); }
(rule__Label__Group__0)
{ after(grammarAccess.getLabelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePathTail
entryRulePathTail 
:
{ before(grammarAccess.getPathTailRule()); }
	 rulePathTail
{ after(grammarAccess.getPathTailRule()); } 
	 EOF 
;

// Rule PathTail
rulePathTail
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPathTailAccess().getGroup()); }
(rule__PathTail__Group__0)
{ after(grammarAccess.getPathTailAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
(rule__Declaration__Alternatives)
{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExternalVariable
entryRuleExternalVariable 
:
{ before(grammarAccess.getExternalVariableRule()); }
	 ruleExternalVariable
{ after(grammarAccess.getExternalVariableRule()); } 
	 EOF 
;

// Rule ExternalVariable
ruleExternalVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExternalVariableAccess().getGroup()); }
(rule__ExternalVariable__Group__0)
{ after(grammarAccess.getExternalVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumList
entryRuleEnumList 
:
{ before(grammarAccess.getEnumListRule()); }
	 ruleEnumList
{ after(grammarAccess.getEnumListRule()); } 
	 EOF 
;

// Rule EnumList
ruleEnumList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumListAccess().getGroup()); }
(rule__EnumList__Group__0)
{ after(grammarAccess.getEnumListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataStore
entryRuleDataStore 
:
{ before(grammarAccess.getDataStoreRule()); }
	 ruleDataStore
{ after(grammarAccess.getDataStoreRule()); } 
	 EOF 
;

// Rule DataStore
ruleDataStore
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataStoreAccess().getGroup()); }
(rule__DataStore__Group__0)
{ after(grammarAccess.getDataStoreAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGroupElement
entryRuleGroupElement 
:
{ before(grammarAccess.getGroupElementRule()); }
	 ruleGroupElement
{ after(grammarAccess.getGroupElementRule()); } 
	 EOF 
;

// Rule GroupElement
ruleGroupElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroupElementAccess().getAlternatives()); }
(rule__GroupElement__Alternatives)
{ after(grammarAccess.getGroupElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleField
entryRuleField 
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldAccess().getGroup()); }
(rule__Field__Group__0)
{ after(grammarAccess.getFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFieldGroup
entryRuleFieldGroup 
:
{ before(grammarAccess.getFieldGroupRule()); }
	 ruleFieldGroup
{ after(grammarAccess.getFieldGroupRule()); } 
	 EOF 
;

// Rule FieldGroup
ruleFieldGroup
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldGroupAccess().getGroup()); }
(rule__FieldGroup__Group__0)
{ after(grammarAccess.getFieldGroupAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribute
entryRuleAttribute 
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeAccess().getAlternatives()); }
(rule__Attribute__Alternatives)
{ after(grammarAccess.getAttributeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumFieldAttribute
entryRuleEnumFieldAttribute 
:
{ before(grammarAccess.getEnumFieldAttributeRule()); }
	 ruleEnumFieldAttribute
{ after(grammarAccess.getEnumFieldAttributeRule()); } 
	 EOF 
;

// Rule EnumFieldAttribute
ruleEnumFieldAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumFieldAttributeAccess().getAlternatives()); }
(rule__EnumFieldAttribute__Alternatives)
{ after(grammarAccess.getEnumFieldAttributeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNormalAttribute
entryRuleNormalAttribute 
:
{ before(grammarAccess.getNormalAttributeRule()); }
	 ruleNormalAttribute
{ after(grammarAccess.getNormalAttributeRule()); } 
	 EOF 
;

// Rule NormalAttribute
ruleNormalAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNormalAttributeAccess().getGroup()); }
(rule__NormalAttribute__Group__0)
{ after(grammarAccess.getNormalAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeClassExpression
entryRuleAttributeClassExpression 
:
{ before(grammarAccess.getAttributeClassExpressionRule()); }
	 ruleAttributeClassExpression
{ after(grammarAccess.getAttributeClassExpressionRule()); } 
	 EOF 
;

// Rule AttributeClassExpression
ruleAttributeClassExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeClassExpressionAccess().getGroup()); }
(rule__AttributeClassExpression__Group__0)
{ after(grammarAccess.getAttributeClassExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRestrictionAttribute
entryRuleRestrictionAttribute 
:
{ before(grammarAccess.getRestrictionAttributeRule()); }
	 ruleRestrictionAttribute
{ after(grammarAccess.getRestrictionAttributeRule()); } 
	 EOF 
;

// Rule RestrictionAttribute
ruleRestrictionAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRestrictionAttributeAccess().getGroup()); }
(rule__RestrictionAttribute__Group__0)
{ after(grammarAccess.getRestrictionAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRestrictionGroupAttribute
entryRuleRestrictionGroupAttribute 
:
{ before(grammarAccess.getRestrictionGroupAttributeRule()); }
	 ruleRestrictionGroupAttribute
{ after(grammarAccess.getRestrictionGroupAttributeRule()); } 
	 EOF 
;

// Rule RestrictionGroupAttribute
ruleRestrictionGroupAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRestrictionGroupAttributeAccess().getGroup()); }
(rule__RestrictionGroupAttribute__Group__0)
{ after(grammarAccess.getRestrictionGroupAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRestrictionRule
entryRuleRestrictionRule 
:
{ before(grammarAccess.getRestrictionRuleRule()); }
	 ruleRestrictionRule
{ after(grammarAccess.getRestrictionRuleRule()); } 
	 EOF 
;

// Rule RestrictionRule
ruleRestrictionRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRestrictionRuleAccess().getGroup()); }
(rule__RestrictionRule__Group__0)
{ after(grammarAccess.getRestrictionRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReferenceTarget
entryRuleReferenceTarget 
:
{ before(grammarAccess.getReferenceTargetRule()); }
	 ruleReferenceTarget
{ after(grammarAccess.getReferenceTargetRule()); } 
	 EOF 
;

// Rule ReferenceTarget
ruleReferenceTarget
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferenceTargetAccess().getAlternatives()); }
(rule__ReferenceTarget__Alternatives)
{ after(grammarAccess.getReferenceTargetAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReference
entryRuleReference 
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferenceAccess().getRefAssignment()); }
(rule__Reference__RefAssignment)
{ after(grammarAccess.getReferenceAccess().getRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleBExpression
entryRuleBExpression 
:
{ before(grammarAccess.getBExpressionRule()); }
	 ruleBExpression
{ after(grammarAccess.getBExpressionRule()); } 
	 EOF 
;

// Rule BExpression
ruleBExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBExpressionAccess().getBOrExpressionParserRuleCall()); }
	ruleBOrExpression
{ after(grammarAccess.getBExpressionAccess().getBOrExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBOrExpression
entryRuleBOrExpression 
:
{ before(grammarAccess.getBOrExpressionRule()); }
	 ruleBOrExpression
{ after(grammarAccess.getBOrExpressionRule()); } 
	 EOF 
;

// Rule BOrExpression
ruleBOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBOrExpressionAccess().getGroup()); }
(rule__BOrExpression__Group__0)
{ after(grammarAccess.getBOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBAndExpression
entryRuleBAndExpression 
:
{ before(grammarAccess.getBAndExpressionRule()); }
	 ruleBAndExpression
{ after(grammarAccess.getBAndExpressionRule()); } 
	 EOF 
;

// Rule BAndExpression
ruleBAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBAndExpressionAccess().getGroup()); }
(rule__BAndExpression__Group__0)
{ after(grammarAccess.getBAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegationExpression
entryRuleNegationExpression 
:
{ before(grammarAccess.getNegationExpressionRule()); }
	 ruleNegationExpression
{ after(grammarAccess.getNegationExpressionRule()); } 
	 EOF 
;

// Rule NegationExpression
ruleNegationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegationExpressionAccess().getAlternatives()); }
(rule__NegationExpression__Alternatives)
{ after(grammarAccess.getNegationExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerminalBExpression
entryRuleTerminalBExpression 
:
{ before(grammarAccess.getTerminalBExpressionRule()); }
	 ruleTerminalBExpression
{ after(grammarAccess.getTerminalBExpressionRule()); } 
	 EOF 
;

// Rule TerminalBExpression
ruleTerminalBExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTerminalBExpressionAccess().getAlternatives()); }
(rule__TerminalBExpression__Alternatives)
{ after(grammarAccess.getTerminalBExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtomicReferringBExpression
entryRuleAtomicReferringBExpression 
:
{ before(grammarAccess.getAtomicReferringBExpressionRule()); }
	 ruleAtomicReferringBExpression
{ after(grammarAccess.getAtomicReferringBExpressionRule()); } 
	 EOF 
;

// Rule AtomicReferringBExpression
ruleAtomicReferringBExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomicReferringBExpressionAccess().getAlternatives()); }
(rule__AtomicReferringBExpression__Alternatives)
{ after(grammarAccess.getAtomicReferringBExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBComparison
entryRuleBComparison 
:
{ before(grammarAccess.getBComparisonRule()); }
	 ruleBComparison
{ after(grammarAccess.getBComparisonRule()); } 
	 EOF 
;

// Rule BComparison
ruleBComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBComparisonAccess().getGroup()); }
(rule__BComparison__Group__0)
{ after(grammarAccess.getBComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumComparison
entryRuleEnumComparison 
:
{ before(grammarAccess.getEnumComparisonRule()); }
	 ruleEnumComparison
{ after(grammarAccess.getEnumComparisonRule()); } 
	 EOF 
;

// Rule EnumComparison
ruleEnumComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumComparisonAccess().getAlternatives()); }
(rule__EnumComparison__Alternatives)
{ after(grammarAccess.getEnumComparisonAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleEnumComparison
entryRuleSingleEnumComparison 
:
{ before(grammarAccess.getSingleEnumComparisonRule()); }
	 ruleSingleEnumComparison
{ after(grammarAccess.getSingleEnumComparisonRule()); } 
	 EOF 
;

// Rule SingleEnumComparison
ruleSingleEnumComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleEnumComparisonAccess().getGroup()); }
(rule__SingleEnumComparison__Group__0)
{ after(grammarAccess.getSingleEnumComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiEnumComparison
entryRuleMultiEnumComparison 
:
{ before(grammarAccess.getMultiEnumComparisonRule()); }
	 ruleMultiEnumComparison
{ after(grammarAccess.getMultiEnumComparisonRule()); } 
	 EOF 
;

// Rule MultiEnumComparison
ruleMultiEnumComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiEnumComparisonAccess().getGroup()); }
(rule__MultiEnumComparison__Group__0)
{ after(grammarAccess.getMultiEnumComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringValueComparison
entryRuleStringValueComparison 
:
{ before(grammarAccess.getStringValueComparisonRule()); }
	 ruleStringValueComparison
{ after(grammarAccess.getStringValueComparisonRule()); } 
	 EOF 
;

// Rule StringValueComparison
ruleStringValueComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringValueComparisonAccess().getGroup()); }
(rule__StringValueComparison__Group__0)
{ after(grammarAccess.getStringValueComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePresenceCheck
entryRulePresenceCheck 
:
{ before(grammarAccess.getPresenceCheckRule()); }
	 rulePresenceCheck
{ after(grammarAccess.getPresenceCheckRule()); } 
	 EOF 
;

// Rule PresenceCheck
rulePresenceCheck
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPresenceCheckAccess().getGroup()); }
(rule__PresenceCheck__Group__0)
{ after(grammarAccess.getPresenceCheckAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumLiteralsCollection
entryRuleEnumLiteralsCollection 
:
{ before(grammarAccess.getEnumLiteralsCollectionRule()); }
	 ruleEnumLiteralsCollection
{ after(grammarAccess.getEnumLiteralsCollectionRule()); } 
	 EOF 
;

// Rule EnumLiteralsCollection
ruleEnumLiteralsCollection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumLiteralsCollectionAccess().getAlternatives()); }
(rule__EnumLiteralsCollection__Alternatives)
{ after(grammarAccess.getEnumLiteralsCollectionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDirectEnumLiteralsCollection
entryRuleDirectEnumLiteralsCollection 
:
{ before(grammarAccess.getDirectEnumLiteralsCollectionRule()); }
	 ruleDirectEnumLiteralsCollection
{ after(grammarAccess.getDirectEnumLiteralsCollectionRule()); } 
	 EOF 
;

// Rule DirectEnumLiteralsCollection
ruleDirectEnumLiteralsCollection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDirectEnumLiteralsCollectionAccess().getGroup()); }
(rule__DirectEnumLiteralsCollection__Group__0)
{ after(grammarAccess.getDirectEnumLiteralsCollectionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumListReference
entryRuleEnumListReference 
:
{ before(grammarAccess.getEnumListReferenceRule()); }
	 ruleEnumListReference
{ after(grammarAccess.getEnumListReferenceRule()); } 
	 EOF 
;

// Rule EnumListReference
ruleEnumListReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumListReferenceAccess().getRefAssignment()); }
(rule__EnumListReference__RefAssignment)
{ after(grammarAccess.getEnumListReferenceAccess().getRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule AttributeClass
ruleAttributeClass
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeClassAccess().getAlternatives()); }
(rule__AttributeClass__Alternatives)
{ after(grammarAccess.getAttributeClassAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule BLiteral
ruleBLiteral
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBLiteralAccess().getAlternatives()); }
(rule__BLiteral__Alternatives)
{ after(grammarAccess.getBLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule EnumMembership
ruleEnumMembership
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumMembershipAccess().getAlternatives()); }
(rule__EnumMembership__Alternatives)
{ after(grammarAccess.getEnumMembershipAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Declaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getExternalVariableParserRuleCall_0()); }
	ruleExternalVariable
{ after(grammarAccess.getDeclarationAccess().getExternalVariableParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getEnumListParserRuleCall_1()); }
	ruleEnumList
{ after(grammarAccess.getDeclarationAccess().getEnumListParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getDataStoreParserRuleCall_2()); }
	ruleDataStore
{ after(grammarAccess.getDeclarationAccess().getDataStoreParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GroupElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroupElementAccess().getFieldParserRuleCall_0()); }
	ruleField
{ after(grammarAccess.getGroupElementAccess().getFieldParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getGroupElementAccess().getFieldGroupParserRuleCall_1()); }
	ruleFieldGroup
{ after(grammarAccess.getGroupElementAccess().getFieldGroupParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNormalAttributeParserRuleCall_0()); }
	ruleNormalAttribute
{ after(grammarAccess.getAttributeAccess().getNormalAttributeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAttributeAccess().getEnumFieldAttributeParserRuleCall_1()); }
	ruleEnumFieldAttribute
{ after(grammarAccess.getAttributeAccess().getEnumFieldAttributeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumFieldAttribute__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumFieldAttributeAccess().getRestrictionAttributeParserRuleCall_0()); }
	ruleRestrictionAttribute
{ after(grammarAccess.getEnumFieldAttributeAccess().getRestrictionAttributeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEnumFieldAttributeAccess().getRestrictionGroupAttributeParserRuleCall_1()); }
	ruleRestrictionGroupAttribute
{ after(grammarAccess.getEnumFieldAttributeAccess().getRestrictionGroupAttributeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceTarget__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceTargetAccess().getFieldParserRuleCall_0()); }
	ruleField
{ after(grammarAccess.getReferenceTargetAccess().getFieldParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getReferenceTargetAccess().getExternalVariableParserRuleCall_1()); }
	ruleExternalVariable
{ after(grammarAccess.getReferenceTargetAccess().getExternalVariableParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BOrExpression__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOrExpressionAccess().getOrKeyword_1_1_0()); }

	'or' 

{ after(grammarAccess.getBOrExpressionAccess().getOrKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getBOrExpressionAccess().getVerticalLineKeyword_1_1_1()); }

	'|' 

{ after(grammarAccess.getBOrExpressionAccess().getVerticalLineKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BAndExpression__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBAndExpressionAccess().getAndKeyword_1_1_0()); }

	'and' 

{ after(grammarAccess.getBAndExpressionAccess().getAndKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getBAndExpressionAccess().getAmpersandKeyword_1_1_1()); }

	'&' 

{ after(grammarAccess.getBAndExpressionAccess().getAmpersandKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationExpressionAccess().getTerminalBExpressionParserRuleCall_0()); }
	ruleTerminalBExpression
{ after(grammarAccess.getNegationExpressionAccess().getTerminalBExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNegationExpressionAccess().getGroup_1()); }
(rule__NegationExpression__Group_1__0)
{ after(grammarAccess.getNegationExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationExpressionAccess().getNotKeyword_1_1_0()); }

	'not' 

{ after(grammarAccess.getNegationExpressionAccess().getNotKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getNegationExpressionAccess().getExclamationMarkKeyword_1_1_1()); }

	'!' 

{ after(grammarAccess.getNegationExpressionAccess().getExclamationMarkKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalBExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalBExpressionAccess().getAtomicReferringBExpressionParserRuleCall_0()); }
	ruleAtomicReferringBExpression
{ after(grammarAccess.getTerminalBExpressionAccess().getAtomicReferringBExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTerminalBExpressionAccess().getGroup_1()); }
(rule__TerminalBExpression__Group_1__0)
{ after(grammarAccess.getTerminalBExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicReferringBExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomicReferringBExpressionAccess().getBComparisonParserRuleCall_0()); }
	ruleBComparison
{ after(grammarAccess.getAtomicReferringBExpressionAccess().getBComparisonParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomicReferringBExpressionAccess().getEnumComparisonParserRuleCall_1()); }
	ruleEnumComparison
{ after(grammarAccess.getAtomicReferringBExpressionAccess().getEnumComparisonParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomicReferringBExpressionAccess().getStringValueComparisonParserRuleCall_2()); }
	ruleStringValueComparison
{ after(grammarAccess.getAtomicReferringBExpressionAccess().getStringValueComparisonParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAtomicReferringBExpressionAccess().getPresenceCheckParserRuleCall_3()); }
	rulePresenceCheck
{ after(grammarAccess.getAtomicReferringBExpressionAccess().getPresenceCheckParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumComparison__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumComparisonAccess().getSingleEnumComparisonParserRuleCall_0()); }
	ruleSingleEnumComparison
{ after(grammarAccess.getEnumComparisonAccess().getSingleEnumComparisonParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEnumComparisonAccess().getMultiEnumComparisonParserRuleCall_1()); }
	ruleMultiEnumComparison
{ after(grammarAccess.getEnumComparisonAccess().getMultiEnumComparisonParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumLiteralsCollection__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumLiteralsCollectionAccess().getDirectEnumLiteralsCollectionParserRuleCall_0()); }
	ruleDirectEnumLiteralsCollection
{ after(grammarAccess.getEnumLiteralsCollectionAccess().getDirectEnumLiteralsCollectionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEnumLiteralsCollectionAccess().getEnumListReferenceParserRuleCall_1()); }
	ruleEnumListReference
{ after(grammarAccess.getEnumLiteralsCollectionAccess().getEnumListReferenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeClass__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeClassAccess().getDisplayEnumLiteralDeclaration_0()); }
(	'display' 
)
{ after(grammarAccess.getAttributeClassAccess().getDisplayEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAttributeClassAccess().getRequiredEnumLiteralDeclaration_1()); }
(	'required' 
)
{ after(grammarAccess.getAttributeClassAccess().getRequiredEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAttributeClassAccess().getReadonlyEnumLiteralDeclaration_2()); }
(	'readonly' 
)
{ after(grammarAccess.getAttributeClassAccess().getReadonlyEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getAttributeClassAccess().getCalculatedEnumLiteralDeclaration_3()); }
(	'calculated' 
)
{ after(grammarAccess.getAttributeClassAccess().getCalculatedEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getAttributeClassAccess().getDoubleAsteriskEnumLiteralDeclaration_4()); }
(	'doubleAsterisk' 
)
{ after(grammarAccess.getAttributeClassAccess().getDoubleAsteriskEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBLiteralAccess().getTrueEnumLiteralDeclaration_0()); }
(	'true' 
)
{ after(grammarAccess.getBLiteralAccess().getTrueEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBLiteralAccess().getFalseEnumLiteralDeclaration_1()); }
(	'false' 
)
{ after(grammarAccess.getBLiteralAccess().getFalseEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumMembership__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumMembershipAccess().getIsInEnumLiteralDeclaration_0()); }
(	'is-one-of' 
)
{ after(grammarAccess.getEnumMembershipAccess().getIsInEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getEnumMembershipAccess().getIsNotInEnumLiteralDeclaration_1()); }
(	'is-not-one-of' 
)
{ after(grammarAccess.getEnumMembershipAccess().getIsNotInEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DynamicScreen__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicScreen__Group__0__Impl
	rule__DynamicScreen__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicScreen__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicScreenAccess().getDynamicScreenKeyword_0()); }

	'dynamic-screen' 

{ after(grammarAccess.getDynamicScreenAccess().getDynamicScreenKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicScreen__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicScreen__Group__1__Impl
	rule__DynamicScreen__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicScreen__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicScreenAccess().getLabelAssignment_1()); }
(rule__DynamicScreen__LabelAssignment_1)
{ after(grammarAccess.getDynamicScreenAccess().getLabelAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicScreen__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicScreen__Group__2__Impl
	rule__DynamicScreen__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicScreen__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicScreenAccess().getDataImportKeyword_2()); }

	'data-import' 

{ after(grammarAccess.getDynamicScreenAccess().getDataImportKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicScreen__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicScreen__Group__3__Impl
	rule__DynamicScreen__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicScreen__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicScreenAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getDynamicScreenAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicScreen__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicScreen__Group__4__Impl
	rule__DynamicScreen__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicScreen__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicScreenAccess().getImportURIAssignment_4()); }
(rule__DynamicScreen__ImportURIAssignment_4)
{ after(grammarAccess.getDynamicScreenAccess().getImportURIAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicScreen__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicScreen__Group__5__Impl
	rule__DynamicScreen__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicScreen__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicScreenAccess().getViewClassKeyword_5()); }

	'view-class' 

{ after(grammarAccess.getDynamicScreenAccess().getViewClassKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicScreen__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicScreen__Group__6__Impl
	rule__DynamicScreen__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicScreen__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicScreenAccess().getEqualsSignKeyword_6()); }

	'=' 

{ after(grammarAccess.getDynamicScreenAccess().getEqualsSignKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicScreen__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicScreen__Group__7__Impl
	rule__DynamicScreen__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicScreen__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicScreenAccess().getViewClassAssignment_7()); }
(rule__DynamicScreen__ViewClassAssignment_7)
{ after(grammarAccess.getDynamicScreenAccess().getViewClassAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicScreen__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicScreen__Group__8__Impl
	rule__DynamicScreen__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicScreen__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicScreenAccess().getDeclarationsAssignment_8()); }
(rule__DynamicScreen__DeclarationsAssignment_8)*
{ after(grammarAccess.getDynamicScreenAccess().getDeclarationsAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicScreen__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicScreen__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicScreen__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getDynamicScreenAccess().getGroupsAssignment_9()); }
(rule__DynamicScreen__GroupsAssignment_9)
{ after(grammarAccess.getDynamicScreenAccess().getGroupsAssignment_9()); }
)
(
{ before(grammarAccess.getDynamicScreenAccess().getGroupsAssignment_9()); }
(rule__DynamicScreen__GroupsAssignment_9)*
{ after(grammarAccess.getDynamicScreenAccess().getGroupsAssignment_9()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__Label__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label__Group__0__Impl
	rule__Label__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getEnAssignment_0()); }
(rule__Label__EnAssignment_0)
{ after(grammarAccess.getLabelAccess().getEnAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Label__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getGroup_1()); }
(rule__Label__Group_1__0)?
{ after(grammarAccess.getLabelAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Label__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label__Group_1__0__Impl
	rule__Label__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getNlKeyword_1_0()); }

	'[nl:' 

{ after(grammarAccess.getLabelAccess().getNlKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Label__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label__Group_1__1__Impl
	rule__Label__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getNlAssignment_1_1()); }
(rule__Label__NlAssignment_1_1)
{ after(grammarAccess.getLabelAccess().getNlAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Label__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Label__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getLabelAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PathTail__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathTail__Group__0__Impl
	rule__PathTail__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTail__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathTailAccess().getSolidusKeyword_0()); }

	'/' 

{ after(grammarAccess.getPathTailAccess().getSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathTail__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathTail__Group__1__Impl
	rule__PathTail__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTail__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathTailAccess().getFieldAssignment_1()); }
(rule__PathTail__FieldAssignment_1)
{ after(grammarAccess.getPathTailAccess().getFieldAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathTail__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathTail__Group__2__Impl
	rule__PathTail__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTail__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathTailAccess().getGroup_2()); }
(rule__PathTail__Group_2__0)?
{ after(grammarAccess.getPathTailAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathTail__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathTail__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTail__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathTailAccess().getTailAssignment_3()); }
(rule__PathTail__TailAssignment_3)?
{ after(grammarAccess.getPathTailAccess().getTailAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PathTail__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathTail__Group_2__0__Impl
	rule__PathTail__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTail__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathTailAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getPathTailAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathTail__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathTail__Group_2__1__Impl
	rule__PathTail__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTail__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathTailAccess().getAsEntityAssignment_2_1()); }
(rule__PathTail__AsEntityAssignment_2_1)
{ after(grammarAccess.getPathTailAccess().getAsEntityAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PathTail__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PathTail__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PathTail__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathTailAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getPathTailAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExternalVariable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalVariable__Group__0__Impl
	rule__ExternalVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalVariable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalVariableAccess().getExternalVarKeyword_0()); }

	'external-var' 

{ after(grammarAccess.getExternalVariableAccess().getExternalVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalVariable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalVariable__Group__1__Impl
	rule__ExternalVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalVariable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalVariableAccess().getPathAssignment_1()); }
(rule__ExternalVariable__PathAssignment_1)
{ after(grammarAccess.getExternalVariableAccess().getPathAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalVariable__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalVariable__Group__2__Impl
	rule__ExternalVariable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalVariable__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalVariableAccess().getAsKeyword_2()); }

	'as' 

{ after(grammarAccess.getExternalVariableAccess().getAsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalVariable__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalVariable__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalVariable__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalVariableAccess().getNameAssignment_3()); }
(rule__ExternalVariable__NameAssignment_3)
{ after(grammarAccess.getExternalVariableAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EnumList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumList__Group__0__Impl
	rule__EnumList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumListAccess().getDefineKeyword_0()); }

	'define' 

{ after(grammarAccess.getEnumListAccess().getDefineKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumList__Group__1__Impl
	rule__EnumList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumListAccess().getNameAssignment_1()); }
(rule__EnumList__NameAssignment_1)
{ after(grammarAccess.getEnumListAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumList__Group__2__Impl
	rule__EnumList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumListAccess().getAsKeyword_2()); }

	'as' 

{ after(grammarAccess.getEnumListAccess().getAsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumList__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumList__Group__3__Impl
	rule__EnumList__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumList__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumListAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getEnumListAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumList__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumList__Group__4__Impl
	rule__EnumList__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumList__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEnumListAccess().getLiteralsAssignment_4()); }
(rule__EnumList__LiteralsAssignment_4)
{ after(grammarAccess.getEnumListAccess().getLiteralsAssignment_4()); }
)
(
{ before(grammarAccess.getEnumListAccess().getLiteralsAssignment_4()); }
(rule__EnumList__LiteralsAssignment_4)*
{ after(grammarAccess.getEnumListAccess().getLiteralsAssignment_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumList__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumList__Group__5__Impl
	rule__EnumList__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumList__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumListAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getEnumListAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumList__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumList__Group__6__Impl
	rule__EnumList__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumList__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumListAccess().getOfKeyword_6()); }

	'of' 

{ after(grammarAccess.getEnumListAccess().getOfKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumList__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumList__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumList__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumListAccess().getEnumAssignment_7()); }
(rule__EnumList__EnumAssignment_7)
{ after(grammarAccess.getEnumListAccess().getEnumAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__DataStore__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataStore__Group__0__Impl
	rule__DataStore__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataStore__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataStoreAccess().getDataStoreKeyword_0()); }

	'data-store' 

{ after(grammarAccess.getDataStoreAccess().getDataStoreKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataStore__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataStore__Group__1__Impl
	rule__DataStore__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataStore__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataStoreAccess().getNameAssignment_1()); }
(rule__DataStore__NameAssignment_1)
{ after(grammarAccess.getDataStoreAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataStore__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataStore__Group__2__Impl
	rule__DataStore__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DataStore__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataStoreAccess().getOfTypeKeyword_2()); }

	'of-type' 

{ after(grammarAccess.getDataStoreAccess().getOfTypeKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataStore__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataStore__Group__3__Impl
	rule__DataStore__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DataStore__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataStoreAccess().getClassAssignment_3()); }
(rule__DataStore__ClassAssignment_3)
{ after(grammarAccess.getDataStoreAccess().getClassAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataStore__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataStore__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataStore__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataStoreAccess().getMultiAssignment_4()); }
(rule__DataStore__MultiAssignment_4)?
{ after(grammarAccess.getDataStoreAccess().getMultiAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Field__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__0__Impl
	rule__Field__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameAssignment_0()); }
(rule__Field__NameAssignment_0)
{ after(grammarAccess.getFieldAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__1__Impl
	rule__Field__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getLabelAssignment_1()); }
(rule__Field__LabelAssignment_1)
{ after(grammarAccess.getFieldAccess().getLabelAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__2__Impl
	rule__Field__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getPathAssignment_2()); }
(rule__Field__PathAssignment_2)
{ after(grammarAccess.getFieldAccess().getPathAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getAttributesAssignment_3()); }
(rule__Field__AttributesAssignment_3)*
{ after(grammarAccess.getFieldAccess().getAttributesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FieldGroup__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldGroup__Group__0__Impl
	rule__FieldGroup__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldGroup__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldGroupAccess().getGroupKeyword_0()); }

	'group' 

{ after(grammarAccess.getFieldGroupAccess().getGroupKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldGroup__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldGroup__Group__1__Impl
	rule__FieldGroup__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldGroup__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldGroupAccess().getLabelAssignment_1()); }
(rule__FieldGroup__LabelAssignment_1)?
{ after(grammarAccess.getFieldGroupAccess().getLabelAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldGroup__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldGroup__Group__2__Impl
	rule__FieldGroup__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldGroup__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldGroupAccess().getGroup_2()); }
(rule__FieldGroup__Group_2__0)?
{ after(grammarAccess.getFieldGroupAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldGroup__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldGroup__Group__3__Impl
	rule__FieldGroup__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldGroup__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldGroupAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getFieldGroupAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldGroup__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldGroup__Group__4__Impl
	rule__FieldGroup__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldGroup__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFieldGroupAccess().getElementsAssignment_4()); }
(rule__FieldGroup__ElementsAssignment_4)
{ after(grammarAccess.getFieldGroupAccess().getElementsAssignment_4()); }
)
(
{ before(grammarAccess.getFieldGroupAccess().getElementsAssignment_4()); }
(rule__FieldGroup__ElementsAssignment_4)*
{ after(grammarAccess.getFieldGroupAccess().getElementsAssignment_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldGroup__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldGroup__Group__5__Impl
	rule__FieldGroup__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldGroup__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldGroupAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getFieldGroupAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldGroup__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldGroup__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldGroup__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldGroupAccess().getAttributesAssignment_6()); }
(rule__FieldGroup__AttributesAssignment_6)*
{ after(grammarAccess.getFieldGroupAccess().getAttributesAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__FieldGroup__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldGroup__Group_2__0__Impl
	rule__FieldGroup__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldGroup__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldGroupAccess().getWithKeyword_2_0()); }

	'with' 

{ after(grammarAccess.getFieldGroupAccess().getWithKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldGroup__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldGroup__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldGroup__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldGroupAccess().getWithAssignment_2_1()); }
(rule__FieldGroup__WithAssignment_2_1)
{ after(grammarAccess.getFieldGroupAccess().getWithAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NormalAttribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalAttribute__Group__0__Impl
	rule__NormalAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalAttribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalAttributeAccess().getClassExprAssignment_0()); }
(rule__NormalAttribute__ClassExprAssignment_0)
{ after(grammarAccess.getNormalAttributeAccess().getClassExprAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalAttribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalAttribute__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalAttribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalAttributeAccess().getGroup_1()); }
(rule__NormalAttribute__Group_1__0)?
{ after(grammarAccess.getNormalAttributeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NormalAttribute__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalAttribute__Group_1__0__Impl
	rule__NormalAttribute__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalAttribute__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalAttributeAccess().getIfKeyword_1_0()); }

	'if' 

{ after(grammarAccess.getNormalAttributeAccess().getIfKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalAttribute__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalAttribute__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalAttribute__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalAttributeAccess().getClauseAssignment_1_1()); }
(rule__NormalAttribute__ClauseAssignment_1_1)
{ after(grammarAccess.getNormalAttributeAccess().getClauseAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeClassExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeClassExpression__Group__0__Impl
	rule__AttributeClassExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeClassExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeClassExpressionAccess().getClassesAssignment_0()); }
(rule__AttributeClassExpression__ClassesAssignment_0)
{ after(grammarAccess.getAttributeClassExpressionAccess().getClassesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeClassExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeClassExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeClassExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeClassExpressionAccess().getGroup_1()); }
(rule__AttributeClassExpression__Group_1__0)*
{ after(grammarAccess.getAttributeClassExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeClassExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeClassExpression__Group_1__0__Impl
	rule__AttributeClassExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeClassExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeClassExpressionAccess().getPlusSignKeyword_1_0()); }

	'+' 

{ after(grammarAccess.getAttributeClassExpressionAccess().getPlusSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeClassExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeClassExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeClassExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeClassExpressionAccess().getClassesAssignment_1_1()); }
(rule__AttributeClassExpression__ClassesAssignment_1_1)
{ after(grammarAccess.getAttributeClassExpressionAccess().getClassesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RestrictionAttribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictionAttribute__Group__0__Impl
	rule__RestrictionAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionAttribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionAttributeAccess().getRestrictToKeyword_0()); }

	'restrict-to' 

{ after(grammarAccess.getRestrictionAttributeAccess().getRestrictToKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictionAttribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictionAttribute__Group__1__Impl
	rule__RestrictionAttribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionAttribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionAttributeAccess().getLiteralsAssignment_1()); }
(rule__RestrictionAttribute__LiteralsAssignment_1)
{ after(grammarAccess.getRestrictionAttributeAccess().getLiteralsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictionAttribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictionAttribute__Group__2__Impl
	rule__RestrictionAttribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionAttribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionAttributeAccess().getIfKeyword_2()); }

	'if' 

{ after(grammarAccess.getRestrictionAttributeAccess().getIfKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictionAttribute__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictionAttribute__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionAttribute__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionAttributeAccess().getClauseAssignment_3()); }
(rule__RestrictionAttribute__ClauseAssignment_3)
{ after(grammarAccess.getRestrictionAttributeAccess().getClauseAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RestrictionGroupAttribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictionGroupAttribute__Group__0__Impl
	rule__RestrictionGroupAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionGroupAttribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionGroupAttributeAccess().getRestrictionGroupAttributeAction_0()); }
(

)
{ after(grammarAccess.getRestrictionGroupAttributeAccess().getRestrictionGroupAttributeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictionGroupAttribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictionGroupAttribute__Group__1__Impl
	rule__RestrictionGroupAttribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionGroupAttribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionGroupAttributeAccess().getRestrictToGroupKeyword_1()); }

	'restrict-to-group' 

{ after(grammarAccess.getRestrictionGroupAttributeAccess().getRestrictToGroupKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictionGroupAttribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictionGroupAttribute__Group__2__Impl
	rule__RestrictionGroupAttribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionGroupAttribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionGroupAttributeAccess().getLessThanSignKeyword_2()); }

	'<' 

{ after(grammarAccess.getRestrictionGroupAttributeAccess().getLessThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictionGroupAttribute__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictionGroupAttribute__Group__3__Impl
	rule__RestrictionGroupAttribute__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionGroupAttribute__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getRestrictionGroupAttributeAccess().getRulesAssignment_3()); }
(rule__RestrictionGroupAttribute__RulesAssignment_3)
{ after(grammarAccess.getRestrictionGroupAttributeAccess().getRulesAssignment_3()); }
)
(
{ before(grammarAccess.getRestrictionGroupAttributeAccess().getRulesAssignment_3()); }
(rule__RestrictionGroupAttribute__RulesAssignment_3)*
{ after(grammarAccess.getRestrictionGroupAttributeAccess().getRulesAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictionGroupAttribute__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictionGroupAttribute__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionGroupAttribute__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionGroupAttributeAccess().getGreaterThanSignKeyword_4()); }

	'>' 

{ after(grammarAccess.getRestrictionGroupAttributeAccess().getGreaterThanSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RestrictionRule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictionRule__Group__0__Impl
	rule__RestrictionRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionRule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionRuleAccess().getLiteralsAssignment_0()); }
(rule__RestrictionRule__LiteralsAssignment_0)
{ after(grammarAccess.getRestrictionRuleAccess().getLiteralsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictionRule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictionRule__Group__1__Impl
	rule__RestrictionRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionRule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionRuleAccess().getIfKeyword_1()); }

	'if' 

{ after(grammarAccess.getRestrictionRuleAccess().getIfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RestrictionRule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RestrictionRule__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionRule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionRuleAccess().getClauseAssignment_2()); }
(rule__RestrictionRule__ClauseAssignment_2)
{ after(grammarAccess.getRestrictionRuleAccess().getClauseAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BOrExpression__Group__0__Impl
	rule__BOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOrExpressionAccess().getBAndExpressionParserRuleCall_0()); }
	ruleBAndExpression
{ after(grammarAccess.getBOrExpressionAccess().getBAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOrExpressionAccess().getGroup_1()); }
(rule__BOrExpression__Group_1__0)*
{ after(grammarAccess.getBOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BOrExpression__Group_1__0__Impl
	rule__BOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOrExpressionAccess().getOrOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBOrExpressionAccess().getOrOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BOrExpression__Group_1__1__Impl
	rule__BOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOrExpressionAccess().getAlternatives_1_1()); }
(rule__BOrExpression__Alternatives_1_1)
{ after(grammarAccess.getBOrExpressionAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOrExpressionAccess().getRightAssignment_1_2()); }
(rule__BOrExpression__RightAssignment_1_2)
{ after(grammarAccess.getBOrExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BAndExpression__Group__0__Impl
	rule__BAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBAndExpressionAccess().getNegationExpressionParserRuleCall_0()); }
	ruleNegationExpression
{ after(grammarAccess.getBAndExpressionAccess().getNegationExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBAndExpressionAccess().getGroup_1()); }
(rule__BAndExpression__Group_1__0)*
{ after(grammarAccess.getBAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BAndExpression__Group_1__0__Impl
	rule__BAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBAndExpressionAccess().getAndOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getBAndExpressionAccess().getAndOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BAndExpression__Group_1__1__Impl
	rule__BAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBAndExpressionAccess().getAlternatives_1_1()); }
(rule__BAndExpression__Alternatives_1_1)
{ after(grammarAccess.getBAndExpressionAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BAndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BAndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBAndExpressionAccess().getRightAssignment_1_2()); }
(rule__BAndExpression__RightAssignment_1_2)
{ after(grammarAccess.getBAndExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NegationExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegationExpression__Group_1__0__Impl
	rule__NegationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationExpressionAccess().getNegationExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getNegationExpressionAccess().getNegationExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegationExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegationExpression__Group_1__1__Impl
	rule__NegationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationExpressionAccess().getAlternatives_1_1()); }
(rule__NegationExpression__Alternatives_1_1)
{ after(grammarAccess.getNegationExpressionAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NegationExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NegationExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationExpressionAccess().getExprAssignment_1_2()); }
(rule__NegationExpression__ExprAssignment_1_2)
{ after(grammarAccess.getNegationExpressionAccess().getExprAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TerminalBExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalBExpression__Group_1__0__Impl
	rule__TerminalBExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalBExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalBExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getTerminalBExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalBExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalBExpression__Group_1__1__Impl
	rule__TerminalBExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalBExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalBExpressionAccess().getBExpressionParserRuleCall_1_1()); }
	ruleBExpression
{ after(grammarAccess.getTerminalBExpressionAccess().getBExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalBExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalBExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalBExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalBExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getTerminalBExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BComparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BComparison__Group__0__Impl
	rule__BComparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BComparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBComparisonAccess().getBComparisonAction_0()); }
(

)
{ after(grammarAccess.getBComparisonAccess().getBComparisonAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BComparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BComparison__Group__1__Impl
	rule__BComparison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BComparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBComparisonAccess().getRefAssignment_1()); }
(rule__BComparison__RefAssignment_1)
{ after(grammarAccess.getBComparisonAccess().getRefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BComparison__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BComparison__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BComparison__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBComparisonAccess().getGroup_2()); }
(rule__BComparison__Group_2__0)?
{ after(grammarAccess.getBComparisonAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BComparison__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BComparison__Group_2__0__Impl
	rule__BComparison__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BComparison__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBComparisonAccess().getIsKeyword_2_0()); }

	'is' 

{ after(grammarAccess.getBComparisonAccess().getIsKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BComparison__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BComparison__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BComparison__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBComparisonAccess().getBLiteralAssignment_2_1()); }
(rule__BComparison__BLiteralAssignment_2_1)
{ after(grammarAccess.getBComparisonAccess().getBLiteralAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SingleEnumComparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleEnumComparison__Group__0__Impl
	rule__SingleEnumComparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleEnumComparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleEnumComparisonAccess().getRefAssignment_0()); }
(rule__SingleEnumComparison__RefAssignment_0)
{ after(grammarAccess.getSingleEnumComparisonAccess().getRefAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleEnumComparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleEnumComparison__Group__1__Impl
	rule__SingleEnumComparison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleEnumComparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleEnumComparisonAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getSingleEnumComparisonAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleEnumComparison__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleEnumComparison__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleEnumComparison__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleEnumComparisonAccess().getELiteralAssignment_2()); }
(rule__SingleEnumComparison__ELiteralAssignment_2)
{ after(grammarAccess.getSingleEnumComparisonAccess().getELiteralAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiEnumComparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiEnumComparison__Group__0__Impl
	rule__MultiEnumComparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiEnumComparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiEnumComparisonAccess().getRefAssignment_0()); }
(rule__MultiEnumComparison__RefAssignment_0)
{ after(grammarAccess.getMultiEnumComparisonAccess().getRefAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiEnumComparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiEnumComparison__Group__1__Impl
	rule__MultiEnumComparison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiEnumComparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiEnumComparisonAccess().getMembershipAssignment_1()); }
(rule__MultiEnumComparison__MembershipAssignment_1)
{ after(grammarAccess.getMultiEnumComparisonAccess().getMembershipAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiEnumComparison__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiEnumComparison__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiEnumComparison__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiEnumComparisonAccess().getELiteralsAssignment_2()); }
(rule__MultiEnumComparison__ELiteralsAssignment_2)
{ after(grammarAccess.getMultiEnumComparisonAccess().getELiteralsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StringValueComparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringValueComparison__Group__0__Impl
	rule__StringValueComparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValueComparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueComparisonAccess().getRefAssignment_0()); }
(rule__StringValueComparison__RefAssignment_0)
{ after(grammarAccess.getStringValueComparisonAccess().getRefAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringValueComparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringValueComparison__Group__1__Impl
	rule__StringValueComparison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValueComparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueComparisonAccess().getEqualsKeyword_1()); }

	'equals' 

{ after(grammarAccess.getStringValueComparisonAccess().getEqualsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringValueComparison__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringValueComparison__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValueComparison__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueComparisonAccess().getTargetValueAssignment_2()); }
(rule__StringValueComparison__TargetValueAssignment_2)
{ after(grammarAccess.getStringValueComparisonAccess().getTargetValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PresenceCheck__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PresenceCheck__Group__0__Impl
	rule__PresenceCheck__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PresenceCheck__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPresenceCheckAccess().getRefAssignment_0()); }
(rule__PresenceCheck__RefAssignment_0)
{ after(grammarAccess.getPresenceCheckAccess().getRefAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PresenceCheck__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PresenceCheck__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PresenceCheck__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPresenceCheckAccess().getIsPresentKeyword_1()); }

	'is-present' 

{ after(grammarAccess.getPresenceCheckAccess().getIsPresentKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DirectEnumLiteralsCollection__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectEnumLiteralsCollection__Group__0__Impl
	rule__DirectEnumLiteralsCollection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectEnumLiteralsCollection__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectEnumLiteralsCollectionAccess().getDirectEnumLiteralsCollectionAction_0()); }
(

)
{ after(grammarAccess.getDirectEnumLiteralsCollectionAccess().getDirectEnumLiteralsCollectionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DirectEnumLiteralsCollection__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectEnumLiteralsCollection__Group__1__Impl
	rule__DirectEnumLiteralsCollection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectEnumLiteralsCollection__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectEnumLiteralsCollectionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getDirectEnumLiteralsCollectionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DirectEnumLiteralsCollection__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectEnumLiteralsCollection__Group__2__Impl
	rule__DirectEnumLiteralsCollection__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectEnumLiteralsCollection__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectEnumLiteralsCollectionAccess().getLiteralsAssignment_2()); }
(rule__DirectEnumLiteralsCollection__LiteralsAssignment_2)*
{ after(grammarAccess.getDirectEnumLiteralsCollectionAccess().getLiteralsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DirectEnumLiteralsCollection__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DirectEnumLiteralsCollection__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DirectEnumLiteralsCollection__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectEnumLiteralsCollectionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getDirectEnumLiteralsCollectionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__DynamicScreen__LabelAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicScreenAccess().getLabelLabelParserRuleCall_1_0()); }
	ruleLabel{ after(grammarAccess.getDynamicScreenAccess().getLabelLabelParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicScreen__ImportURIAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicScreenAccess().getImportURISTRINGTerminalRuleCall_4_0()); }
	RULE_STRING{ after(grammarAccess.getDynamicScreenAccess().getImportURISTRINGTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicScreen__ViewClassAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicScreenAccess().getViewClassEntityCrossReference_7_0()); }
(
{ before(grammarAccess.getDynamicScreenAccess().getViewClassEntityIDTerminalRuleCall_7_0_1()); }
	RULE_ID{ after(grammarAccess.getDynamicScreenAccess().getViewClassEntityIDTerminalRuleCall_7_0_1()); }
)
{ after(grammarAccess.getDynamicScreenAccess().getViewClassEntityCrossReference_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicScreen__DeclarationsAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicScreenAccess().getDeclarationsDeclarationParserRuleCall_8_0()); }
	ruleDeclaration{ after(grammarAccess.getDynamicScreenAccess().getDeclarationsDeclarationParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicScreen__GroupsAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicScreenAccess().getGroupsFieldGroupParserRuleCall_9_0()); }
	ruleFieldGroup{ after(grammarAccess.getDynamicScreenAccess().getGroupsFieldGroupParserRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Label__EnAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getEnSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getLabelAccess().getEnSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Label__NlAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabelAccess().getNlSTRINGTerminalRuleCall_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getLabelAccess().getNlSTRINGTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PathTail__FieldAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathTailAccess().getFieldFieldCrossReference_1_0()); }
(
{ before(grammarAccess.getPathTailAccess().getFieldFieldIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getPathTailAccess().getFieldFieldIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getPathTailAccess().getFieldFieldCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PathTail__AsEntityAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathTailAccess().getAsEntityEntityCrossReference_2_1_0()); }
(
{ before(grammarAccess.getPathTailAccess().getAsEntityEntityIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getPathTailAccess().getAsEntityEntityIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getPathTailAccess().getAsEntityEntityCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PathTail__TailAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPathTailAccess().getTailPathTailParserRuleCall_3_0()); }
	rulePathTail{ after(grammarAccess.getPathTailAccess().getTailPathTailParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalVariable__PathAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalVariableAccess().getPathPathTailParserRuleCall_1_0()); }
	rulePathTail{ after(grammarAccess.getExternalVariableAccess().getPathPathTailParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalVariable__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalVariableAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getExternalVariableAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumList__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumListAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEnumListAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumList__LiteralsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumListAccess().getLiteralsEnumLiteralCrossReference_4_0()); }
(
{ before(grammarAccess.getEnumListAccess().getLiteralsEnumLiteralIDTerminalRuleCall_4_0_1()); }
	RULE_ID{ after(grammarAccess.getEnumListAccess().getLiteralsEnumLiteralIDTerminalRuleCall_4_0_1()); }
)
{ after(grammarAccess.getEnumListAccess().getLiteralsEnumLiteralCrossReference_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumList__EnumAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumListAccess().getEnumEnumerationCrossReference_7_0()); }
(
{ before(grammarAccess.getEnumListAccess().getEnumEnumerationIDTerminalRuleCall_7_0_1()); }
	RULE_ID{ after(grammarAccess.getEnumListAccess().getEnumEnumerationIDTerminalRuleCall_7_0_1()); }
)
{ after(grammarAccess.getEnumListAccess().getEnumEnumerationCrossReference_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataStore__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataStoreAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDataStoreAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataStore__ClassAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataStoreAccess().getClassEntityCrossReference_3_0()); }
(
{ before(grammarAccess.getDataStoreAccess().getClassEntityIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getDataStoreAccess().getClassEntityIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getDataStoreAccess().getClassEntityCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataStore__MultiAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataStoreAccess().getMultiIsMultiValuedKeyword_4_0()); }
(
{ before(grammarAccess.getDataStoreAccess().getMultiIsMultiValuedKeyword_4_0()); }

	'is-multi-valued' 

{ after(grammarAccess.getDataStoreAccess().getMultiIsMultiValuedKeyword_4_0()); }
)

{ after(grammarAccess.getDataStoreAccess().getMultiIsMultiValuedKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__LabelAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getLabelLabelParserRuleCall_1_0()); }
	ruleLabel{ after(grammarAccess.getFieldAccess().getLabelLabelParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__PathAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getPathPathTailParserRuleCall_2_0()); }
	rulePathTail{ after(grammarAccess.getFieldAccess().getPathPathTailParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__AttributesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getAttributesAttributeParserRuleCall_3_0()); }
	ruleAttribute{ after(grammarAccess.getFieldAccess().getAttributesAttributeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldGroup__LabelAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldGroupAccess().getLabelLabelParserRuleCall_1_0()); }
	ruleLabel{ after(grammarAccess.getFieldGroupAccess().getLabelLabelParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldGroup__WithAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldGroupAccess().getWithPathTailParserRuleCall_2_1_0()); }
	rulePathTail{ after(grammarAccess.getFieldGroupAccess().getWithPathTailParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldGroup__ElementsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldGroupAccess().getElementsGroupElementParserRuleCall_4_0()); }
	ruleGroupElement{ after(grammarAccess.getFieldGroupAccess().getElementsGroupElementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldGroup__AttributesAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldGroupAccess().getAttributesAttributeParserRuleCall_6_0()); }
	ruleAttribute{ after(grammarAccess.getFieldGroupAccess().getAttributesAttributeParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalAttribute__ClassExprAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalAttributeAccess().getClassExprAttributeClassExpressionParserRuleCall_0_0()); }
	ruleAttributeClassExpression{ after(grammarAccess.getNormalAttributeAccess().getClassExprAttributeClassExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalAttribute__ClauseAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalAttributeAccess().getClauseBExpressionParserRuleCall_1_1_0()); }
	ruleBExpression{ after(grammarAccess.getNormalAttributeAccess().getClauseBExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeClassExpression__ClassesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeClassExpressionAccess().getClassesAttributeClassEnumRuleCall_0_0()); }
	ruleAttributeClass{ after(grammarAccess.getAttributeClassExpressionAccess().getClassesAttributeClassEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeClassExpression__ClassesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeClassExpressionAccess().getClassesAttributeClassEnumRuleCall_1_1_0()); }
	ruleAttributeClass{ after(grammarAccess.getAttributeClassExpressionAccess().getClassesAttributeClassEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionAttribute__LiteralsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionAttributeAccess().getLiteralsEnumLiteralsCollectionParserRuleCall_1_0()); }
	ruleEnumLiteralsCollection{ after(grammarAccess.getRestrictionAttributeAccess().getLiteralsEnumLiteralsCollectionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionAttribute__ClauseAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionAttributeAccess().getClauseBExpressionParserRuleCall_3_0()); }
	ruleBExpression{ after(grammarAccess.getRestrictionAttributeAccess().getClauseBExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionGroupAttribute__RulesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionGroupAttributeAccess().getRulesRestrictionRuleParserRuleCall_3_0()); }
	ruleRestrictionRule{ after(grammarAccess.getRestrictionGroupAttributeAccess().getRulesRestrictionRuleParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionRule__LiteralsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionRuleAccess().getLiteralsEnumLiteralsCollectionParserRuleCall_0_0()); }
	ruleEnumLiteralsCollection{ after(grammarAccess.getRestrictionRuleAccess().getLiteralsEnumLiteralsCollectionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RestrictionRule__ClauseAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRestrictionRuleAccess().getClauseBExpressionParserRuleCall_2_0()); }
	ruleBExpression{ after(grammarAccess.getRestrictionRuleAccess().getClauseBExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__RefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getRefReferenceTargetCrossReference_0()); }
(
{ before(grammarAccess.getReferenceAccess().getRefReferenceTargetIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getReferenceAccess().getRefReferenceTargetIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getReferenceAccess().getRefReferenceTargetCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BOrExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOrExpressionAccess().getRightBAndExpressionParserRuleCall_1_2_0()); }
	ruleBAndExpression{ after(grammarAccess.getBOrExpressionAccess().getRightBAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BAndExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBAndExpressionAccess().getRightNegationExpressionParserRuleCall_1_2_0()); }
	ruleNegationExpression{ after(grammarAccess.getBAndExpressionAccess().getRightNegationExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NegationExpression__ExprAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationExpressionAccess().getExprNegationExpressionParserRuleCall_1_2_0()); }
	ruleNegationExpression{ after(grammarAccess.getNegationExpressionAccess().getExprNegationExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BComparison__RefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBComparisonAccess().getRefReferenceParserRuleCall_1_0()); }
	ruleReference{ after(grammarAccess.getBComparisonAccess().getRefReferenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BComparison__BLiteralAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBComparisonAccess().getBLiteralBLiteralEnumRuleCall_2_1_0()); }
	ruleBLiteral{ after(grammarAccess.getBComparisonAccess().getBLiteralBLiteralEnumRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleEnumComparison__RefAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleEnumComparisonAccess().getRefReferenceParserRuleCall_0_0()); }
	ruleReference{ after(grammarAccess.getSingleEnumComparisonAccess().getRefReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleEnumComparison__ELiteralAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleEnumComparisonAccess().getELiteralEnumLiteralCrossReference_2_0()); }
(
{ before(grammarAccess.getSingleEnumComparisonAccess().getELiteralEnumLiteralIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getSingleEnumComparisonAccess().getELiteralEnumLiteralIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getSingleEnumComparisonAccess().getELiteralEnumLiteralCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiEnumComparison__RefAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiEnumComparisonAccess().getRefReferenceParserRuleCall_0_0()); }
	ruleReference{ after(grammarAccess.getMultiEnumComparisonAccess().getRefReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiEnumComparison__MembershipAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiEnumComparisonAccess().getMembershipEnumMembershipEnumRuleCall_1_0()); }
	ruleEnumMembership{ after(grammarAccess.getMultiEnumComparisonAccess().getMembershipEnumMembershipEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiEnumComparison__ELiteralsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiEnumComparisonAccess().getELiteralsEnumLiteralsCollectionParserRuleCall_2_0()); }
	ruleEnumLiteralsCollection{ after(grammarAccess.getMultiEnumComparisonAccess().getELiteralsEnumLiteralsCollectionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValueComparison__RefAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueComparisonAccess().getRefReferenceParserRuleCall_0_0()); }
	ruleReference{ after(grammarAccess.getStringValueComparisonAccess().getRefReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValueComparison__TargetValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueComparisonAccess().getTargetValueSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getStringValueComparisonAccess().getTargetValueSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PresenceCheck__RefAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPresenceCheckAccess().getRefReferenceParserRuleCall_0_0()); }
	ruleReference{ after(grammarAccess.getPresenceCheckAccess().getRefReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DirectEnumLiteralsCollection__LiteralsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDirectEnumLiteralsCollectionAccess().getLiteralsEnumLiteralCrossReference_2_0()); }
(
{ before(grammarAccess.getDirectEnumLiteralsCollectionAccess().getLiteralsEnumLiteralIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getDirectEnumLiteralsCollectionAccess().getLiteralsEnumLiteralIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getDirectEnumLiteralsCollectionAccess().getLiteralsEnumLiteralCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumListReference__RefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumListReferenceAccess().getRefEnumListCrossReference_0()); }
(
{ before(grammarAccess.getEnumListReferenceAccess().getRefEnumListIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getEnumListReferenceAccess().getRefEnumListIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getEnumListReferenceAccess().getRefEnumListCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


