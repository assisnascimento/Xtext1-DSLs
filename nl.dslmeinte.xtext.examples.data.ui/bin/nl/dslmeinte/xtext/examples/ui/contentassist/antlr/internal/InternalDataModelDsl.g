/*
* generated by Xtext
*/
grammar InternalDataModelDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package nl.dslmeinte.xtext.examples.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package nl.dslmeinte.xtext.examples.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import nl.dslmeinte.xtext.examples.services.DataModelDslGrammarAccess;

}

@parser::members {
 
 	private DataModelDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DataModelDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDataModel
entryRuleDataModel 
:
{ before(grammarAccess.getDataModelRule()); }
	 ruleDataModel
{ after(grammarAccess.getDataModelRule()); } 
	 EOF 
;

// Rule DataModel
ruleDataModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataModelAccess().getGroup()); }
(rule__DataModel__Group__0)
{ after(grammarAccess.getDataModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleCompoundType
entryRuleCompoundType 
:
{ before(grammarAccess.getCompoundTypeRule()); }
	 ruleCompoundType
{ after(grammarAccess.getCompoundTypeRule()); } 
	 EOF 
;

// Rule CompoundType
ruleCompoundType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompoundTypeAccess().getAlternatives()); }
(rule__CompoundType__Alternatives)
{ after(grammarAccess.getCompoundTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveTypes
entryRulePrimitiveTypes 
:
{ before(grammarAccess.getPrimitiveTypesRule()); }
	 rulePrimitiveTypes
{ after(grammarAccess.getPrimitiveTypesRule()); } 
	 EOF 
;

// Rule PrimitiveTypes
rulePrimitiveTypes
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveTypesAccess().getGroup()); }
(rule__PrimitiveTypes__Group__0)
{ after(grammarAccess.getPrimitiveTypesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveType
entryRulePrimitiveType 
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getGroup()); }
(rule__PrimitiveType__Group__0)
{ after(grammarAccess.getPrimitiveTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataType
entryRuleDataType 
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataTypeAccess().getGroup()); }
(rule__DataType__Group__0)
{ after(grammarAccess.getDataTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleField
entryRuleField 
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldAccess().getGroup()); }
(rule__Field__Group__0)
{ after(grammarAccess.getFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumeration
entryRuleEnumeration 
:
{ before(grammarAccess.getEnumerationRule()); }
	 ruleEnumeration
{ after(grammarAccess.getEnumerationRule()); } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationAccess().getGroup()); }
(rule__Enumeration__Group__0)
{ after(grammarAccess.getEnumerationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumLiteral
entryRuleEnumLiteral 
:
{ before(grammarAccess.getEnumLiteralRule()); }
	 ruleEnumLiteral
{ after(grammarAccess.getEnumLiteralRule()); } 
	 EOF 
;

// Rule EnumLiteral
ruleEnumLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumLiteralAccess().getNameAssignment()); }
(rule__EnumLiteral__NameAssignment)
{ after(grammarAccess.getEnumLiteralAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntity
entryRuleEntity 
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntityAccess().getGroup()); }
(rule__Entity__Group__0)
{ after(grammarAccess.getEntityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstraint
entryRuleConstraint 
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstraintAccess().getGroup()); }
(rule__Constraint__Group__0)
{ after(grammarAccess.getConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUsage
entryRuleUsage 
:
{ before(grammarAccess.getUsageRule()); }
	 ruleUsage
{ after(grammarAccess.getUsageRule()); } 
	 EOF 
;

// Rule Usage
ruleUsage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUsageAccess().getFieldAssignment()); }
(rule__Usage__FieldAssignment)
{ after(grammarAccess.getUsageAccess().getFieldAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgument
entryRuleArgument 
:
{ before(grammarAccess.getArgumentRule()); }
	 ruleArgument
{ after(grammarAccess.getArgumentRule()); } 
	 EOF 
;

// Rule Argument
ruleArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentAccess().getGroup()); }
(rule__Argument__Group__0)
{ after(grammarAccess.getArgumentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}








// Rule MetaPrimitiveType
ruleMetaPrimitiveType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaPrimitiveTypeAccess().getAlternatives()); }
(rule__MetaPrimitiveType__Alternatives)
{ after(grammarAccess.getMetaPrimitiveTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Modifier
ruleModifier
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifierAccess().getAlternatives()); }
(rule__Modifier__Alternatives)
{ after(grammarAccess.getModifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__CompoundType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundTypeAccess().getDataTypeParserRuleCall_0()); }
	ruleDataType
{ after(grammarAccess.getCompoundTypeAccess().getDataTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCompoundTypeAccess().getEnumerationParserRuleCall_1()); }
	ruleEnumeration
{ after(grammarAccess.getCompoundTypeAccess().getEnumerationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCompoundTypeAccess().getEntityParserRuleCall_2()); }
	ruleEntity
{ after(grammarAccess.getCompoundTypeAccess().getEntityParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getGroup_1_0()); }
(rule__PrimitiveType__Group_1_0__0)
{ after(grammarAccess.getPrimitiveTypeAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getGroup_1_1()); }
(rule__PrimitiveType__Group_1_1__0)?
{ after(grammarAccess.getPrimitiveTypeAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__MetaPrimitiveType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMetaPrimitiveTypeAccess().getStringEnumLiteralDeclaration_0()); }
(	'string' 
)
{ after(grammarAccess.getMetaPrimitiveTypeAccess().getStringEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMetaPrimitiveTypeAccess().getIntEnumLiteralDeclaration_1()); }
(	'int' 
)
{ after(grammarAccess.getMetaPrimitiveTypeAccess().getIntEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMetaPrimitiveTypeAccess().getNumberEnumLiteralDeclaration_2()); }
(	'number' 
)
{ after(grammarAccess.getMetaPrimitiveTypeAccess().getNumberEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getMetaPrimitiveTypeAccess().getBooleanEnumLiteralDeclaration_3()); }
(	'boolean' 
)
{ after(grammarAccess.getMetaPrimitiveTypeAccess().getBooleanEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifierAccess().getOptionalEnumLiteralDeclaration_0()); }
(	'optional' 
)
{ after(grammarAccess.getModifierAccess().getOptionalEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getModifierAccess().getRequiredEnumLiteralDeclaration_1()); }
(	'required' 
)
{ after(grammarAccess.getModifierAccess().getRequiredEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getModifierAccess().getRepeatedEnumLiteralDeclaration_2()); }
(	'repeated' 
)
{ after(grammarAccess.getModifierAccess().getRepeatedEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DataModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataModel__Group__0__Impl
	rule__DataModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataModelAccess().getPrimitivesAssignment_0()); }
(rule__DataModel__PrimitivesAssignment_0)
{ after(grammarAccess.getDataModelAccess().getPrimitivesAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataModel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataModelAccess().getCompoundTypesAssignment_1()); }
(rule__DataModel__CompoundTypesAssignment_1)*
{ after(grammarAccess.getDataModelAccess().getCompoundTypesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimitiveTypes__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveTypes__Group__0__Impl
	rule__PrimitiveTypes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveTypes__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypesAccess().getPrimitiveTypesAction_0()); }
(

)
{ after(grammarAccess.getPrimitiveTypesAccess().getPrimitiveTypesAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveTypes__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveTypes__Group__1__Impl
	rule__PrimitiveTypes__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveTypes__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypesAccess().getPrimitiveTypesKeyword_1()); }

	'primitive-types' 

{ after(grammarAccess.getPrimitiveTypesAccess().getPrimitiveTypesKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveTypes__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveTypes__Group__2__Impl
	rule__PrimitiveTypes__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveTypes__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypesAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getPrimitiveTypesAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveTypes__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveTypes__Group__3__Impl
	rule__PrimitiveTypes__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveTypes__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypesAccess().getPrimitiveTypesAssignment_3()); }
(rule__PrimitiveTypes__PrimitiveTypesAssignment_3)*
{ after(grammarAccess.getPrimitiveTypesAccess().getPrimitiveTypesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveTypes__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveTypes__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveTypes__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypesAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getPrimitiveTypesAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__PrimitiveType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group__0__Impl
	rule__PrimitiveType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getNameAssignment_0()); }
(rule__PrimitiveType__NameAssignment_0)
{ after(grammarAccess.getPrimitiveTypeAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives_1()); }
(rule__PrimitiveType__Alternatives_1)
{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimitiveType__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_1_0__0__Impl
	rule__PrimitiveType__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getExtendsKeyword_1_0_0()); }

	'extends' 

{ after(grammarAccess.getPrimitiveTypeAccess().getExtendsKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveType__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getSuperTypeAssignment_1_0_1()); }
(rule__PrimitiveType__SuperTypeAssignment_1_0_1)
{ after(grammarAccess.getPrimitiveTypeAccess().getSuperTypeAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimitiveType__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_1_1__0__Impl
	rule__PrimitiveType__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getHyphenMinusGreaterThanSignKeyword_1_1_0()); }

	'->' 

{ after(grammarAccess.getPrimitiveTypeAccess().getHyphenMinusGreaterThanSignKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveType__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimitiveType__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getRealizationTypeAssignment_1_1_1()); }
(rule__PrimitiveType__RealizationTypeAssignment_1_1_1)
{ after(grammarAccess.getPrimitiveTypeAccess().getRealizationTypeAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group__0__Impl
	rule__DataType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0()); }

	'datatype' 

{ after(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group__1__Impl
	rule__DataType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getNameAssignment_1()); }
(rule__DataType__NameAssignment_1)
{ after(grammarAccess.getDataTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group__2__Impl
	rule__DataType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getDataTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group__3__Impl
	rule__DataType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getFieldsAssignment_3()); }
(rule__DataType__FieldsAssignment_3)*
{ after(grammarAccess.getDataTypeAccess().getFieldsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group__4__Impl
	rule__DataType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getConstraintsAssignment_4()); }
(rule__DataType__ConstraintsAssignment_4)*
{ after(grammarAccess.getDataTypeAccess().getConstraintsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group__5__Impl
	rule__DataType__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getFunctionsAssignment_5()); }
(rule__DataType__FunctionsAssignment_5)*
{ after(grammarAccess.getDataTypeAccess().getFunctionsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataType__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getDataTypeAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Field__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__0__Impl
	rule__Field__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getModifierAssignment_0()); }
(rule__Field__ModifierAssignment_0)?
{ after(grammarAccess.getFieldAccess().getModifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__1__Impl
	rule__Field__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameAssignment_1()); }
(rule__Field__NameAssignment_1)
{ after(grammarAccess.getFieldAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__2__Impl
	rule__Field__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getFieldAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getTypeAssignment_3()); }
(rule__Field__TypeAssignment_3)
{ after(grammarAccess.getFieldAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Enumeration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__0__Impl
	rule__Enumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumerationAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__1__Impl
	rule__Enumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getNameAssignment_1()); }
(rule__Enumeration__NameAssignment_1)
{ after(grammarAccess.getEnumerationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__2__Impl
	rule__Enumeration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__3__Impl
	rule__Enumeration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getLiteralsAssignment_3()); }
(rule__Enumeration__LiteralsAssignment_3)*
{ after(grammarAccess.getEnumerationAccess().getLiteralsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Entity__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__0__Impl
	rule__Entity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getUnorderedGroup_0()); }
(rule__Entity__UnorderedGroup_0)
{ after(grammarAccess.getEntityAccess().getUnorderedGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__1__Impl
	rule__Entity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getEntityKeyword_1()); }

	'entity' 

{ after(grammarAccess.getEntityAccess().getEntityKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__2__Impl
	rule__Entity__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getNameAssignment_2()); }
(rule__Entity__NameAssignment_2)
{ after(grammarAccess.getEntityAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__3__Impl
	rule__Entity__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getGroup_3()); }
(rule__Entity__Group_3__0)?
{ after(grammarAccess.getEntityAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__4__Impl
	rule__Entity__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_4()); }

	'{' 

{ after(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__5__Impl
	rule__Entity__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getFieldsAssignment_5()); }
(rule__Entity__FieldsAssignment_5)*
{ after(grammarAccess.getEntityAccess().getFieldsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__6__Impl
	rule__Entity__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getConstraintsAssignment_6()); }
(rule__Entity__ConstraintsAssignment_6)*
{ after(grammarAccess.getEntityAccess().getConstraintsAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__7__Impl
	rule__Entity__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getFunctionsAssignment_7()); }
(rule__Entity__FunctionsAssignment_7)*
{ after(grammarAccess.getEntityAccess().getFunctionsAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_8()); }

	'}' 

{ after(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Entity__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group_3__0__Impl
	rule__Entity__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getExtendsKeyword_3_0()); }

	'extends' 

{ after(grammarAccess.getEntityAccess().getExtendsKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getSuperTypeAssignment_3_1()); }
(rule__Entity__SuperTypeAssignment_3_1)
{ after(grammarAccess.getEntityAccess().getSuperTypeAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Constraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getConstraintKeyword_0()); }

	'constraint' 

{ after(grammarAccess.getConstraintAccess().getConstraintKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__1__Impl
	rule__Constraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getNameAssignment_1()); }
(rule__Constraint__NameAssignment_1)
{ after(grammarAccess.getConstraintAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__2__Impl
	rule__Constraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getUsesKeyword_2()); }

	'uses' 

{ after(grammarAccess.getConstraintAccess().getUsesKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getConstraintAccess().getSlotsAssignment_3()); }
(rule__Constraint__SlotsAssignment_3)
{ after(grammarAccess.getConstraintAccess().getSlotsAssignment_3()); }
)
(
{ before(grammarAccess.getConstraintAccess().getSlotsAssignment_3()); }
(rule__Constraint__SlotsAssignment_3)*
{ after(grammarAccess.getConstraintAccess().getSlotsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }

	'function' 

{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
(rule__Function__NameAssignment_1)
{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getFunctionAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getReturnTypeAssignment_3()); }
(rule__Function__ReturnTypeAssignment_3)
{ after(grammarAccess.getFunctionAccess().getReturnTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_4()); }
(rule__Function__Group_4__0)?
{ after(grammarAccess.getFunctionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Function__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_4__0__Impl
	rule__Function__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_4_0()); }

	'(' 

{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_4__1__Impl
	rule__Function__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFunctionAccess().getArgumentsAssignment_4_1()); }
(rule__Function__ArgumentsAssignment_4_1)
{ after(grammarAccess.getFunctionAccess().getArgumentsAssignment_4_1()); }
)
(
{ before(grammarAccess.getFunctionAccess().getArgumentsAssignment_4_1()); }
(rule__Function__ArgumentsAssignment_4_1)*
{ after(grammarAccess.getFunctionAccess().getArgumentsAssignment_4_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4_2()); }

	')' 

{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Argument__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group__0__Impl
	rule__Argument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getTypeAssignment_0()); }
(rule__Argument__TypeAssignment_0)
{ after(grammarAccess.getArgumentAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Argument__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Argument__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getNameAssignment_1()); }
(rule__Argument__NameAssignment_1)
{ after(grammarAccess.getArgumentAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Entity__UnorderedGroup_0
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getEntityAccess().getUnorderedGroup_0());
    }
:
	rule__Entity__UnorderedGroup_0__0
	?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getEntityAccess().getUnorderedGroup_0());
	restoreStackSize(stackSize);
}


rule__Entity__UnorderedGroup_0__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEntityAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEntityAccess().getUnorderedGroup_0(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getEntityAccess().getTransientAssignment_0_0()); }
						(rule__Entity__TransientAssignment_0_0)
						{ after(grammarAccess.getEntityAccess().getTransientAssignment_0_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEntityAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEntityAccess().getUnorderedGroup_0(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getEntityAccess().getAbstractAssignment_0_1()); }
						(rule__Entity__AbstractAssignment_0_1)
						{ after(grammarAccess.getEntityAccess().getAbstractAssignment_0_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEntityAccess().getUnorderedGroup_0());
	restoreStackSize(stackSize);
}


rule__Entity__UnorderedGroup_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__UnorderedGroup_0__Impl
	rule__Entity__UnorderedGroup_0__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__UnorderedGroup_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entity__UnorderedGroup_0__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__DataModel__PrimitivesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataModelAccess().getPrimitivesPrimitiveTypesParserRuleCall_0_0()); }
	rulePrimitiveTypes{ after(grammarAccess.getDataModelAccess().getPrimitivesPrimitiveTypesParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataModel__CompoundTypesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataModelAccess().getCompoundTypesCompoundTypeParserRuleCall_1_0()); }
	ruleCompoundType{ after(grammarAccess.getDataModelAccess().getCompoundTypesCompoundTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveTypes__PrimitiveTypesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypesAccess().getPrimitiveTypesPrimitiveTypeParserRuleCall_3_0()); }
	rulePrimitiveType{ after(grammarAccess.getPrimitiveTypesAccess().getPrimitiveTypesPrimitiveTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getPrimitiveTypeAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__SuperTypeAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getSuperTypePrimitiveTypeCrossReference_1_0_1_0()); }
(
{ before(grammarAccess.getPrimitiveTypeAccess().getSuperTypePrimitiveTypeIDTerminalRuleCall_1_0_1_0_1()); }
	RULE_ID{ after(grammarAccess.getPrimitiveTypeAccess().getSuperTypePrimitiveTypeIDTerminalRuleCall_1_0_1_0_1()); }
)
{ after(grammarAccess.getPrimitiveTypeAccess().getSuperTypePrimitiveTypeCrossReference_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__RealizationTypeAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getRealizationTypeMetaPrimitiveTypeEnumRuleCall_1_1_1_0()); }
	ruleMetaPrimitiveType{ after(grammarAccess.getPrimitiveTypeAccess().getRealizationTypeMetaPrimitiveTypeEnumRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__FieldsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getFieldsFieldParserRuleCall_3_0()); }
	ruleField{ after(grammarAccess.getDataTypeAccess().getFieldsFieldParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__ConstraintsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getConstraintsConstraintParserRuleCall_4_0()); }
	ruleConstraint{ after(grammarAccess.getDataTypeAccess().getConstraintsConstraintParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__FunctionsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getFunctionsFunctionParserRuleCall_5_0()); }
	ruleFunction{ after(grammarAccess.getDataTypeAccess().getFunctionsFunctionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__ModifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getModifierModifierEnumRuleCall_0_0()); }
	ruleModifier{ after(grammarAccess.getFieldAccess().getModifierModifierEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getTypeTypeCrossReference_3_0()); }
(
{ before(grammarAccess.getFieldAccess().getTypeTypeIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getFieldAccess().getTypeTypeIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getFieldAccess().getTypeTypeCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEnumerationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__LiteralsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getLiteralsEnumLiteralParserRuleCall_3_0()); }
	ruleEnumLiteral{ after(grammarAccess.getEnumerationAccess().getLiteralsEnumLiteralParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumLiteral__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumLiteralAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getEnumLiteralAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__TransientAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getTransientTransientKeyword_0_0_0()); }
(
{ before(grammarAccess.getEntityAccess().getTransientTransientKeyword_0_0_0()); }

	'transient' 

{ after(grammarAccess.getEntityAccess().getTransientTransientKeyword_0_0_0()); }
)

{ after(grammarAccess.getEntityAccess().getTransientTransientKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__AbstractAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getAbstractAbstractKeyword_0_1_0()); }
(
{ before(grammarAccess.getEntityAccess().getAbstractAbstractKeyword_0_1_0()); }

	'abstract' 

{ after(grammarAccess.getEntityAccess().getAbstractAbstractKeyword_0_1_0()); }
)

{ after(grammarAccess.getEntityAccess().getAbstractAbstractKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__SuperTypeAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getSuperTypeEntityCrossReference_3_1_0()); }
(
{ before(grammarAccess.getEntityAccess().getSuperTypeEntityIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getEntityAccess().getSuperTypeEntityIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getEntityAccess().getSuperTypeEntityCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__FieldsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getFieldsFieldParserRuleCall_5_0()); }
	ruleField{ after(grammarAccess.getEntityAccess().getFieldsFieldParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__ConstraintsAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getConstraintsConstraintParserRuleCall_6_0()); }
	ruleConstraint{ after(grammarAccess.getEntityAccess().getConstraintsConstraintParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__FunctionsAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getFunctionsFunctionParserRuleCall_7_0()); }
	ruleFunction{ after(grammarAccess.getEntityAccess().getFunctionsFunctionParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__SlotsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getSlotsUsageParserRuleCall_3_0()); }
	ruleUsage{ after(grammarAccess.getConstraintAccess().getSlotsUsageParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Usage__FieldAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsageAccess().getFieldFieldCrossReference_0()); }
(
{ before(grammarAccess.getUsageAccess().getFieldFieldIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getUsageAccess().getFieldFieldIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getUsageAccess().getFieldFieldCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ReturnTypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getReturnTypeTypeCrossReference_3_0()); }
(
{ before(grammarAccess.getFunctionAccess().getReturnTypeTypeIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getReturnTypeTypeIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getFunctionAccess().getReturnTypeTypeCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ArgumentsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getArgumentsArgumentParserRuleCall_4_1_0()); }
	ruleArgument{ after(grammarAccess.getFunctionAccess().getArgumentsArgumentParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getTypeTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getArgumentAccess().getTypeTypeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getArgumentAccess().getTypeTypeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getArgumentAccess().getTypeTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


