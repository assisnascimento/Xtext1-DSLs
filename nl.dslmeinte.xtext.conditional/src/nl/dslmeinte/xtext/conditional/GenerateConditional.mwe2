module nl.dslmeinte.xtext.conditional.Conditional

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/nl/dslmeinte/xtext/conditional/Conditional.xtext"
var file.extensions = "$conditional$"	// matches nothing?...
var projectName = "nl.dslmeinte.xtext.conditional"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
		platformUri = "${runtimeProject}/.."
	}

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen/nl"    // do not wipe out directory itself to preserve Git-related files
    }

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		mergeManifest = false	// avoids that MWE2 launch fails (manifest for this project is already checked in correctly)
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// very minimal generation!:

			fragment = grammarAccess.GrammarAccessFragment {}
			fragment = ecore.EcoreGeneratorFragment {}
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
			fragment = parser.antlr.XtextAntlrGeneratorFragment {}
			fragment = exporting.SimpleNamesFragment {}
			fragment = scoping.ImportNamespacesScopingFragment {}
//			fragment = resourceFactory.ResourceFactoryFragment { fileExtensions = file.extensions }
//			fragment = validation.JavaValidatorFragment {
//				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
//				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
//			}

//			fragment = builder.BuilderIntegrationFragment {}
//			fragment = formatting.FormatterFragment {}
//			fragment = labeling.LabelProviderFragment {}
//			fragment = outline.TransformerFragment {}
//			fragment = outline.OutlineNodeAdapterFactoryFragment {}
//			fragment = outline.QuickOutlineFragment {}
//			fragment = quickfix.QuickfixProviderFragment {}
//			fragment = contentAssist.JavaBasedContentAssistFragment {}
//			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}
		}
	}
}
