/*
* generated by Xtext
*/
grammar InternalDataModelDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package nl.dslmeinte.xtext.examples.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.dslmeinte.xtext.examples.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import nl.dslmeinte.xtext.examples.services.DataModelDslGrammarAccess;

}

@parser::members {

 	private DataModelDslGrammarAccess grammarAccess;
 	
    public InternalDataModelDslParser(TokenStream input, IAstFactory factory, DataModelDslGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("nl/dslmeinte/xtext/examples/parser/antlr/internal/InternalDataModelDsl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DataModel";	
   	}
   	
   	@Override
   	protected DataModelDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDataModel
entryRuleDataModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataModelRule(), currentNode); }
	 iv_ruleDataModel=ruleDataModel 
	 { $current=$iv_ruleDataModel.current; } 
	 EOF 
;

// Rule DataModel
ruleDataModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataModelAccess().getPrimitivesPrimitiveTypesParserRuleCall_0_0(), currentNode); 
	    }
		lv_primitives_0_0=rulePrimitiveTypes		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"primitives",
	        		lv_primitives_0_0, 
	        		"PrimitiveTypes", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataModelAccess().getCompoundTypesCompoundTypeParserRuleCall_1_0(), currentNode); 
	    }
		lv_compoundTypes_1_0=ruleCompoundType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"compoundTypes",
	        		lv_compoundTypes_1_0, 
	        		"CompoundType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;







// Entry rule entryRuleCompoundType
entryRuleCompoundType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompoundTypeRule(), currentNode); }
	 iv_ruleCompoundType=ruleCompoundType 
	 { $current=$iv_ruleCompoundType.current; } 
	 EOF 
;

// Rule CompoundType
ruleCompoundType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getCompoundTypeAccess().getDataTypeParserRuleCall_0(), currentNode); 
    }
    this_DataType_0=ruleDataType
    { 
        $current = $this_DataType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getCompoundTypeAccess().getEnumerationParserRuleCall_1(), currentNode); 
    }
    this_Enumeration_1=ruleEnumeration
    { 
        $current = $this_Enumeration_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getCompoundTypeAccess().getEntityParserRuleCall_2(), currentNode); 
    }
    this_Entity_2=ruleEntity
    { 
        $current = $this_Entity_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePrimitiveTypes
entryRulePrimitiveTypes returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveTypesRule(), currentNode); }
	 iv_rulePrimitiveTypes=rulePrimitiveTypes 
	 { $current=$iv_rulePrimitiveTypes.current; } 
	 EOF 
;

// Rule PrimitiveTypes
rulePrimitiveTypes returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getPrimitiveTypesAccess().getPrimitiveTypesAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPrimitiveTypesAccess().getPrimitiveTypesAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'primitive-types' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypesAccess().getPrimitiveTypesKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypesAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveTypesAccess().getPrimitiveTypesPrimitiveTypeParserRuleCall_3_0(), currentNode); 
	    }
		lv_primitiveTypes_3_0=rulePrimitiveType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"primitiveTypes",
	        		lv_primitiveTypes_3_0, 
	        		"PrimitiveType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypesAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveTypeRule(), currentNode); }
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current; } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPrimitiveTypeAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	'extends' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeAccess().getExtendsKeyword_1_0_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getPrimitiveTypeAccess().getSuperTypePrimitiveTypeCrossReference_1_0_1_0(), "superType"); 
	}

)
))
    |(	'->' 
    {
        createLeafNode(grammarAccess.getPrimitiveTypeAccess().getHyphenMinusGreaterThanSignKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveTypeAccess().getRealizationTypeMetaPrimitiveTypeEnumRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_realizationType_4_0=ruleMetaPrimitiveType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"realizationType",
	        		lv_realizationType_4_0, 
	        		"MetaPrimitiveType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?))
;





// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataTypeRule(), currentNode); }
	 iv_ruleDataType=ruleDataType 
	 { $current=$iv_ruleDataType.current; } 
	 EOF 
;

// Rule DataType
ruleDataType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'datatype' 
    {
        createLeafNode(grammarAccess.getDataTypeAccess().getDatatypeKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getDataTypeAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeAccess().getFieldsFieldParserRuleCall_3_0(), currentNode); 
	    }
		lv_fields_3_0=ruleField		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"fields",
	        		lv_fields_3_0, 
	        		"Field", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeAccess().getConstraintsConstraintParserRuleCall_4_0(), currentNode); 
	    }
		lv_constraints_4_0=ruleConstraint		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_4_0, 
	        		"Constraint", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDataTypeAccess().getFunctionsFunctionParserRuleCall_5_0(), currentNode); 
	    }
		lv_functions_5_0=ruleFunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"functions",
	        		lv_functions_5_0, 
	        		"Function", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getDataTypeAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFieldRule(), currentNode); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getModifierModifierEnumRuleCall_0_0(), currentNode); 
	    }
		lv_modifier_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"modifier",
	        		lv_modifier_0_0, 
	        		"Modifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getFieldAccess().getColonKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getFieldAccess().getTypeTypeCrossReference_3_0(), "type"); 
	}

)
))
;





// Entry rule entryRuleEnumeration
entryRuleEnumeration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumerationRule(), currentNode); }
	 iv_ruleEnumeration=ruleEnumeration 
	 { $current=$iv_ruleEnumeration.current; } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'enum' 
    {
        createLeafNode(grammarAccess.getEnumerationAccess().getEnumKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEnumerationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumerationAccess().getLiteralsEnumLiteralParserRuleCall_3_0(), currentNode); 
	    }
		lv_literals_3_0=ruleEnumLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"literals",
	        		lv_literals_3_0, 
	        		"EnumLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleEnumLiteral
entryRuleEnumLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumLiteralRule(), currentNode); }
	 iv_ruleEnumLiteral=ruleEnumLiteral 
	 { $current=$iv_ruleEnumLiteral.current; } 
	 EOF 
;

// Rule EnumLiteral
ruleEnumLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEnumLiteralAccess().getNameIDTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEntityRule(), currentNode); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getEntityAccess().getUnorderedGroup_0());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEntityAccess().getUnorderedGroup_0(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEntityAccess().getUnorderedGroup_0(), 0);
	 				}
					(
(
		lv_transient_1_0=	'transient' 
    {
        createLeafNode(grammarAccess.getEntityAccess().getTransientTransientKeyword_0_0_0(), "transient"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "transient", true, "transient", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEntityAccess().getUnorderedGroup_0());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEntityAccess().getUnorderedGroup_0(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEntityAccess().getUnorderedGroup_0(), 1);
	 				}
					(
(
		lv_abstract_2_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getEntityAccess().getAbstractAbstractKeyword_0_1_0(), "abstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "abstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEntityAccess().getUnorderedGroup_0());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getEntityAccess().getUnorderedGroup_0());
	}

)	'entity' 
    {
        createLeafNode(grammarAccess.getEntityAccess().getEntityKeyword_1(), null); 
    }
(
(
		lv_name_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'extends' 
    {
        createLeafNode(grammarAccess.getEntityAccess().getExtendsKeyword_3_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEntityAccess().getSuperTypeEntityCrossReference_3_1_0(), "superType"); 
	}

)
))?	'{' 
    {
        createLeafNode(grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEntityAccess().getFieldsFieldParserRuleCall_5_0(), currentNode); 
	    }
		lv_fields_8_0=ruleField		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"fields",
	        		lv_fields_8_0, 
	        		"Field", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEntityAccess().getConstraintsConstraintParserRuleCall_6_0(), currentNode); 
	    }
		lv_constraints_9_0=ruleConstraint		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constraints",
	        		lv_constraints_9_0, 
	        		"Constraint", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEntityAccess().getFunctionsFunctionParserRuleCall_7_0(), currentNode); 
	    }
		lv_functions_10_0=ruleFunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"functions",
	        		lv_functions_10_0, 
	        		"Function", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_8(), null); 
    }
)
;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstraintRule(), currentNode); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'constraint' 
    {
        createLeafNode(grammarAccess.getConstraintAccess().getConstraintKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'uses' 
    {
        createLeafNode(grammarAccess.getConstraintAccess().getUsesKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstraintAccess().getSlotsUsageParserRuleCall_3_0(), currentNode); 
	    }
		lv_slots_3_0=ruleUsage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstraintRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"slots",
	        		lv_slots_3_0, 
	        		"Usage", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleUsage
entryRuleUsage returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUsageRule(), currentNode); }
	 iv_ruleUsage=ruleUsage 
	 { $current=$iv_ruleUsage.current; } 
	 EOF 
;

// Rule Usage
ruleUsage returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getUsageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getUsageAccess().getFieldFieldCrossReference_0(), "field"); 
	}

)
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionRule(), currentNode); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'function' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getFunctionKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getColonKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getFunctionAccess().getReturnTypeTypeCrossReference_3_0(), "returnType"); 
	}

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getArgumentsArgumentParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_arguments_5_0=ruleArgument		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"arguments",
	        		lv_arguments_5_0, 
	        		"Argument", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+	')' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4_2(), null); 
    }
)?)
;





// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArgumentRule(), currentNode); }
	 iv_ruleArgument=ruleArgument 
	 { $current=$iv_ruleArgument.current; } 
	 EOF 
;

// Rule Argument
ruleArgument returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getArgumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getArgumentAccess().getTypeTypeCrossReference_0_0(), "type"); 
	}

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;









// Rule MetaPrimitiveType
ruleMetaPrimitiveType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'string' 
	{
        $current = grammarAccess.getMetaPrimitiveTypeAccess().getStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMetaPrimitiveTypeAccess().getStringEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'int' 
	{
        $current = grammarAccess.getMetaPrimitiveTypeAccess().getIntEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMetaPrimitiveTypeAccess().getIntEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'number' 
	{
        $current = grammarAccess.getMetaPrimitiveTypeAccess().getNumberEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMetaPrimitiveTypeAccess().getNumberEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'boolean' 
	{
        $current = grammarAccess.getMetaPrimitiveTypeAccess().getBooleanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getMetaPrimitiveTypeAccess().getBooleanEnumLiteralDeclaration_3(), null); 
    }
));



// Rule Modifier
ruleModifier returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'optional' 
	{
        $current = grammarAccess.getModifierAccess().getOptionalEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getModifierAccess().getOptionalEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'required' 
	{
        $current = grammarAccess.getModifierAccess().getRequiredEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getModifierAccess().getRequiredEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'repeated' 
	{
        $current = grammarAccess.getModifierAccess().getRepeatedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getModifierAccess().getRepeatedEnumLiteralDeclaration_2(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


