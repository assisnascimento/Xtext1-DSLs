/*
* generated by Xtext
*/
package nl.dslmeinte.xtext.examples.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import nl.dslmeinte.xtext.examples.services.XsdLanguageGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class XsdLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private XsdLanguageGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Schema_Group(this, this, 0, inst);
			case 1: return new Import_Group(this, this, 1, inst);
			case 2: return new TopLevelDefinition_Alternatives(this, this, 2, inst);
			case 3: return new TopLevelType_Alternatives(this, this, 3, inst);
			case 4: return new TopLevelElement_Group(this, this, 4, inst);
			case 5: return new TopLevelSimpleType_Group(this, this, 5, inst);
			case 6: return new Restriction_Group(this, this, 6, inst);
			case 7: return new Facet_Alternatives(this, this, 7, inst);
			case 8: return new EnumerationFacet_Group(this, this, 8, inst);
			case 9: return new EnumerationLiteral_Group(this, this, 9, inst);
			case 10: return new MaxLengthFacet_Group(this, this, 10, inst);
			case 11: return new PatternFacet_Group(this, this, 11, inst);
			case 12: return new RangeFacet_Group(this, this, 12, inst);
			case 13: return new LengthFacet_Group(this, this, 13, inst);
			case 14: return new Documentation_Group(this, this, 14, inst);
			case 15: return new TopLevelComplexType_Group(this, this, 15, inst);
			case 16: return new Property_Alternatives(this, this, 16, inst);
			case 17: return new Element_Group(this, this, 17, inst);
			case 18: return new Attribute_Group(this, this, 18, inst);
			case 19: return new Multiplicity_Group(this, this, 19, inst);
			case 20: return new NamedTypeReference_Alternatives(this, this, 20, inst);
			case 21: return new NonComplexTypeReference_Alternatives(this, this, 21, inst);
			case 22: return new BuiltinTypeReference_BuiltinAssignment(this, this, 22, inst);
			case 23: return new TopLevelTypeReference_Alternatives(this, this, 23, inst);
			case 24: return new TopLevelComplexTypeReference_Alternatives(this, this, 24, inst);
			case 25: return new TopLevelSimpleTypeReference_Alternatives(this, this, 25, inst);
			case 26: return new DirectTopLevelTypeReference_RefAssignment(this, this, 26, inst);
			case 27: return new DirectTopLevelSimpleTypeReference_RefAssignment(this, this, 27, inst);
			case 28: return new DirectTopLevelComplexTypeReference_RefAssignment(this, this, 28, inst);
			case 29: return new ImportedTopLevelTypeReference_Group(this, this, 29, inst);
			case 30: return new ImportedTopLevelSimpleTypeReference_Group(this, this, 30, inst);
			case 31: return new ImportedTopLevelComplexTypeReference_Group(this, this, 31, inst);
			case 32: return new ImportedReference_Alternatives(this, this, 32, inst);
			case 33: return new EmbeddedType_Alternatives(this, this, 33, inst);
			case 34: return new EmbeddedComplexType_Group(this, this, 34, inst);
			case 35: return new EmbeddedSimpleType_Group(this, this, 35, inst);
			case 36: return new ComplexType_Alternatives(this, this, 36, inst);
			case 37: return new SimpleType_Alternatives(this, this, 37, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Schema ****************
 *
 * // root:
 * Schema:
 * 	"schema" name= // name is mainly used for file generation
 * 	ID "namespace" nsURI= // URI
 * 	STRING imports+=Import* definitions+=TopLevelDefinition*;
 *
 **/

// "schema" name= // name is mainly used for file generation
// ID "namespace" nsURI= // URI
// STRING imports+=Import* definitions+=TopLevelDefinition*
protected class Schema_Group extends GroupToken {
	
	public Schema_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSchemaAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Schema_DefinitionsAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Schema_ImportsAssignment_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Schema_NsURIAssignment_3(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSchemaRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "schema"
protected class Schema_SchemaKeyword_0 extends KeywordToken  {
	
	public Schema_SchemaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSchemaAccess().getSchemaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name= // name is mainly used for file generation
// ID
protected class Schema_NameAssignment_1 extends AssignmentToken  {
	
	public Schema_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSchemaAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Schema_SchemaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSchemaAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSchemaAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "namespace"
protected class Schema_NamespaceKeyword_2 extends KeywordToken  {
	
	public Schema_NamespaceKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSchemaAccess().getNamespaceKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Schema_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// nsURI= // URI
// STRING
protected class Schema_NsURIAssignment_3 extends AssignmentToken  {
	
	public Schema_NsURIAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSchemaAccess().getNsURIAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Schema_NamespaceKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nsURI",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nsURI");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSchemaAccess().getNsURISTRINGTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSchemaAccess().getNsURISTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// imports+=Import*
protected class Schema_ImportsAssignment_4 extends AssignmentToken  {
	
	public Schema_ImportsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSchemaAccess().getImportsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("imports",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSchemaAccess().getImportsImportParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Schema_ImportsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Schema_NsURIAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// definitions+=TopLevelDefinition*
protected class Schema_DefinitionsAssignment_5 extends AssignmentToken  {
	
	public Schema_DefinitionsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSchemaAccess().getDefinitionsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("definitions",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("definitions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTopLevelDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSchemaAccess().getDefinitionsTopLevelDefinitionParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Schema_DefinitionsAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Schema_ImportsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new Schema_NsURIAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Schema ****************/


/************ begin Rule Import ****************
 *
 * Import:
 * 	"import" importURI=STRING "as" nsPrefix=ID;
 *
 **/

// "import" importURI=STRING "as" nsPrefix=ID
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_NsPrefixAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "import"
protected class Import_ImportKeyword_0 extends KeywordToken  {
	
	public Import_ImportKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// importURI=STRING
protected class Import_ImportURIAssignment_1 extends AssignmentToken  {
	
	public Import_ImportURIAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImportURIAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_ImportKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("importURI",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("importURI");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "as"
protected class Import_AsKeyword_2 extends KeywordToken  {
	
	public Import_AsKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getAsKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_ImportURIAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// nsPrefix=ID
protected class Import_NsPrefixAssignment_3 extends AssignmentToken  {
	
	public Import_NsPrefixAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getNsPrefixAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Import_AsKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nsPrefix",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nsPrefix");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getImportAccess().getNsPrefixIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getImportAccess().getNsPrefixIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Import ****************/


/************ begin Rule TopLevelDefinition ****************
 *
 * TopLevelDefinition:
 * 	TopLevelType | TopLevelElement;
 *
 **/

// TopLevelType | TopLevelElement
protected class TopLevelDefinition_Alternatives extends AlternativesToken {

	public TopLevelDefinition_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTopLevelDefinitionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelDefinition_TopLevelTypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TopLevelDefinition_TopLevelElementParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTopLevelComplexTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTopLevelElementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTopLevelSimpleTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TopLevelType
protected class TopLevelDefinition_TopLevelTypeParserRuleCall_0 extends RuleCallToken {
	
	public TopLevelDefinition_TopLevelTypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelDefinitionAccess().getTopLevelTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTopLevelComplexTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTopLevelSimpleTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TopLevelType_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TopLevelElement
protected class TopLevelDefinition_TopLevelElementParserRuleCall_1 extends RuleCallToken {
	
	public TopLevelDefinition_TopLevelElementParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelDefinitionAccess().getTopLevelElementParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelElement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTopLevelElementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TopLevelElement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TopLevelDefinition ****************/


/************ begin Rule TopLevelType ****************
 *
 * TopLevelType:
 * 	TopLevelSimpleType | TopLevelComplexType;
 *
 **/

// TopLevelSimpleType | TopLevelComplexType
protected class TopLevelType_Alternatives extends AlternativesToken {

	public TopLevelType_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTopLevelTypeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelType_TopLevelSimpleTypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TopLevelType_TopLevelComplexTypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTopLevelComplexTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTopLevelSimpleTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TopLevelSimpleType
protected class TopLevelType_TopLevelSimpleTypeParserRuleCall_0 extends RuleCallToken {
	
	public TopLevelType_TopLevelSimpleTypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelTypeAccess().getTopLevelSimpleTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelSimpleType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTopLevelSimpleTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TopLevelSimpleType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TopLevelComplexType
protected class TopLevelType_TopLevelComplexTypeParserRuleCall_1 extends RuleCallToken {
	
	public TopLevelType_TopLevelComplexTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelTypeAccess().getTopLevelComplexTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTopLevelComplexTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TopLevelComplexType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TopLevelType ****************/


/************ begin Rule TopLevelElement ****************
 *
 * TopLevelElement:
 * 	"element" name=ID ("->" typeRef=NamedTypeReference | ":" embeddedTypeDef=EmbeddedType);
 *
 **/

// "element" name=ID ("->" typeRef=NamedTypeReference | ":" embeddedTypeDef=EmbeddedType)
protected class TopLevelElement_Group extends GroupToken {
	
	public TopLevelElement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTopLevelElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelElement_Alternatives_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTopLevelElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "element"
protected class TopLevelElement_ElementKeyword_0 extends KeywordToken  {
	
	public TopLevelElement_ElementKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTopLevelElementAccess().getElementKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class TopLevelElement_NameAssignment_1 extends AssignmentToken  {
	
	public TopLevelElement_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTopLevelElementAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelElement_ElementKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTopLevelElementAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTopLevelElementAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "->" typeRef=NamedTypeReference | ":" embeddedTypeDef=EmbeddedType
protected class TopLevelElement_Alternatives_2 extends AlternativesToken {

	public TopLevelElement_Alternatives_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTopLevelElementAccess().getAlternatives_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelElement_Group_2_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TopLevelElement_Group_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "->" typeRef=NamedTypeReference
protected class TopLevelElement_Group_2_0 extends GroupToken {
	
	public TopLevelElement_Group_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTopLevelElementAccess().getGroup_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelElement_TypeRefAssignment_2_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "->"
protected class TopLevelElement_HyphenMinusGreaterThanSignKeyword_2_0_0 extends KeywordToken  {
	
	public TopLevelElement_HyphenMinusGreaterThanSignKeyword_2_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTopLevelElementAccess().getHyphenMinusGreaterThanSignKeyword_2_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelElement_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// typeRef=NamedTypeReference
protected class TopLevelElement_TypeRefAssignment_2_0_1 extends AssignmentToken  {
	
	public TopLevelElement_TypeRefAssignment_2_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTopLevelElementAccess().getTypeRefAssignment_2_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamedTypeReference_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("typeRef",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("typeRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedTypeReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTopLevelElementAccess().getTypeRefNamedTypeReferenceParserRuleCall_2_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TopLevelElement_HyphenMinusGreaterThanSignKeyword_2_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ":" embeddedTypeDef=EmbeddedType
protected class TopLevelElement_Group_2_1 extends GroupToken {
	
	public TopLevelElement_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTopLevelElementAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelElement_EmbeddedTypeDefAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class TopLevelElement_ColonKeyword_2_1_0 extends KeywordToken  {
	
	public TopLevelElement_ColonKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTopLevelElementAccess().getColonKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelElement_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// embeddedTypeDef=EmbeddedType
protected class TopLevelElement_EmbeddedTypeDefAssignment_2_1_1 extends AssignmentToken  {
	
	public TopLevelElement_EmbeddedTypeDefAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTopLevelElementAccess().getEmbeddedTypeDefAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmbeddedType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("embeddedTypeDef",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("embeddedTypeDef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEmbeddedTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTopLevelElementAccess().getEmbeddedTypeDefEmbeddedTypeParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TopLevelElement_ColonKeyword_2_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}




/************ end Rule TopLevelElement ****************/


/************ begin Rule TopLevelSimpleType ****************
 *
 * / *
 *  * +--------------+
 *  * | simple types |
 *  * +--------------+
 *  * /TopLevelSimpleType:
 * 	"simple-type" name=ID restriction=Restriction? documentation=Documentation?;
 *
 **/

// "simple-type" name=ID restriction=Restriction? documentation=Documentation?
protected class TopLevelSimpleType_Group extends GroupToken {
	
	public TopLevelSimpleType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTopLevelSimpleTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelSimpleType_DocumentationAssignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TopLevelSimpleType_RestrictionAssignment_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TopLevelSimpleType_NameAssignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTopLevelSimpleTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "simple-type"
protected class TopLevelSimpleType_SimpleTypeKeyword_0 extends KeywordToken  {
	
	public TopLevelSimpleType_SimpleTypeKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTopLevelSimpleTypeAccess().getSimpleTypeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class TopLevelSimpleType_NameAssignment_1 extends AssignmentToken  {
	
	public TopLevelSimpleType_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTopLevelSimpleTypeAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelSimpleType_SimpleTypeKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTopLevelSimpleTypeAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTopLevelSimpleTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// restriction=Restriction?
protected class TopLevelSimpleType_RestrictionAssignment_2 extends AssignmentToken  {
	
	public TopLevelSimpleType_RestrictionAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTopLevelSimpleTypeAccess().getRestrictionAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Restriction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("restriction",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("restriction");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRestrictionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTopLevelSimpleTypeAccess().getRestrictionRestrictionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TopLevelSimpleType_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// documentation=Documentation?
protected class TopLevelSimpleType_DocumentationAssignment_3 extends AssignmentToken  {
	
	public TopLevelSimpleType_DocumentationAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTopLevelSimpleTypeAccess().getDocumentationAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Documentation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("documentation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("documentation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDocumentationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTopLevelSimpleTypeAccess().getDocumentationDocumentationParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TopLevelSimpleType_RestrictionAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new TopLevelSimpleType_NameAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TopLevelSimpleType ****************/


/************ begin Rule Restriction ****************
 *
 * Restriction:
 * 	"[" typeRef=NonComplexTypeReference "]" ":" facets+=Facet+;
 *
 **/

// "[" typeRef=NonComplexTypeReference "]" ":" facets+=Facet+
protected class Restriction_Group extends GroupToken {
	
	public Restriction_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRestrictionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Restriction_FacetsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRestrictionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class Restriction_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public Restriction_LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRestrictionAccess().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// typeRef=NonComplexTypeReference
protected class Restriction_TypeRefAssignment_1 extends AssignmentToken  {
	
	public Restriction_TypeRefAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRestrictionAccess().getTypeRefAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonComplexTypeReference_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("typeRef",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("typeRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNonComplexTypeReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRestrictionAccess().getTypeRefNonComplexTypeReferenceParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Restriction_LeftSquareBracketKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class Restriction_RightSquareBracketKeyword_2 extends KeywordToken  {
	
	public Restriction_RightSquareBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRestrictionAccess().getRightSquareBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Restriction_TypeRefAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class Restriction_ColonKeyword_3 extends KeywordToken  {
	
	public Restriction_ColonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRestrictionAccess().getColonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Restriction_RightSquareBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// facets+=Facet+
protected class Restriction_FacetsAssignment_4 extends AssignmentToken  {
	
	public Restriction_FacetsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRestrictionAccess().getFacetsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Facet_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("facets",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("facets");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFacetRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRestrictionAccess().getFacetsFacetParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Restriction_FacetsAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Restriction_ColonKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Restriction ****************/


/************ begin Rule Facet ****************
 *
 * Facet:
 * 	EnumerationFacet | MaxLengthFacet | PatternFacet | RangeFacet | LengthFacet;
 *
 **/

// EnumerationFacet | MaxLengthFacet | PatternFacet | RangeFacet | LengthFacet
protected class Facet_Alternatives extends AlternativesToken {

	public Facet_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFacetAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Facet_EnumerationFacetParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Facet_MaxLengthFacetParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Facet_PatternFacetParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Facet_RangeFacetParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Facet_LengthFacetParserRuleCall_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumerationFacetRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getLengthFacetRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getMaxLengthFacetRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getPatternFacetRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRangeFacetRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// EnumerationFacet
protected class Facet_EnumerationFacetParserRuleCall_0 extends RuleCallToken {
	
	public Facet_EnumerationFacetParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFacetAccess().getEnumerationFacetParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationFacet_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumerationFacetRule().getType().getClassifier())
			return null;
		if(checkForRecursion(EnumerationFacet_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// MaxLengthFacet
protected class Facet_MaxLengthFacetParserRuleCall_1 extends RuleCallToken {
	
	public Facet_MaxLengthFacetParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFacetAccess().getMaxLengthFacetParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MaxLengthFacet_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMaxLengthFacetRule().getType().getClassifier())
			return null;
		if(checkForRecursion(MaxLengthFacet_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// PatternFacet
protected class Facet_PatternFacetParserRuleCall_2 extends RuleCallToken {
	
	public Facet_PatternFacetParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFacetAccess().getPatternFacetParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PatternFacet_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPatternFacetRule().getType().getClassifier())
			return null;
		if(checkForRecursion(PatternFacet_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// RangeFacet
protected class Facet_RangeFacetParserRuleCall_3 extends RuleCallToken {
	
	public Facet_RangeFacetParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFacetAccess().getRangeFacetParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RangeFacet_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRangeFacetRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RangeFacet_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// LengthFacet
protected class Facet_LengthFacetParserRuleCall_4 extends RuleCallToken {
	
	public Facet_LengthFacetParserRuleCall_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFacetAccess().getLengthFacetParserRuleCall_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LengthFacet_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLengthFacetRule().getType().getClassifier())
			return null;
		if(checkForRecursion(LengthFacet_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Facet ****************/


/************ begin Rule EnumerationFacet ****************
 *
 * EnumerationFacet:
 * 	"enumeration" "{" literals+=EnumerationLiteral+ "}";
 *
 **/

// "enumeration" "{" literals+=EnumerationLiteral+ "}"
protected class EnumerationFacet_Group extends GroupToken {
	
	public EnumerationFacet_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationFacetAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationFacet_RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumerationFacetRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "enumeration"
protected class EnumerationFacet_EnumerationKeyword_0 extends KeywordToken  {
	
	public EnumerationFacet_EnumerationKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationFacetAccess().getEnumerationKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "{"
protected class EnumerationFacet_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public EnumerationFacet_LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationFacetAccess().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationFacet_EnumerationKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// literals+=EnumerationLiteral+
protected class EnumerationFacet_LiteralsAssignment_2 extends AssignmentToken  {
	
	public EnumerationFacet_LiteralsAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationFacetAccess().getLiteralsAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("literals",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("literals");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEnumerationLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEnumerationFacetAccess().getLiteralsEnumerationLiteralParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EnumerationFacet_LiteralsAssignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EnumerationFacet_LeftCurlyBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class EnumerationFacet_RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public EnumerationFacet_RightCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationFacetAccess().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationFacet_LiteralsAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule EnumerationFacet ****************/


/************ begin Rule EnumerationLiteral ****************
 *
 * EnumerationLiteral:
 * 	value=(ID | STRING) ("::" annotation=STRING)?;
 *
 **/

// value=(ID | STRING) ("::" annotation=STRING)?
protected class EnumerationLiteral_Group extends GroupToken {
	
	public EnumerationLiteral_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EnumerationLiteral_ValueAssignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnumerationLiteralRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// value=(ID | STRING)
protected class EnumerationLiteral_ValueAssignment_0 extends AssignmentToken  {
	
	public EnumerationLiteral_ValueAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getValueAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEnumerationLiteralAccess().getValueIDTerminalRuleCall_0_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEnumerationLiteralAccess().getValueIDTerminalRuleCall_0_0_0();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEnumerationLiteralAccess().getValueSTRINGTerminalRuleCall_0_0_1(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEnumerationLiteralAccess().getValueSTRINGTerminalRuleCall_0_0_1();
			return obj;
		}
		return null;
	}

}

// ("::" annotation=STRING)?
protected class EnumerationLiteral_Group_1 extends GroupToken {
	
	public EnumerationLiteral_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_AnnotationAssignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "::"
protected class EnumerationLiteral_ColonColonKeyword_1_0 extends KeywordToken  {
	
	public EnumerationLiteral_ColonColonKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getColonColonKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_ValueAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// annotation=STRING
protected class EnumerationLiteral_AnnotationAssignment_1_1 extends AssignmentToken  {
	
	public EnumerationLiteral_AnnotationAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getAnnotationAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_ColonColonKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("annotation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("annotation");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEnumerationLiteralAccess().getAnnotationSTRINGTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEnumerationLiteralAccess().getAnnotationSTRINGTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule EnumerationLiteral ****************/


/************ begin Rule MaxLengthFacet ****************
 *
 * MaxLengthFacet:
 * 	"maxLength" "=" maxLength=INT;
 *
 **/

// "maxLength" "=" maxLength=INT
protected class MaxLengthFacet_Group extends GroupToken {
	
	public MaxLengthFacet_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMaxLengthFacetAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MaxLengthFacet_MaxLengthAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMaxLengthFacetRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "maxLength"
protected class MaxLengthFacet_MaxLengthKeyword_0 extends KeywordToken  {
	
	public MaxLengthFacet_MaxLengthKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMaxLengthFacetAccess().getMaxLengthKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "="
protected class MaxLengthFacet_EqualsSignKeyword_1 extends KeywordToken  {
	
	public MaxLengthFacet_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMaxLengthFacetAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MaxLengthFacet_MaxLengthKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// maxLength=INT
protected class MaxLengthFacet_MaxLengthAssignment_2 extends AssignmentToken  {
	
	public MaxLengthFacet_MaxLengthAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMaxLengthFacetAccess().getMaxLengthAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MaxLengthFacet_EqualsSignKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("maxLength",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("maxLength");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMaxLengthFacetAccess().getMaxLengthINTTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMaxLengthFacetAccess().getMaxLengthINTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule MaxLengthFacet ****************/


/************ begin Rule PatternFacet ****************
 *
 * // validation: typeRef must resolve to the built-in string type
 * PatternFacet:
 * 	"pattern" "=" pattern=PATTERN_STRING;
 *
 **/

// "pattern" "=" pattern=PATTERN_STRING
protected class PatternFacet_Group extends GroupToken {
	
	public PatternFacet_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPatternFacetAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PatternFacet_PatternAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPatternFacetRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "pattern"
protected class PatternFacet_PatternKeyword_0 extends KeywordToken  {
	
	public PatternFacet_PatternKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternFacetAccess().getPatternKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "="
protected class PatternFacet_EqualsSignKeyword_1 extends KeywordToken  {
	
	public PatternFacet_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPatternFacetAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PatternFacet_PatternKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// pattern=PATTERN_STRING
protected class PatternFacet_PatternAssignment_2 extends AssignmentToken  {
	
	public PatternFacet_PatternAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPatternFacetAccess().getPatternAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PatternFacet_EqualsSignKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("pattern",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("pattern");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPatternFacetAccess().getPatternPATTERN_STRINGTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPatternFacetAccess().getPatternPATTERN_STRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule PatternFacet ****************/


/************ begin Rule RangeFacet ****************
 *
 * RangeFacet:
 * 	"range" "=" lower=INT ".." upper=INT;
 *
 **/

// "range" "=" lower=INT ".." upper=INT
protected class RangeFacet_Group extends GroupToken {
	
	public RangeFacet_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRangeFacetAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RangeFacet_UpperAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRangeFacetRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "range"
protected class RangeFacet_RangeKeyword_0 extends KeywordToken  {
	
	public RangeFacet_RangeKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRangeFacetAccess().getRangeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "="
protected class RangeFacet_EqualsSignKeyword_1 extends KeywordToken  {
	
	public RangeFacet_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRangeFacetAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RangeFacet_RangeKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// lower=INT
protected class RangeFacet_LowerAssignment_2 extends AssignmentToken  {
	
	public RangeFacet_LowerAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRangeFacetAccess().getLowerAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RangeFacet_EqualsSignKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lower",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lower");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRangeFacetAccess().getLowerINTTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRangeFacetAccess().getLowerINTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ".."
protected class RangeFacet_FullStopFullStopKeyword_3 extends KeywordToken  {
	
	public RangeFacet_FullStopFullStopKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRangeFacetAccess().getFullStopFullStopKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RangeFacet_LowerAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// upper=INT
protected class RangeFacet_UpperAssignment_4 extends AssignmentToken  {
	
	public RangeFacet_UpperAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRangeFacetAccess().getUpperAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RangeFacet_FullStopFullStopKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("upper",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("upper");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRangeFacetAccess().getUpperINTTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRangeFacetAccess().getUpperINTTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RangeFacet ****************/


/************ begin Rule LengthFacet ****************
 *
 * LengthFacet:
 * 	"length" "=" length=INT;
 *
 **/

// "length" "=" length=INT
protected class LengthFacet_Group extends GroupToken {
	
	public LengthFacet_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getLengthFacetAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LengthFacet_LengthAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLengthFacetRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "length"
protected class LengthFacet_LengthKeyword_0 extends KeywordToken  {
	
	public LengthFacet_LengthKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLengthFacetAccess().getLengthKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "="
protected class LengthFacet_EqualsSignKeyword_1 extends KeywordToken  {
	
	public LengthFacet_EqualsSignKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getLengthFacetAccess().getEqualsSignKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LengthFacet_LengthKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// length=INT
protected class LengthFacet_LengthAssignment_2 extends AssignmentToken  {
	
	public LengthFacet_LengthAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLengthFacetAccess().getLengthAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LengthFacet_EqualsSignKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("length",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("length");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getLengthFacetAccess().getLengthINTTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getLengthFacetAccess().getLengthINTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule LengthFacet ****************/


/************ begin Rule Documentation ****************
 *
 * Documentation:
 * 	"::" text=STRING;
 *
 **/

// "::" text=STRING
protected class Documentation_Group extends GroupToken {
	
	public Documentation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDocumentationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Documentation_TextAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDocumentationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "::"
protected class Documentation_ColonColonKeyword_0 extends KeywordToken  {
	
	public Documentation_ColonColonKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDocumentationAccess().getColonColonKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// text=STRING
protected class Documentation_TextAssignment_1 extends AssignmentToken  {
	
	public Documentation_TextAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDocumentationAccess().getTextAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Documentation_ColonColonKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("text",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("text");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDocumentationAccess().getTextSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDocumentationAccess().getTextSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Documentation ****************/


/************ begin Rule TopLevelComplexType ****************
 *
 * / *
 *  * +---------------+
 *  * | complex types |
 *  * +---------------+
 *  * /TopLevelComplexType:
 * 	abstract?="abstract"? "complex-type" name=ID ("extends" extends=TopLevelComplexTypeReference)? "{"
 * 	properties+=Property* "}" ("documentation:" documentation=STRING)?;
 *
 **/

// abstract?="abstract"? "complex-type" name=ID ("extends" extends=TopLevelComplexTypeReference)? "{" properties+=Property*
// "}" ("documentation:" documentation=STRING)?
protected class TopLevelComplexType_Group extends GroupToken {
	
	public TopLevelComplexType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexType_Group_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TopLevelComplexType_RightCurlyBracketKeyword_6(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTopLevelComplexTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// abstract?="abstract"?
protected class TopLevelComplexType_AbstractAssignment_0 extends AssignmentToken  {
	
	public TopLevelComplexType_AbstractAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeAccess().getAbstractAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("abstract",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("abstract");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTopLevelComplexTypeAccess().getAbstractAbstractKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "complex-type"
protected class TopLevelComplexType_ComplexTypeKeyword_1 extends KeywordToken  {
	
	public TopLevelComplexType_ComplexTypeKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeAccess().getComplexTypeKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexType_AbstractAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// name=ID
protected class TopLevelComplexType_NameAssignment_2 extends AssignmentToken  {
	
	public TopLevelComplexType_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexType_ComplexTypeKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTopLevelComplexTypeAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTopLevelComplexTypeAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("extends" extends=TopLevelComplexTypeReference)?
protected class TopLevelComplexType_Group_3 extends GroupToken {
	
	public TopLevelComplexType_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexType_ExtendsAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "extends"
protected class TopLevelComplexType_ExtendsKeyword_3_0 extends KeywordToken  {
	
	public TopLevelComplexType_ExtendsKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeAccess().getExtendsKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexType_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// extends=TopLevelComplexTypeReference
protected class TopLevelComplexType_ExtendsAssignment_3_1 extends AssignmentToken  {
	
	public TopLevelComplexType_ExtendsAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeAccess().getExtendsAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexTypeReference_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extends",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTopLevelComplexTypeReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTopLevelComplexTypeAccess().getExtendsTopLevelComplexTypeReferenceParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TopLevelComplexType_ExtendsKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "{"
protected class TopLevelComplexType_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public TopLevelComplexType_LeftCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexType_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TopLevelComplexType_NameAssignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// properties+=Property*
protected class TopLevelComplexType_PropertiesAssignment_5 extends AssignmentToken  {
	
	public TopLevelComplexType_PropertiesAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeAccess().getPropertiesAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Property_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("properties",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTopLevelComplexTypeAccess().getPropertiesPropertyParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TopLevelComplexType_PropertiesAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new TopLevelComplexType_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class TopLevelComplexType_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public TopLevelComplexType_RightCurlyBracketKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexType_PropertiesAssignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TopLevelComplexType_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ("documentation:" documentation=STRING)?
protected class TopLevelComplexType_Group_7 extends GroupToken {
	
	public TopLevelComplexType_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexType_DocumentationAssignment_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "documentation:"
protected class TopLevelComplexType_DocumentationKeyword_7_0 extends KeywordToken  {
	
	public TopLevelComplexType_DocumentationKeyword_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeAccess().getDocumentationKeyword_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexType_RightCurlyBracketKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// documentation=STRING
protected class TopLevelComplexType_DocumentationAssignment_7_1 extends AssignmentToken  {
	
	public TopLevelComplexType_DocumentationAssignment_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeAccess().getDocumentationAssignment_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexType_DocumentationKeyword_7_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("documentation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("documentation");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTopLevelComplexTypeAccess().getDocumentationSTRINGTerminalRuleCall_7_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTopLevelComplexTypeAccess().getDocumentationSTRINGTerminalRuleCall_7_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule TopLevelComplexType ****************/


/************ begin Rule Property ****************
 *
 * Property:
 * 	Element | Attribute;
 *
 **/

// Element | Attribute
protected class Property_Alternatives extends AlternativesToken {

	public Property_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPropertyAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Property_ElementParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Property_AttributeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttributeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Element
protected class Property_ElementParserRuleCall_0 extends RuleCallToken {
	
	public Property_ElementParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyAccess().getElementParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Element_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getElementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Element_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Attribute
protected class Property_AttributeParserRuleCall_1 extends RuleCallToken {
	
	public Property_AttributeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyAccess().getAttributeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Attribute_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttributeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Attribute_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Property ****************/


/************ begin Rule Element ****************
 *
 * Element:
 * 	name=ID ("->" typeRef=NamedTypeReference | ":" embeddedTypeDef=EmbeddedType) multiplicity=Multiplicity?;
 *
 **/

// name=ID ("->" typeRef=NamedTypeReference | ":" embeddedTypeDef=EmbeddedType) multiplicity=Multiplicity?
protected class Element_Group extends GroupToken {
	
	public Element_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Element_MultiplicityAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Element_Alternatives_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getElementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=ID
protected class Element_NameAssignment_0 extends AssignmentToken  {
	
	public Element_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getElementAccess().getNameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getElementAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "->" typeRef=NamedTypeReference | ":" embeddedTypeDef=EmbeddedType
protected class Element_Alternatives_1 extends AlternativesToken {

	public Element_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getElementAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Element_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Element_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// "->" typeRef=NamedTypeReference
protected class Element_Group_1_0 extends GroupToken {
	
	public Element_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Element_TypeRefAssignment_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "->"
protected class Element_HyphenMinusGreaterThanSignKeyword_1_0_0 extends KeywordToken  {
	
	public Element_HyphenMinusGreaterThanSignKeyword_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementAccess().getHyphenMinusGreaterThanSignKeyword_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Element_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// typeRef=NamedTypeReference
protected class Element_TypeRefAssignment_1_0_1 extends AssignmentToken  {
	
	public Element_TypeRefAssignment_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getTypeRefAssignment_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamedTypeReference_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("typeRef",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("typeRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamedTypeReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getElementAccess().getTypeRefNamedTypeReferenceParserRuleCall_1_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Element_HyphenMinusGreaterThanSignKeyword_1_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ":" embeddedTypeDef=EmbeddedType
protected class Element_Group_1_1 extends GroupToken {
	
	public Element_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Element_EmbeddedTypeDefAssignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class Element_ColonKeyword_1_1_0 extends KeywordToken  {
	
	public Element_ColonKeyword_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementAccess().getColonKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Element_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// embeddedTypeDef=EmbeddedType
protected class Element_EmbeddedTypeDefAssignment_1_1_1 extends AssignmentToken  {
	
	public Element_EmbeddedTypeDefAssignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getEmbeddedTypeDefAssignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmbeddedType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("embeddedTypeDef",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("embeddedTypeDef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEmbeddedTypeRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getElementAccess().getEmbeddedTypeDefEmbeddedTypeParserRuleCall_1_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Element_ColonKeyword_1_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// multiplicity=Multiplicity?
protected class Element_MultiplicityAssignment_2 extends AssignmentToken  {
	
	public Element_MultiplicityAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementAccess().getMultiplicityAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("multiplicity",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("multiplicity");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicityRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getElementAccess().getMultiplicityMultiplicityParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Element_Alternatives_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Element ****************/


/************ begin Rule Attribute ****************
 *
 * Attribute:
 * 	required?="required"? "@" name=ID "->" typeRef=NonComplexTypeReference;
 *
 **/

// required?="required"? "@" name=ID "->" typeRef=NonComplexTypeReference
protected class Attribute_Group extends GroupToken {
	
	public Attribute_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAttributeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Attribute_TypeRefAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttributeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// required?="required"?
protected class Attribute_RequiredAssignment_0 extends AssignmentToken  {
	
	public Attribute_RequiredAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getRequiredAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("required",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("required");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAttributeAccess().getRequiredRequiredKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "@"
protected class Attribute_CommercialAtKeyword_1 extends KeywordToken  {
	
	public Attribute_CommercialAtKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeAccess().getCommercialAtKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Attribute_RequiredAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// name=ID
protected class Attribute_NameAssignment_2 extends AssignmentToken  {
	
	public Attribute_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Attribute_CommercialAtKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "->"
protected class Attribute_HyphenMinusGreaterThanSignKeyword_3 extends KeywordToken  {
	
	public Attribute_HyphenMinusGreaterThanSignKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeAccess().getHyphenMinusGreaterThanSignKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Attribute_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// typeRef=NonComplexTypeReference
protected class Attribute_TypeRefAssignment_4 extends AssignmentToken  {
	
	public Attribute_TypeRefAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getTypeRefAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonComplexTypeReference_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("typeRef",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("typeRef");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNonComplexTypeReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttributeAccess().getTypeRefNonComplexTypeReferenceParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Attribute_HyphenMinusGreaterThanSignKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Attribute ****************/


/************ begin Rule Multiplicity ****************
 *
 * Multiplicity: // make sure this element always gets created
 * 	{Multiplicity} "[" (lower=INT "..") (upper=INT | unbounded?="*") "]";
 *
 **/

// // make sure this element always gets created
// {Multiplicity} "[" (lower=INT "..") (upper=INT | unbounded?="*") "]"
protected class Multiplicity_Group extends GroupToken {
	
	public Multiplicity_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicityAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity_RightSquareBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicityAccess().getMultiplicityAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// // make sure this element always gets created
// {Multiplicity}
protected class Multiplicity_MultiplicityAction_0 extends ActionToken  {

	public Multiplicity_MultiplicityAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getMultiplicityAccess().getMultiplicityAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "["
protected class Multiplicity_LeftSquareBracketKeyword_1 extends KeywordToken  {
	
	public Multiplicity_LeftSquareBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultiplicityAccess().getLeftSquareBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity_MultiplicityAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// lower=INT ".."
protected class Multiplicity_Group_2 extends GroupToken {
	
	public Multiplicity_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicityAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity_FullStopFullStopKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// lower=INT
protected class Multiplicity_LowerAssignment_2_0 extends AssignmentToken  {
	
	public Multiplicity_LowerAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicityAccess().getLowerAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity_LeftSquareBracketKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lower",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lower");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMultiplicityAccess().getLowerINTTerminalRuleCall_2_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMultiplicityAccess().getLowerINTTerminalRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// ".."
protected class Multiplicity_FullStopFullStopKeyword_2_1 extends KeywordToken  {
	
	public Multiplicity_FullStopFullStopKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity_LowerAssignment_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// upper=INT | unbounded?="*"
protected class Multiplicity_Alternatives_3 extends AlternativesToken {

	public Multiplicity_Alternatives_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMultiplicityAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity_UpperAssignment_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Multiplicity_UnboundedAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// upper=INT
protected class Multiplicity_UpperAssignment_3_0 extends AssignmentToken  {
	
	public Multiplicity_UpperAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicityAccess().getUpperAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity_Group_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("upper",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("upper");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMultiplicityAccess().getUpperINTTerminalRuleCall_3_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMultiplicityAccess().getUpperINTTerminalRuleCall_3_0_0();
			return obj;
		}
		return null;
	}

}

// unbounded?="*"
protected class Multiplicity_UnboundedAssignment_3_1 extends AssignmentToken  {
	
	public Multiplicity_UnboundedAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicityAccess().getUnboundedAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity_Group_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("unbounded",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("unbounded");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMultiplicityAccess().getUnboundedAsteriskKeyword_3_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class Multiplicity_RightSquareBracketKeyword_4 extends KeywordToken  {
	
	public Multiplicity_RightSquareBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultiplicityAccess().getRightSquareBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Multiplicity ****************/


/************ begin Rule NamedTypeReference ****************
 *
 * // no Multiplicity (i.e., multiplicity=null) means: [1], i.e. required
 * / *
 *  * +------------------+
 *  * | type referencing |
 *  * +------------------+
 *  * /NamedTypeReference:
 * 	TopLevelTypeReference | BuiltinTypeReference;
 *
 **/

// TopLevelTypeReference | BuiltinTypeReference
protected class NamedTypeReference_Alternatives extends AlternativesToken {

	public NamedTypeReference_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNamedTypeReferenceAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NamedTypeReference_TopLevelTypeReferenceParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NamedTypeReference_BuiltinTypeReferenceParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBuiltinTypeReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDirectTopLevelTypeReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportedTopLevelTypeReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TopLevelTypeReference
protected class NamedTypeReference_TopLevelTypeReferenceParserRuleCall_0 extends RuleCallToken {
	
	public NamedTypeReference_TopLevelTypeReferenceParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNamedTypeReferenceAccess().getTopLevelTypeReferenceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelTypeReference_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDirectTopLevelTypeReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportedTopLevelTypeReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TopLevelTypeReference_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BuiltinTypeReference
protected class NamedTypeReference_BuiltinTypeReferenceParserRuleCall_1 extends RuleCallToken {
	
	public NamedTypeReference_BuiltinTypeReferenceParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNamedTypeReferenceAccess().getBuiltinTypeReferenceParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltinTypeReference_BuiltinAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBuiltinTypeReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BuiltinTypeReference_BuiltinAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule NamedTypeReference ****************/


/************ begin Rule NonComplexTypeReference ****************
 *
 * NonComplexTypeReference:
 * 	TopLevelSimpleTypeReference | BuiltinTypeReference;
 *
 **/

// TopLevelSimpleTypeReference | BuiltinTypeReference
protected class NonComplexTypeReference_Alternatives extends AlternativesToken {

	public NonComplexTypeReference_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNonComplexTypeReferenceAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonComplexTypeReference_TopLevelSimpleTypeReferenceParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NonComplexTypeReference_BuiltinTypeReferenceParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBuiltinTypeReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDirectTopLevelSimpleTypeReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportedTopLevelSimpleTypeReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TopLevelSimpleTypeReference
protected class NonComplexTypeReference_TopLevelSimpleTypeReferenceParserRuleCall_0 extends RuleCallToken {
	
	public NonComplexTypeReference_TopLevelSimpleTypeReferenceParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNonComplexTypeReferenceAccess().getTopLevelSimpleTypeReferenceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelSimpleTypeReference_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDirectTopLevelSimpleTypeReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportedTopLevelSimpleTypeReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TopLevelSimpleTypeReference_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BuiltinTypeReference
protected class NonComplexTypeReference_BuiltinTypeReferenceParserRuleCall_1 extends RuleCallToken {
	
	public NonComplexTypeReference_BuiltinTypeReferenceParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getNonComplexTypeReferenceAccess().getBuiltinTypeReferenceParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BuiltinTypeReference_BuiltinAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBuiltinTypeReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(BuiltinTypeReference_BuiltinAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule NonComplexTypeReference ****************/


/************ begin Rule BuiltinTypeReference ****************
 *
 * BuiltinTypeReference:
 * 	builtin=BuiltinType;
 *
 **/

// builtin=BuiltinType
protected class BuiltinTypeReference_BuiltinAssignment extends AssignmentToken  {
	
	public BuiltinTypeReference_BuiltinAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBuiltinTypeReferenceAccess().getBuiltinAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBuiltinTypeReferenceRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("builtin",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("builtin");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getBuiltinTypeReferenceAccess().getBuiltinBuiltinTypeEnumRuleCall_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getBuiltinTypeReferenceAccess().getBuiltinBuiltinTypeEnumRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule BuiltinTypeReference ****************/


/************ begin Rule TopLevelTypeReference ****************
 *
 * TopLevelTypeReference:
 * 	DirectTopLevelTypeReference | ImportedTopLevelTypeReference;
 *
 **/

// DirectTopLevelTypeReference | ImportedTopLevelTypeReference
protected class TopLevelTypeReference_Alternatives extends AlternativesToken {

	public TopLevelTypeReference_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTopLevelTypeReferenceAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelTypeReference_DirectTopLevelTypeReferenceParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TopLevelTypeReference_ImportedTopLevelTypeReferenceParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDirectTopLevelTypeReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportedTopLevelTypeReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// DirectTopLevelTypeReference
protected class TopLevelTypeReference_DirectTopLevelTypeReferenceParserRuleCall_0 extends RuleCallToken {
	
	public TopLevelTypeReference_DirectTopLevelTypeReferenceParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelTypeReferenceAccess().getDirectTopLevelTypeReferenceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DirectTopLevelTypeReference_RefAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDirectTopLevelTypeReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DirectTopLevelTypeReference_RefAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ImportedTopLevelTypeReference
protected class TopLevelTypeReference_ImportedTopLevelTypeReferenceParserRuleCall_1 extends RuleCallToken {
	
	public TopLevelTypeReference_ImportedTopLevelTypeReferenceParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelTypeReferenceAccess().getImportedTopLevelTypeReferenceParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelTypeReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportedTopLevelTypeReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ImportedTopLevelTypeReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TopLevelTypeReference ****************/


/************ begin Rule TopLevelComplexTypeReference ****************
 *
 * TopLevelComplexTypeReference:
 * 	DirectTopLevelComplexTypeReference | ImportedTopLevelComplexTypeReference;
 *
 **/

// DirectTopLevelComplexTypeReference | ImportedTopLevelComplexTypeReference
protected class TopLevelComplexTypeReference_Alternatives extends AlternativesToken {

	public TopLevelComplexTypeReference_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeReferenceAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexTypeReference_DirectTopLevelComplexTypeReferenceParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TopLevelComplexTypeReference_ImportedTopLevelComplexTypeReferenceParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDirectTopLevelComplexTypeReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportedTopLevelComplexTypeReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// DirectTopLevelComplexTypeReference
protected class TopLevelComplexTypeReference_DirectTopLevelComplexTypeReferenceParserRuleCall_0 extends RuleCallToken {
	
	public TopLevelComplexTypeReference_DirectTopLevelComplexTypeReferenceParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeReferenceAccess().getDirectTopLevelComplexTypeReferenceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DirectTopLevelComplexTypeReference_RefAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDirectTopLevelComplexTypeReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DirectTopLevelComplexTypeReference_RefAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ImportedTopLevelComplexTypeReference
protected class TopLevelComplexTypeReference_ImportedTopLevelComplexTypeReferenceParserRuleCall_1 extends RuleCallToken {
	
	public TopLevelComplexTypeReference_ImportedTopLevelComplexTypeReferenceParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelComplexTypeReferenceAccess().getImportedTopLevelComplexTypeReferenceParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelComplexTypeReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportedTopLevelComplexTypeReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ImportedTopLevelComplexTypeReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TopLevelComplexTypeReference ****************/


/************ begin Rule TopLevelSimpleTypeReference ****************
 *
 * TopLevelSimpleTypeReference:
 * 	DirectTopLevelSimpleTypeReference | ImportedTopLevelSimpleTypeReference;
 *
 **/

// DirectTopLevelSimpleTypeReference | ImportedTopLevelSimpleTypeReference
protected class TopLevelSimpleTypeReference_Alternatives extends AlternativesToken {

	public TopLevelSimpleTypeReference_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTopLevelSimpleTypeReferenceAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelSimpleTypeReference_DirectTopLevelSimpleTypeReferenceParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TopLevelSimpleTypeReference_ImportedTopLevelSimpleTypeReferenceParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDirectTopLevelSimpleTypeReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportedTopLevelSimpleTypeReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// DirectTopLevelSimpleTypeReference
protected class TopLevelSimpleTypeReference_DirectTopLevelSimpleTypeReferenceParserRuleCall_0 extends RuleCallToken {
	
	public TopLevelSimpleTypeReference_DirectTopLevelSimpleTypeReferenceParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelSimpleTypeReferenceAccess().getDirectTopLevelSimpleTypeReferenceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DirectTopLevelSimpleTypeReference_RefAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDirectTopLevelSimpleTypeReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(DirectTopLevelSimpleTypeReference_RefAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ImportedTopLevelSimpleTypeReference
protected class TopLevelSimpleTypeReference_ImportedTopLevelSimpleTypeReferenceParserRuleCall_1 extends RuleCallToken {
	
	public TopLevelSimpleTypeReference_ImportedTopLevelSimpleTypeReferenceParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTopLevelSimpleTypeReferenceAccess().getImportedTopLevelSimpleTypeReferenceParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelSimpleTypeReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportedTopLevelSimpleTypeReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ImportedTopLevelSimpleTypeReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TopLevelSimpleTypeReference ****************/


/************ begin Rule DirectTopLevelTypeReference ****************
 *
 * DirectTopLevelTypeReference:
 * 	ref=[TopLevelType];
 *
 **/

// ref=[TopLevelType]
protected class DirectTopLevelTypeReference_RefAssignment extends AssignmentToken  {
	
	public DirectTopLevelTypeReference_RefAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirectTopLevelTypeReferenceAccess().getRefAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDirectTopLevelTypeReferenceRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("ref",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ref");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDirectTopLevelTypeReferenceAccess().getRefTopLevelTypeCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getDirectTopLevelTypeReferenceAccess().getRefTopLevelTypeCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule DirectTopLevelTypeReference ****************/


/************ begin Rule DirectTopLevelSimpleTypeReference ****************
 *
 * DirectTopLevelSimpleTypeReference:
 * 	ref=[TopLevelSimpleType];
 *
 **/

// ref=[TopLevelSimpleType]
protected class DirectTopLevelSimpleTypeReference_RefAssignment extends AssignmentToken  {
	
	public DirectTopLevelSimpleTypeReference_RefAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirectTopLevelSimpleTypeReferenceAccess().getRefAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDirectTopLevelSimpleTypeReferenceRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("ref",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ref");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDirectTopLevelSimpleTypeReferenceAccess().getRefTopLevelSimpleTypeCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getDirectTopLevelSimpleTypeReferenceAccess().getRefTopLevelSimpleTypeCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule DirectTopLevelSimpleTypeReference ****************/


/************ begin Rule DirectTopLevelComplexTypeReference ****************
 *
 * DirectTopLevelComplexTypeReference:
 * 	ref=[TopLevelComplexType];
 *
 **/

// ref=[TopLevelComplexType]
protected class DirectTopLevelComplexTypeReference_RefAssignment extends AssignmentToken  {
	
	public DirectTopLevelComplexTypeReference_RefAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirectTopLevelComplexTypeReferenceAccess().getRefAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDirectTopLevelComplexTypeReferenceRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("ref",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ref");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDirectTopLevelComplexTypeReferenceAccess().getRefTopLevelComplexTypeCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getDirectTopLevelComplexTypeReferenceAccess().getRefTopLevelComplexTypeCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule DirectTopLevelComplexTypeReference ****************/


/************ begin Rule ImportedTopLevelTypeReference ****************
 *
 * ImportedTopLevelTypeReference:
 * 	^import=[Import] ":" ref=[TopLevelType];
 *
 **/

// ^import=[Import] ":" ref=[TopLevelType]
protected class ImportedTopLevelTypeReference_Group extends GroupToken {
	
	public ImportedTopLevelTypeReference_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportedTopLevelTypeReferenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelTypeReference_RefAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportedTopLevelTypeReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ^import=[Import]
protected class ImportedTopLevelTypeReference_ImportAssignment_0 extends AssignmentToken  {
	
	public ImportedTopLevelTypeReference_ImportAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportedTopLevelTypeReferenceAccess().getImportAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("import",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("import");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportedTopLevelTypeReferenceAccess().getImportImportCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getImportedTopLevelTypeReferenceAccess().getImportImportCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ":"
protected class ImportedTopLevelTypeReference_ColonKeyword_1 extends KeywordToken  {
	
	public ImportedTopLevelTypeReference_ColonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportedTopLevelTypeReferenceAccess().getColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelTypeReference_ImportAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ref=[TopLevelType]
protected class ImportedTopLevelTypeReference_RefAssignment_2 extends AssignmentToken  {
	
	public ImportedTopLevelTypeReference_RefAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportedTopLevelTypeReferenceAccess().getRefAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelTypeReference_ColonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ref",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ref");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportedTopLevelTypeReferenceAccess().getRefTopLevelTypeCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getImportedTopLevelTypeReferenceAccess().getRefTopLevelTypeCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule ImportedTopLevelTypeReference ****************/


/************ begin Rule ImportedTopLevelSimpleTypeReference ****************
 *
 * ImportedTopLevelSimpleTypeReference:
 * 	^import=[Import] ":" ref=[TopLevelSimpleType];
 *
 **/

// ^import=[Import] ":" ref=[TopLevelSimpleType]
protected class ImportedTopLevelSimpleTypeReference_Group extends GroupToken {
	
	public ImportedTopLevelSimpleTypeReference_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportedTopLevelSimpleTypeReferenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelSimpleTypeReference_RefAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportedTopLevelSimpleTypeReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ^import=[Import]
protected class ImportedTopLevelSimpleTypeReference_ImportAssignment_0 extends AssignmentToken  {
	
	public ImportedTopLevelSimpleTypeReference_ImportAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportedTopLevelSimpleTypeReferenceAccess().getImportAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("import",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("import");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportedTopLevelSimpleTypeReferenceAccess().getImportImportCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getImportedTopLevelSimpleTypeReferenceAccess().getImportImportCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ":"
protected class ImportedTopLevelSimpleTypeReference_ColonKeyword_1 extends KeywordToken  {
	
	public ImportedTopLevelSimpleTypeReference_ColonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportedTopLevelSimpleTypeReferenceAccess().getColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelSimpleTypeReference_ImportAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ref=[TopLevelSimpleType]
protected class ImportedTopLevelSimpleTypeReference_RefAssignment_2 extends AssignmentToken  {
	
	public ImportedTopLevelSimpleTypeReference_RefAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportedTopLevelSimpleTypeReferenceAccess().getRefAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelSimpleTypeReference_ColonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ref",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ref");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportedTopLevelSimpleTypeReferenceAccess().getRefTopLevelSimpleTypeCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getImportedTopLevelSimpleTypeReferenceAccess().getRefTopLevelSimpleTypeCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule ImportedTopLevelSimpleTypeReference ****************/


/************ begin Rule ImportedTopLevelComplexTypeReference ****************
 *
 * ImportedTopLevelComplexTypeReference:
 * 	^import=[Import] ":" ref=[TopLevelComplexType];
 *
 **/

// ^import=[Import] ":" ref=[TopLevelComplexType]
protected class ImportedTopLevelComplexTypeReference_Group extends GroupToken {
	
	public ImportedTopLevelComplexTypeReference_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImportedTopLevelComplexTypeReferenceAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelComplexTypeReference_RefAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportedTopLevelComplexTypeReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ^import=[Import]
protected class ImportedTopLevelComplexTypeReference_ImportAssignment_0 extends AssignmentToken  {
	
	public ImportedTopLevelComplexTypeReference_ImportAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportedTopLevelComplexTypeReferenceAccess().getImportAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("import",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("import");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportedTopLevelComplexTypeReferenceAccess().getImportImportCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getImportedTopLevelComplexTypeReferenceAccess().getImportImportCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ":"
protected class ImportedTopLevelComplexTypeReference_ColonKeyword_1 extends KeywordToken  {
	
	public ImportedTopLevelComplexTypeReference_ColonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImportedTopLevelComplexTypeReferenceAccess().getColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelComplexTypeReference_ImportAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ref=[TopLevelComplexType]
protected class ImportedTopLevelComplexTypeReference_RefAssignment_2 extends AssignmentToken  {
	
	public ImportedTopLevelComplexTypeReference_RefAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImportedTopLevelComplexTypeReferenceAccess().getRefAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelComplexTypeReference_ColonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ref",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ref");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportedTopLevelComplexTypeReferenceAccess().getRefTopLevelComplexTypeCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getImportedTopLevelComplexTypeReferenceAccess().getRefTopLevelComplexTypeCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule ImportedTopLevelComplexTypeReference ****************/


/************ begin Rule ImportedReference ****************
 *
 * // only used to have the common super type in the generated Ecore model
 * ImportedReference:
 * 	ImportedTopLevelTypeReference | ImportedTopLevelSimpleTypeReference | ImportedTopLevelComplexTypeReference;
 *
 **/

// ImportedTopLevelTypeReference | ImportedTopLevelSimpleTypeReference | ImportedTopLevelComplexTypeReference
protected class ImportedReference_Alternatives extends AlternativesToken {

	public ImportedReference_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getImportedReferenceAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedReference_ImportedTopLevelTypeReferenceParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ImportedReference_ImportedTopLevelSimpleTypeReferenceParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ImportedReference_ImportedTopLevelComplexTypeReferenceParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportedTopLevelComplexTypeReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportedTopLevelSimpleTypeReferenceRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getImportedTopLevelTypeReferenceRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ImportedTopLevelTypeReference
protected class ImportedReference_ImportedTopLevelTypeReferenceParserRuleCall_0 extends RuleCallToken {
	
	public ImportedReference_ImportedTopLevelTypeReferenceParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getImportedReferenceAccess().getImportedTopLevelTypeReferenceParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelTypeReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportedTopLevelTypeReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ImportedTopLevelTypeReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ImportedTopLevelSimpleTypeReference
protected class ImportedReference_ImportedTopLevelSimpleTypeReferenceParserRuleCall_1 extends RuleCallToken {
	
	public ImportedReference_ImportedTopLevelSimpleTypeReferenceParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getImportedReferenceAccess().getImportedTopLevelSimpleTypeReferenceParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelSimpleTypeReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportedTopLevelSimpleTypeReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ImportedTopLevelSimpleTypeReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ImportedTopLevelComplexTypeReference
protected class ImportedReference_ImportedTopLevelComplexTypeReferenceParserRuleCall_2 extends RuleCallToken {
	
	public ImportedReference_ImportedTopLevelComplexTypeReferenceParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getImportedReferenceAccess().getImportedTopLevelComplexTypeReferenceParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ImportedTopLevelComplexTypeReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImportedTopLevelComplexTypeReferenceRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ImportedTopLevelComplexTypeReference_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ImportedReference ****************/


/************ begin Rule EmbeddedType ****************
 *
 * / *
 *  * +----------------+
 *  * | embedded types |
 *  * +----------------+
 *  * /EmbeddedType:
 * 	EmbeddedComplexType | EmbeddedSimpleType;
 *
 **/

// EmbeddedComplexType | EmbeddedSimpleType
protected class EmbeddedType_Alternatives extends AlternativesToken {

	public EmbeddedType_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEmbeddedTypeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmbeddedType_EmbeddedComplexTypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EmbeddedType_EmbeddedSimpleTypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEmbeddedComplexTypeAccess().getEmbeddedComplexTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEmbeddedSimpleTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// EmbeddedComplexType
protected class EmbeddedType_EmbeddedComplexTypeParserRuleCall_0 extends RuleCallToken {
	
	public EmbeddedType_EmbeddedComplexTypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEmbeddedTypeAccess().getEmbeddedComplexTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmbeddedComplexType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEmbeddedComplexTypeAccess().getEmbeddedComplexTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(EmbeddedComplexType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EmbeddedSimpleType
protected class EmbeddedType_EmbeddedSimpleTypeParserRuleCall_1 extends RuleCallToken {
	
	public EmbeddedType_EmbeddedSimpleTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEmbeddedTypeAccess().getEmbeddedSimpleTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmbeddedSimpleType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEmbeddedSimpleTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(EmbeddedSimpleType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule EmbeddedType ****************/


/************ begin Rule EmbeddedComplexType ****************
 *
 * EmbeddedComplexType:
 * 	{EmbeddedComplexType} "complex-type" ("extends" extends=TopLevelComplexTypeReference)? "{" properties+=Property* "}";
 *
 **/

// {EmbeddedComplexType} "complex-type" ("extends" extends=TopLevelComplexTypeReference)? "{" properties+=Property* "}"
protected class EmbeddedComplexType_Group extends GroupToken {
	
	public EmbeddedComplexType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEmbeddedComplexTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmbeddedComplexType_RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEmbeddedComplexTypeAccess().getEmbeddedComplexTypeAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {EmbeddedComplexType}
protected class EmbeddedComplexType_EmbeddedComplexTypeAction_0 extends ActionToken  {

	public EmbeddedComplexType_EmbeddedComplexTypeAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getEmbeddedComplexTypeAccess().getEmbeddedComplexTypeAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "complex-type"
protected class EmbeddedComplexType_ComplexTypeKeyword_1 extends KeywordToken  {
	
	public EmbeddedComplexType_ComplexTypeKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEmbeddedComplexTypeAccess().getComplexTypeKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmbeddedComplexType_EmbeddedComplexTypeAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("extends" extends=TopLevelComplexTypeReference)?
protected class EmbeddedComplexType_Group_2 extends GroupToken {
	
	public EmbeddedComplexType_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEmbeddedComplexTypeAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmbeddedComplexType_ExtendsAssignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "extends"
protected class EmbeddedComplexType_ExtendsKeyword_2_0 extends KeywordToken  {
	
	public EmbeddedComplexType_ExtendsKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEmbeddedComplexTypeAccess().getExtendsKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmbeddedComplexType_ComplexTypeKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// extends=TopLevelComplexTypeReference
protected class EmbeddedComplexType_ExtendsAssignment_2_1 extends AssignmentToken  {
	
	public EmbeddedComplexType_ExtendsAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEmbeddedComplexTypeAccess().getExtendsAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexTypeReference_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extends",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extends");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTopLevelComplexTypeReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEmbeddedComplexTypeAccess().getExtendsTopLevelComplexTypeReferenceParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EmbeddedComplexType_ExtendsKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "{"
protected class EmbeddedComplexType_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public EmbeddedComplexType_LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEmbeddedComplexTypeAccess().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmbeddedComplexType_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EmbeddedComplexType_ComplexTypeKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// properties+=Property*
protected class EmbeddedComplexType_PropertiesAssignment_4 extends AssignmentToken  {
	
	public EmbeddedComplexType_PropertiesAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEmbeddedComplexTypeAccess().getPropertiesAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Property_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("properties",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEmbeddedComplexTypeAccess().getPropertiesPropertyParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EmbeddedComplexType_PropertiesAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EmbeddedComplexType_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class EmbeddedComplexType_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public EmbeddedComplexType_RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEmbeddedComplexTypeAccess().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmbeddedComplexType_PropertiesAssignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EmbeddedComplexType_LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule EmbeddedComplexType ****************/


/************ begin Rule EmbeddedSimpleType ****************
 *
 * EmbeddedSimpleType:
 * 	"simple-type" restriction=Restriction documentation=Documentation?;
 *
 **/

// "simple-type" restriction=Restriction documentation=Documentation?
protected class EmbeddedSimpleType_Group extends GroupToken {
	
	public EmbeddedSimpleType_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEmbeddedSimpleTypeAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmbeddedSimpleType_DocumentationAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EmbeddedSimpleType_RestrictionAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEmbeddedSimpleTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "simple-type"
protected class EmbeddedSimpleType_SimpleTypeKeyword_0 extends KeywordToken  {
	
	public EmbeddedSimpleType_SimpleTypeKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEmbeddedSimpleTypeAccess().getSimpleTypeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// restriction=Restriction
protected class EmbeddedSimpleType_RestrictionAssignment_1 extends AssignmentToken  {
	
	public EmbeddedSimpleType_RestrictionAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEmbeddedSimpleTypeAccess().getRestrictionAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Restriction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("restriction",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("restriction");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRestrictionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEmbeddedSimpleTypeAccess().getRestrictionRestrictionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EmbeddedSimpleType_SimpleTypeKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// documentation=Documentation?
protected class EmbeddedSimpleType_DocumentationAssignment_2 extends AssignmentToken  {
	
	public EmbeddedSimpleType_DocumentationAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEmbeddedSimpleTypeAccess().getDocumentationAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Documentation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("documentation",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("documentation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDocumentationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEmbeddedSimpleTypeAccess().getDocumentationDocumentationParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EmbeddedSimpleType_RestrictionAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule EmbeddedSimpleType ****************/


/************ begin Rule ComplexType ****************
 *
 * // only used to have the common super type in the generated Ecore model
 * ComplexType:
 * 	TopLevelComplexType | EmbeddedComplexType;
 *
 **/

// TopLevelComplexType | EmbeddedComplexType
protected class ComplexType_Alternatives extends AlternativesToken {

	public ComplexType_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getComplexTypeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComplexType_TopLevelComplexTypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComplexType_EmbeddedComplexTypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEmbeddedComplexTypeAccess().getEmbeddedComplexTypeAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTopLevelComplexTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TopLevelComplexType
protected class ComplexType_TopLevelComplexTypeParserRuleCall_0 extends RuleCallToken {
	
	public ComplexType_TopLevelComplexTypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComplexTypeAccess().getTopLevelComplexTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelComplexType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTopLevelComplexTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TopLevelComplexType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EmbeddedComplexType
protected class ComplexType_EmbeddedComplexTypeParserRuleCall_1 extends RuleCallToken {
	
	public ComplexType_EmbeddedComplexTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getComplexTypeAccess().getEmbeddedComplexTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmbeddedComplexType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEmbeddedComplexTypeAccess().getEmbeddedComplexTypeAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(EmbeddedComplexType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ComplexType ****************/


/************ begin Rule SimpleType ****************
 *
 * // only used to have the common super type in the generated Ecore model
 * SimpleType:
 * 	TopLevelSimpleType | EmbeddedSimpleType;
 *
 **/

// TopLevelSimpleType | EmbeddedSimpleType
protected class SimpleType_Alternatives extends AlternativesToken {

	public SimpleType_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleType_TopLevelSimpleTypeParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleType_EmbeddedSimpleTypeParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEmbeddedSimpleTypeRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTopLevelSimpleTypeRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TopLevelSimpleType
protected class SimpleType_TopLevelSimpleTypeParserRuleCall_0 extends RuleCallToken {
	
	public SimpleType_TopLevelSimpleTypeParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getTopLevelSimpleTypeParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TopLevelSimpleType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTopLevelSimpleTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TopLevelSimpleType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EmbeddedSimpleType
protected class SimpleType_EmbeddedSimpleTypeParserRuleCall_1 extends RuleCallToken {
	
	public SimpleType_EmbeddedSimpleTypeParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getEmbeddedSimpleTypeParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmbeddedSimpleType_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEmbeddedSimpleTypeRule().getType().getClassifier())
			return null;
		if(checkForRecursion(EmbeddedSimpleType_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SimpleType ****************/

}
