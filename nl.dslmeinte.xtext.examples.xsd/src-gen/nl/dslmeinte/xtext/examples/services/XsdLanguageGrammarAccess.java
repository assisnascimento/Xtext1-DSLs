/*
* generated by Xtext
*/

package nl.dslmeinte.xtext.examples.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class XsdLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Schema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSchemaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cNamespaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNsURIAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNsURISTRINGTerminalRuleCall_3_0 = (RuleCall)cNsURIAssignment_3.eContents().get(0);
		private final Assignment cImportsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImportsImportParserRuleCall_4_0 = (RuleCall)cImportsAssignment_4.eContents().get(0);
		private final Assignment cDefinitionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefinitionsTopLevelDefinitionParserRuleCall_5_0 = (RuleCall)cDefinitionsAssignment_5.eContents().get(0);
		
		//// root:
		//Schema:
		//	"schema" name= // name is mainly used for file generation
		//	ID "namespace" nsURI= // URI
		//	STRING imports+=Import* definitions+=TopLevelDefinition*;
		public ParserRule getRule() { return rule; }

		//"schema" name= // name is mainly used for file generation
		//ID "namespace" nsURI= // URI
		//STRING imports+=Import* definitions+=TopLevelDefinition*
		public Group getGroup() { return cGroup; }

		//"schema"
		public Keyword getSchemaKeyword_0() { return cSchemaKeyword_0; }

		//name= // name is mainly used for file generation
		//ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//// name is mainly used for file generation
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"namespace"
		public Keyword getNamespaceKeyword_2() { return cNamespaceKeyword_2; }

		//nsURI= // URI
		//STRING
		public Assignment getNsURIAssignment_3() { return cNsURIAssignment_3; }

		//// URI
		//STRING
		public RuleCall getNsURISTRINGTerminalRuleCall_3_0() { return cNsURISTRINGTerminalRuleCall_3_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_4() { return cImportsAssignment_4; }

		//Import
		public RuleCall getImportsImportParserRuleCall_4_0() { return cImportsImportParserRuleCall_4_0; }

		//definitions+=TopLevelDefinition*
		public Assignment getDefinitionsAssignment_5() { return cDefinitionsAssignment_5; }

		//TopLevelDefinition
		public RuleCall getDefinitionsTopLevelDefinitionParserRuleCall_5_0() { return cDefinitionsTopLevelDefinitionParserRuleCall_5_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNsPrefixAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNsPrefixIDTerminalRuleCall_3_0 = (RuleCall)cNsPrefixAssignment_3.eContents().get(0);
		
		//Import:
		//	"import" importURI=STRING "as" nsPrefix=ID;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING "as" nsPrefix=ID
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//nsPrefix=ID
		public Assignment getNsPrefixAssignment_3() { return cNsPrefixAssignment_3; }

		//ID
		public RuleCall getNsPrefixIDTerminalRuleCall_3_0() { return cNsPrefixIDTerminalRuleCall_3_0; }
	}

	public class TopLevelDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTopLevelTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTopLevelElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TopLevelDefinition:
		//	TopLevelType | TopLevelElement;
		public ParserRule getRule() { return rule; }

		//TopLevelType | TopLevelElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//TopLevelType
		public RuleCall getTopLevelTypeParserRuleCall_0() { return cTopLevelTypeParserRuleCall_0; }

		//TopLevelElement
		public RuleCall getTopLevelElementParserRuleCall_1() { return cTopLevelElementParserRuleCall_1; }
	}

	public class TopLevelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTopLevelSimpleTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTopLevelComplexTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TopLevelType:
		//	TopLevelSimpleType | TopLevelComplexType;
		public ParserRule getRule() { return rule; }

		//TopLevelSimpleType | TopLevelComplexType
		public Alternatives getAlternatives() { return cAlternatives; }

		//TopLevelSimpleType
		public RuleCall getTopLevelSimpleTypeParserRuleCall_0() { return cTopLevelSimpleTypeParserRuleCall_0; }

		//TopLevelComplexType
		public RuleCall getTopLevelComplexTypeParserRuleCall_1() { return cTopLevelComplexTypeParserRuleCall_1; }
	}

	public class TopLevelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cTypeRefAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTypeRefNamedTypeReferenceParserRuleCall_2_0_1_0 = (RuleCall)cTypeRefAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cColonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEmbeddedTypeDefAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEmbeddedTypeDefEmbeddedTypeParserRuleCall_2_1_1_0 = (RuleCall)cEmbeddedTypeDefAssignment_2_1_1.eContents().get(0);
		
		//TopLevelElement:
		//	"element" name=ID ("->" typeRef=NamedTypeReference | ":" embeddedTypeDef=EmbeddedType);
		public ParserRule getRule() { return rule; }

		//"element" name=ID ("->" typeRef=NamedTypeReference | ":" embeddedTypeDef=EmbeddedType)
		public Group getGroup() { return cGroup; }

		//"element"
		public Keyword getElementKeyword_0() { return cElementKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"->" typeRef=NamedTypeReference | ":" embeddedTypeDef=EmbeddedType
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"->" typeRef=NamedTypeReference
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0_0() { return cHyphenMinusGreaterThanSignKeyword_2_0_0; }

		//typeRef=NamedTypeReference
		public Assignment getTypeRefAssignment_2_0_1() { return cTypeRefAssignment_2_0_1; }

		//NamedTypeReference
		public RuleCall getTypeRefNamedTypeReferenceParserRuleCall_2_0_1_0() { return cTypeRefNamedTypeReferenceParserRuleCall_2_0_1_0; }

		//":" embeddedTypeDef=EmbeddedType
		public Group getGroup_2_1() { return cGroup_2_1; }

		//":"
		public Keyword getColonKeyword_2_1_0() { return cColonKeyword_2_1_0; }

		//embeddedTypeDef=EmbeddedType
		public Assignment getEmbeddedTypeDefAssignment_2_1_1() { return cEmbeddedTypeDefAssignment_2_1_1; }

		//EmbeddedType
		public RuleCall getEmbeddedTypeDefEmbeddedTypeParserRuleCall_2_1_1_0() { return cEmbeddedTypeDefEmbeddedTypeParserRuleCall_2_1_1_0; }
	}

	public class TopLevelSimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelSimpleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSimpleTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cRestrictionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRestrictionRestrictionParserRuleCall_2_0 = (RuleCall)cRestrictionAssignment_2.eContents().get(0);
		private final Assignment cDocumentationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDocumentationDocumentationParserRuleCall_3_0 = (RuleCall)cDocumentationAssignment_3.eContents().get(0);
		
		/// *
		// * +--------------+
		// * | simple types |
		// * +--------------+
		// * /TopLevelSimpleType:
		//	"simple-type" name=ID restriction=Restriction? documentation=Documentation?;
		public ParserRule getRule() { return rule; }

		//"simple-type" name=ID restriction=Restriction? documentation=Documentation?
		public Group getGroup() { return cGroup; }

		//"simple-type"
		public Keyword getSimpleTypeKeyword_0() { return cSimpleTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//restriction=Restriction?
		public Assignment getRestrictionAssignment_2() { return cRestrictionAssignment_2; }

		//Restriction
		public RuleCall getRestrictionRestrictionParserRuleCall_2_0() { return cRestrictionRestrictionParserRuleCall_2_0; }

		//documentation=Documentation?
		public Assignment getDocumentationAssignment_3() { return cDocumentationAssignment_3; }

		//Documentation
		public RuleCall getDocumentationDocumentationParserRuleCall_3_0() { return cDocumentationDocumentationParserRuleCall_3_0; }
	}

	public class RestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Restriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeRefNonComplexTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeRefAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFacetsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFacetsFacetParserRuleCall_4_0 = (RuleCall)cFacetsAssignment_4.eContents().get(0);
		
		//Restriction:
		//	"[" typeRef=NonComplexTypeReference "]" ":" facets+=Facet+;
		public ParserRule getRule() { return rule; }

		//"[" typeRef=NonComplexTypeReference "]" ":" facets+=Facet+
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//typeRef=NonComplexTypeReference
		public Assignment getTypeRefAssignment_1() { return cTypeRefAssignment_1; }

		//NonComplexTypeReference
		public RuleCall getTypeRefNonComplexTypeReferenceParserRuleCall_1_0() { return cTypeRefNonComplexTypeReferenceParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//facets+=Facet+
		public Assignment getFacetsAssignment_4() { return cFacetsAssignment_4; }

		//Facet
		public RuleCall getFacetsFacetParserRuleCall_4_0() { return cFacetsFacetParserRuleCall_4_0; }
	}

	public class FacetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Facet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumerationFacetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMaxLengthFacetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPatternFacetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRangeFacetParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLengthFacetParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Facet:
		//	EnumerationFacet | MaxLengthFacet | PatternFacet | RangeFacet | LengthFacet;
		public ParserRule getRule() { return rule; }

		//EnumerationFacet | MaxLengthFacet | PatternFacet | RangeFacet | LengthFacet
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnumerationFacet
		public RuleCall getEnumerationFacetParserRuleCall_0() { return cEnumerationFacetParserRuleCall_0; }

		//MaxLengthFacet
		public RuleCall getMaxLengthFacetParserRuleCall_1() { return cMaxLengthFacetParserRuleCall_1; }

		//PatternFacet
		public RuleCall getPatternFacetParserRuleCall_2() { return cPatternFacetParserRuleCall_2; }

		//RangeFacet
		public RuleCall getRangeFacetParserRuleCall_3() { return cRangeFacetParserRuleCall_3; }

		//LengthFacet
		public RuleCall getLengthFacetParserRuleCall_4() { return cLengthFacetParserRuleCall_4; }
	}

	public class EnumerationFacetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationFacet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLiteralsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLiteralsEnumerationLiteralParserRuleCall_2_0 = (RuleCall)cLiteralsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EnumerationFacet:
		//	"enumeration" "{" literals+=EnumerationLiteral+ "}";
		public ParserRule getRule() { return rule; }

		//"enumeration" "{" literals+=EnumerationLiteral+ "}"
		public Group getGroup() { return cGroup; }

		//"enumeration"
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//literals+=EnumerationLiteral+
		public Assignment getLiteralsAssignment_2() { return cLiteralsAssignment_2; }

		//EnumerationLiteral
		public RuleCall getLiteralsEnumerationLiteralParserRuleCall_2_0() { return cLiteralsEnumerationLiteralParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class EnumerationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cValueAlternatives_0_0 = (Alternatives)cValueAssignment_0.eContents().get(0);
		private final RuleCall cValueIDTerminalRuleCall_0_0_0 = (RuleCall)cValueAlternatives_0_0.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cValueAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAnnotationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnotationSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cAnnotationAssignment_1_1.eContents().get(0);
		
		//EnumerationLiteral:
		//	value=(ID | STRING) ("::" annotation=STRING)?;
		public ParserRule getRule() { return rule; }

		//value=(ID | STRING) ("::" annotation=STRING)?
		public Group getGroup() { return cGroup; }

		//value=(ID | STRING)
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//ID | STRING
		public Alternatives getValueAlternatives_0_0() { return cValueAlternatives_0_0; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_0_0_0() { return cValueIDTerminalRuleCall_0_0_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0_1() { return cValueSTRINGTerminalRuleCall_0_0_1; }

		//("::" annotation=STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//annotation=STRING
		public Assignment getAnnotationAssignment_1_1() { return cAnnotationAssignment_1_1; }

		//STRING
		public RuleCall getAnnotationSTRINGTerminalRuleCall_1_1_0() { return cAnnotationSTRINGTerminalRuleCall_1_1_0; }
	}

	public class MaxLengthFacetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaxLengthFacet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMaxLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxLengthINTTerminalRuleCall_2_0 = (RuleCall)cMaxLengthAssignment_2.eContents().get(0);
		
		//MaxLengthFacet:
		//	"maxLength" "=" maxLength=INT;
		public ParserRule getRule() { return rule; }

		//"maxLength" "=" maxLength=INT
		public Group getGroup() { return cGroup; }

		//"maxLength"
		public Keyword getMaxLengthKeyword_0() { return cMaxLengthKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//maxLength=INT
		public Assignment getMaxLengthAssignment_2() { return cMaxLengthAssignment_2; }

		//INT
		public RuleCall getMaxLengthINTTerminalRuleCall_2_0() { return cMaxLengthINTTerminalRuleCall_2_0; }
	}

	public class PatternFacetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternFacet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPATTERN_STRINGTerminalRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		
		//// validation: typeRef must resolve to the built-in string type
		//PatternFacet:
		//	"pattern" "=" pattern=PATTERN_STRING;
		public ParserRule getRule() { return rule; }

		//"pattern" "=" pattern=PATTERN_STRING
		public Group getGroup() { return cGroup; }

		//"pattern"
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//pattern=PATTERN_STRING
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }

		//PATTERN_STRING
		public RuleCall getPatternPATTERN_STRINGTerminalRuleCall_2_0() { return cPatternPATTERN_STRINGTerminalRuleCall_2_0; }
	}

	public class RangeFacetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RangeFacet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLowerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLowerINTTerminalRuleCall_2_0 = (RuleCall)cLowerAssignment_2.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpperAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpperINTTerminalRuleCall_4_0 = (RuleCall)cUpperAssignment_4.eContents().get(0);
		
		//RangeFacet:
		//	"range" "=" lower=INT ".." upper=INT;
		public ParserRule getRule() { return rule; }

		//"range" "=" lower=INT ".." upper=INT
		public Group getGroup() { return cGroup; }

		//"range"
		public Keyword getRangeKeyword_0() { return cRangeKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//lower=INT
		public Assignment getLowerAssignment_2() { return cLowerAssignment_2; }

		//INT
		public RuleCall getLowerINTTerminalRuleCall_2_0() { return cLowerINTTerminalRuleCall_2_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_3() { return cFullStopFullStopKeyword_3; }

		//upper=INT
		public Assignment getUpperAssignment_4() { return cUpperAssignment_4; }

		//INT
		public RuleCall getUpperINTTerminalRuleCall_4_0() { return cUpperINTTerminalRuleCall_4_0; }
	}

	public class LengthFacetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LengthFacet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLengthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthINTTerminalRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		
		//LengthFacet:
		//	"length" "=" length=INT;
		public ParserRule getRule() { return rule; }

		//"length" "=" length=INT
		public Group getGroup() { return cGroup; }

		//"length"
		public Keyword getLengthKeyword_0() { return cLengthKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//length=INT
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_2_0() { return cLengthINTTerminalRuleCall_2_0; }
	}

	public class DocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Documentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Documentation:
		//	"::" text=STRING;
		public ParserRule getRule() { return rule; }

		//"::" text=STRING
		public Group getGroup() { return cGroup; }

		//"::"
		public Keyword getColonColonKeyword_0() { return cColonColonKeyword_0; }

		//text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}

	public class TopLevelComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelComplexType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cComplexTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtendsTopLevelComplexTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cExtendsAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_0 = (RuleCall)cPropertiesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDocumentationKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cDocumentationAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDocumentationSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cDocumentationAssignment_7_1.eContents().get(0);
		
		/// *
		// * +---------------+
		// * | complex types |
		// * +---------------+
		// * /TopLevelComplexType:
		//	abstract?="abstract"? "complex-type" name=ID ("extends" extends=TopLevelComplexTypeReference)? "{"
		//	properties+=Property* "}" ("documentation:" documentation=STRING)?;
		public ParserRule getRule() { return rule; }

		//abstract?="abstract"? "complex-type" name=ID ("extends" extends=TopLevelComplexTypeReference)? "{" properties+=Property*
		//"}" ("documentation:" documentation=STRING)?
		public Group getGroup() { return cGroup; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }

		//"complex-type"
		public Keyword getComplexTypeKeyword_1() { return cComplexTypeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" extends=TopLevelComplexTypeReference)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//extends=TopLevelComplexTypeReference
		public Assignment getExtendsAssignment_3_1() { return cExtendsAssignment_3_1; }

		//TopLevelComplexTypeReference
		public RuleCall getExtendsTopLevelComplexTypeReferenceParserRuleCall_3_1_0() { return cExtendsTopLevelComplexTypeReferenceParserRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_5() { return cPropertiesAssignment_5; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_0() { return cPropertiesPropertyParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//("documentation:" documentation=STRING)?
		public Group getGroup_7() { return cGroup_7; }

		//"documentation:"
		public Keyword getDocumentationKeyword_7_0() { return cDocumentationKeyword_7_0; }

		//documentation=STRING
		public Assignment getDocumentationAssignment_7_1() { return cDocumentationAssignment_7_1; }

		//STRING
		public RuleCall getDocumentationSTRINGTerminalRuleCall_7_1_0() { return cDocumentationSTRINGTerminalRuleCall_7_1_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Property:
		//	Element | Attribute;
		public ParserRule getRule() { return rule; }

		//Element | Attribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//Element
		public RuleCall getElementParserRuleCall_0() { return cElementParserRuleCall_0; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_1() { return cAttributeParserRuleCall_1; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cTypeRefAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeRefNamedTypeReferenceParserRuleCall_1_0_1_0 = (RuleCall)cTypeRefAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cColonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEmbeddedTypeDefAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEmbeddedTypeDefEmbeddedTypeParserRuleCall_1_1_1_0 = (RuleCall)cEmbeddedTypeDefAssignment_1_1_1.eContents().get(0);
		private final Assignment cMultiplicityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_2_0 = (RuleCall)cMultiplicityAssignment_2.eContents().get(0);
		
		//Element:
		//	name=ID ("->" typeRef=NamedTypeReference | ":" embeddedTypeDef=EmbeddedType) multiplicity=Multiplicity?;
		public ParserRule getRule() { return rule; }

		//name=ID ("->" typeRef=NamedTypeReference | ":" embeddedTypeDef=EmbeddedType) multiplicity=Multiplicity?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"->" typeRef=NamedTypeReference | ":" embeddedTypeDef=EmbeddedType
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"->" typeRef=NamedTypeReference
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_0() { return cHyphenMinusGreaterThanSignKeyword_1_0_0; }

		//typeRef=NamedTypeReference
		public Assignment getTypeRefAssignment_1_0_1() { return cTypeRefAssignment_1_0_1; }

		//NamedTypeReference
		public RuleCall getTypeRefNamedTypeReferenceParserRuleCall_1_0_1_0() { return cTypeRefNamedTypeReferenceParserRuleCall_1_0_1_0; }

		//":" embeddedTypeDef=EmbeddedType
		public Group getGroup_1_1() { return cGroup_1_1; }

		//":"
		public Keyword getColonKeyword_1_1_0() { return cColonKeyword_1_1_0; }

		//embeddedTypeDef=EmbeddedType
		public Assignment getEmbeddedTypeDefAssignment_1_1_1() { return cEmbeddedTypeDefAssignment_1_1_1; }

		//EmbeddedType
		public RuleCall getEmbeddedTypeDefEmbeddedTypeParserRuleCall_1_1_1_0() { return cEmbeddedTypeDefEmbeddedTypeParserRuleCall_1_1_1_0; }

		//multiplicity=Multiplicity?
		public Assignment getMultiplicityAssignment_2() { return cMultiplicityAssignment_2; }

		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_2_0() { return cMultiplicityMultiplicityParserRuleCall_2_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRequiredRequiredKeyword_0_0 = (Keyword)cRequiredAssignment_0.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeRefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeRefNonComplexTypeReferenceParserRuleCall_4_0 = (RuleCall)cTypeRefAssignment_4.eContents().get(0);
		
		//Attribute:
		//	required?="required"? "@" name=ID "->" typeRef=NonComplexTypeReference;
		public ParserRule getRule() { return rule; }

		//required?="required"? "@" name=ID "->" typeRef=NonComplexTypeReference
		public Group getGroup() { return cGroup; }

		//required?="required"?
		public Assignment getRequiredAssignment_0() { return cRequiredAssignment_0; }

		//"required"
		public Keyword getRequiredRequiredKeyword_0_0() { return cRequiredRequiredKeyword_0_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//typeRef=NonComplexTypeReference
		public Assignment getTypeRefAssignment_4() { return cTypeRefAssignment_4; }

		//NonComplexTypeReference
		public RuleCall getTypeRefNonComplexTypeReferenceParserRuleCall_4_0() { return cTypeRefNonComplexTypeReferenceParserRuleCall_4_0; }
	}

	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultiplicityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLowerAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLowerINTTerminalRuleCall_2_0_0 = (RuleCall)cLowerAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cUpperAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cUpperINTTerminalRuleCall_3_0_0 = (RuleCall)cUpperAssignment_3_0.eContents().get(0);
		private final Assignment cUnboundedAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cUnboundedAsteriskKeyword_3_1_0 = (Keyword)cUnboundedAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Multiplicity: // make sure this element always gets created
		//	{Multiplicity} "[" (lower=INT "..") (upper=INT | unbounded?="*") "]";
		public ParserRule getRule() { return rule; }

		//// make sure this element always gets created
		//{Multiplicity} "[" (lower=INT "..") (upper=INT | unbounded?="*") "]"
		public Group getGroup() { return cGroup; }

		//// make sure this element always gets created
		//{Multiplicity}
		public Action getMultiplicityAction_0() { return cMultiplicityAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//lower=INT ".."
		public Group getGroup_2() { return cGroup_2; }

		//lower=INT
		public Assignment getLowerAssignment_2_0() { return cLowerAssignment_2_0; }

		//INT
		public RuleCall getLowerINTTerminalRuleCall_2_0_0() { return cLowerINTTerminalRuleCall_2_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2_1() { return cFullStopFullStopKeyword_2_1; }

		//upper=INT | unbounded?="*"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//upper=INT
		public Assignment getUpperAssignment_3_0() { return cUpperAssignment_3_0; }

		//INT
		public RuleCall getUpperINTTerminalRuleCall_3_0_0() { return cUpperINTTerminalRuleCall_3_0_0; }

		//unbounded?="*"
		public Assignment getUnboundedAssignment_3_1() { return cUnboundedAssignment_3_1; }

		//"*"
		public Keyword getUnboundedAsteriskKeyword_3_1_0() { return cUnboundedAsteriskKeyword_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class NamedTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTopLevelTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuiltinTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// no Multiplicity (i.e., multiplicity=null) means: [1], i.e. required
		/// *
		// * +------------------+
		// * | type referencing |
		// * +------------------+
		// * /NamedTypeReference:
		//	TopLevelTypeReference | BuiltinTypeReference;
		public ParserRule getRule() { return rule; }

		//TopLevelTypeReference | BuiltinTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//TopLevelTypeReference
		public RuleCall getTopLevelTypeReferenceParserRuleCall_0() { return cTopLevelTypeReferenceParserRuleCall_0; }

		//BuiltinTypeReference
		public RuleCall getBuiltinTypeReferenceParserRuleCall_1() { return cBuiltinTypeReferenceParserRuleCall_1; }
	}

	public class NonComplexTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonComplexTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTopLevelSimpleTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBuiltinTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NonComplexTypeReference:
		//	TopLevelSimpleTypeReference | BuiltinTypeReference;
		public ParserRule getRule() { return rule; }

		//TopLevelSimpleTypeReference | BuiltinTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//TopLevelSimpleTypeReference
		public RuleCall getTopLevelSimpleTypeReferenceParserRuleCall_0() { return cTopLevelSimpleTypeReferenceParserRuleCall_0; }

		//BuiltinTypeReference
		public RuleCall getBuiltinTypeReferenceParserRuleCall_1() { return cBuiltinTypeReferenceParserRuleCall_1; }
	}

	public class BuiltinTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltinTypeReference");
		private final Assignment cBuiltinAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBuiltinBuiltinTypeEnumRuleCall_0 = (RuleCall)cBuiltinAssignment.eContents().get(0);
		
		//BuiltinTypeReference:
		//	builtin=BuiltinType;
		public ParserRule getRule() { return rule; }

		//builtin=BuiltinType
		public Assignment getBuiltinAssignment() { return cBuiltinAssignment; }

		//BuiltinType
		public RuleCall getBuiltinBuiltinTypeEnumRuleCall_0() { return cBuiltinBuiltinTypeEnumRuleCall_0; }
	}

	public class TopLevelTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDirectTopLevelTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImportedTopLevelTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TopLevelTypeReference:
		//	DirectTopLevelTypeReference | ImportedTopLevelTypeReference;
		public ParserRule getRule() { return rule; }

		//DirectTopLevelTypeReference | ImportedTopLevelTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//DirectTopLevelTypeReference
		public RuleCall getDirectTopLevelTypeReferenceParserRuleCall_0() { return cDirectTopLevelTypeReferenceParserRuleCall_0; }

		//ImportedTopLevelTypeReference
		public RuleCall getImportedTopLevelTypeReferenceParserRuleCall_1() { return cImportedTopLevelTypeReferenceParserRuleCall_1; }
	}

	public class TopLevelComplexTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelComplexTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDirectTopLevelComplexTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImportedTopLevelComplexTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TopLevelComplexTypeReference:
		//	DirectTopLevelComplexTypeReference | ImportedTopLevelComplexTypeReference;
		public ParserRule getRule() { return rule; }

		//DirectTopLevelComplexTypeReference | ImportedTopLevelComplexTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//DirectTopLevelComplexTypeReference
		public RuleCall getDirectTopLevelComplexTypeReferenceParserRuleCall_0() { return cDirectTopLevelComplexTypeReferenceParserRuleCall_0; }

		//ImportedTopLevelComplexTypeReference
		public RuleCall getImportedTopLevelComplexTypeReferenceParserRuleCall_1() { return cImportedTopLevelComplexTypeReferenceParserRuleCall_1; }
	}

	public class TopLevelSimpleTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelSimpleTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDirectTopLevelSimpleTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImportedTopLevelSimpleTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TopLevelSimpleTypeReference:
		//	DirectTopLevelSimpleTypeReference | ImportedTopLevelSimpleTypeReference;
		public ParserRule getRule() { return rule; }

		//DirectTopLevelSimpleTypeReference | ImportedTopLevelSimpleTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//DirectTopLevelSimpleTypeReference
		public RuleCall getDirectTopLevelSimpleTypeReferenceParserRuleCall_0() { return cDirectTopLevelSimpleTypeReferenceParserRuleCall_0; }

		//ImportedTopLevelSimpleTypeReference
		public RuleCall getImportedTopLevelSimpleTypeReferenceParserRuleCall_1() { return cImportedTopLevelSimpleTypeReferenceParserRuleCall_1; }
	}

	public class DirectTopLevelTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DirectTopLevelTypeReference");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefTopLevelTypeCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefTopLevelTypeIDTerminalRuleCall_0_1 = (RuleCall)cRefTopLevelTypeCrossReference_0.eContents().get(1);
		
		//DirectTopLevelTypeReference:
		//	ref=[TopLevelType];
		public ParserRule getRule() { return rule; }

		//ref=[TopLevelType]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[TopLevelType]
		public CrossReference getRefTopLevelTypeCrossReference_0() { return cRefTopLevelTypeCrossReference_0; }

		//ID
		public RuleCall getRefTopLevelTypeIDTerminalRuleCall_0_1() { return cRefTopLevelTypeIDTerminalRuleCall_0_1; }
	}

	public class DirectTopLevelSimpleTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DirectTopLevelSimpleTypeReference");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefTopLevelSimpleTypeCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefTopLevelSimpleTypeIDTerminalRuleCall_0_1 = (RuleCall)cRefTopLevelSimpleTypeCrossReference_0.eContents().get(1);
		
		//DirectTopLevelSimpleTypeReference:
		//	ref=[TopLevelSimpleType];
		public ParserRule getRule() { return rule; }

		//ref=[TopLevelSimpleType]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[TopLevelSimpleType]
		public CrossReference getRefTopLevelSimpleTypeCrossReference_0() { return cRefTopLevelSimpleTypeCrossReference_0; }

		//ID
		public RuleCall getRefTopLevelSimpleTypeIDTerminalRuleCall_0_1() { return cRefTopLevelSimpleTypeIDTerminalRuleCall_0_1; }
	}

	public class DirectTopLevelComplexTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DirectTopLevelComplexTypeReference");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefTopLevelComplexTypeCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefTopLevelComplexTypeIDTerminalRuleCall_0_1 = (RuleCall)cRefTopLevelComplexTypeCrossReference_0.eContents().get(1);
		
		//DirectTopLevelComplexTypeReference:
		//	ref=[TopLevelComplexType];
		public ParserRule getRule() { return rule; }

		//ref=[TopLevelComplexType]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[TopLevelComplexType]
		public CrossReference getRefTopLevelComplexTypeCrossReference_0() { return cRefTopLevelComplexTypeCrossReference_0; }

		//ID
		public RuleCall getRefTopLevelComplexTypeIDTerminalRuleCall_0_1() { return cRefTopLevelComplexTypeIDTerminalRuleCall_0_1; }
	}

	public class ImportedTopLevelTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportedTopLevelTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cImportImportCrossReference_0_0 = (CrossReference)cImportAssignment_0.eContents().get(0);
		private final RuleCall cImportImportIDTerminalRuleCall_0_0_1 = (RuleCall)cImportImportCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefTopLevelTypeCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefTopLevelTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cRefTopLevelTypeCrossReference_2_0.eContents().get(1);
		
		//ImportedTopLevelTypeReference:
		//	^import=[Import] ":" ref=[TopLevelType];
		public ParserRule getRule() { return rule; }

		//^import=[Import] ":" ref=[TopLevelType]
		public Group getGroup() { return cGroup; }

		//^import=[Import]
		public Assignment getImportAssignment_0() { return cImportAssignment_0; }

		//[Import]
		public CrossReference getImportImportCrossReference_0_0() { return cImportImportCrossReference_0_0; }

		//ID
		public RuleCall getImportImportIDTerminalRuleCall_0_0_1() { return cImportImportIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//ref=[TopLevelType]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//[TopLevelType]
		public CrossReference getRefTopLevelTypeCrossReference_2_0() { return cRefTopLevelTypeCrossReference_2_0; }

		//ID
		public RuleCall getRefTopLevelTypeIDTerminalRuleCall_2_0_1() { return cRefTopLevelTypeIDTerminalRuleCall_2_0_1; }
	}

	public class ImportedTopLevelSimpleTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportedTopLevelSimpleTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cImportImportCrossReference_0_0 = (CrossReference)cImportAssignment_0.eContents().get(0);
		private final RuleCall cImportImportIDTerminalRuleCall_0_0_1 = (RuleCall)cImportImportCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefTopLevelSimpleTypeCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefTopLevelSimpleTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cRefTopLevelSimpleTypeCrossReference_2_0.eContents().get(1);
		
		//ImportedTopLevelSimpleTypeReference:
		//	^import=[Import] ":" ref=[TopLevelSimpleType];
		public ParserRule getRule() { return rule; }

		//^import=[Import] ":" ref=[TopLevelSimpleType]
		public Group getGroup() { return cGroup; }

		//^import=[Import]
		public Assignment getImportAssignment_0() { return cImportAssignment_0; }

		//[Import]
		public CrossReference getImportImportCrossReference_0_0() { return cImportImportCrossReference_0_0; }

		//ID
		public RuleCall getImportImportIDTerminalRuleCall_0_0_1() { return cImportImportIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//ref=[TopLevelSimpleType]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//[TopLevelSimpleType]
		public CrossReference getRefTopLevelSimpleTypeCrossReference_2_0() { return cRefTopLevelSimpleTypeCrossReference_2_0; }

		//ID
		public RuleCall getRefTopLevelSimpleTypeIDTerminalRuleCall_2_0_1() { return cRefTopLevelSimpleTypeIDTerminalRuleCall_2_0_1; }
	}

	public class ImportedTopLevelComplexTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportedTopLevelComplexTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cImportImportCrossReference_0_0 = (CrossReference)cImportAssignment_0.eContents().get(0);
		private final RuleCall cImportImportIDTerminalRuleCall_0_0_1 = (RuleCall)cImportImportCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefTopLevelComplexTypeCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefTopLevelComplexTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cRefTopLevelComplexTypeCrossReference_2_0.eContents().get(1);
		
		//ImportedTopLevelComplexTypeReference:
		//	^import=[Import] ":" ref=[TopLevelComplexType];
		public ParserRule getRule() { return rule; }

		//^import=[Import] ":" ref=[TopLevelComplexType]
		public Group getGroup() { return cGroup; }

		//^import=[Import]
		public Assignment getImportAssignment_0() { return cImportAssignment_0; }

		//[Import]
		public CrossReference getImportImportCrossReference_0_0() { return cImportImportCrossReference_0_0; }

		//ID
		public RuleCall getImportImportIDTerminalRuleCall_0_0_1() { return cImportImportIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//ref=[TopLevelComplexType]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//[TopLevelComplexType]
		public CrossReference getRefTopLevelComplexTypeCrossReference_2_0() { return cRefTopLevelComplexTypeCrossReference_2_0; }

		//ID
		public RuleCall getRefTopLevelComplexTypeIDTerminalRuleCall_2_0_1() { return cRefTopLevelComplexTypeIDTerminalRuleCall_2_0_1; }
	}

	public class ImportedReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportedReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportedTopLevelTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImportedTopLevelSimpleTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImportedTopLevelComplexTypeReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// only used to have the common super type in the generated Ecore model
		//ImportedReference:
		//	ImportedTopLevelTypeReference | ImportedTopLevelSimpleTypeReference | ImportedTopLevelComplexTypeReference;
		public ParserRule getRule() { return rule; }

		//ImportedTopLevelTypeReference | ImportedTopLevelSimpleTypeReference | ImportedTopLevelComplexTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//ImportedTopLevelTypeReference
		public RuleCall getImportedTopLevelTypeReferenceParserRuleCall_0() { return cImportedTopLevelTypeReferenceParserRuleCall_0; }

		//ImportedTopLevelSimpleTypeReference
		public RuleCall getImportedTopLevelSimpleTypeReferenceParserRuleCall_1() { return cImportedTopLevelSimpleTypeReferenceParserRuleCall_1; }

		//ImportedTopLevelComplexTypeReference
		public RuleCall getImportedTopLevelComplexTypeReferenceParserRuleCall_2() { return cImportedTopLevelComplexTypeReferenceParserRuleCall_2; }
	}

	public class EmbeddedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmbeddedType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmbeddedComplexTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEmbeddedSimpleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * +----------------+
		// * | embedded types |
		// * +----------------+
		// * /EmbeddedType:
		//	EmbeddedComplexType | EmbeddedSimpleType;
		public ParserRule getRule() { return rule; }

		//EmbeddedComplexType | EmbeddedSimpleType
		public Alternatives getAlternatives() { return cAlternatives; }

		//EmbeddedComplexType
		public RuleCall getEmbeddedComplexTypeParserRuleCall_0() { return cEmbeddedComplexTypeParserRuleCall_0; }

		//EmbeddedSimpleType
		public RuleCall getEmbeddedSimpleTypeParserRuleCall_1() { return cEmbeddedSimpleTypeParserRuleCall_1; }
	}

	public class EmbeddedComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmbeddedComplexType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmbeddedComplexTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComplexTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExtendsTopLevelComplexTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cExtendsAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EmbeddedComplexType:
		//	{EmbeddedComplexType} "complex-type" ("extends" extends=TopLevelComplexTypeReference)? "{" properties+=Property* "}";
		public ParserRule getRule() { return rule; }

		//{EmbeddedComplexType} "complex-type" ("extends" extends=TopLevelComplexTypeReference)? "{" properties+=Property* "}"
		public Group getGroup() { return cGroup; }

		//{EmbeddedComplexType}
		public Action getEmbeddedComplexTypeAction_0() { return cEmbeddedComplexTypeAction_0; }

		//"complex-type"
		public Keyword getComplexTypeKeyword_1() { return cComplexTypeKeyword_1; }

		//("extends" extends=TopLevelComplexTypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//extends=TopLevelComplexTypeReference
		public Assignment getExtendsAssignment_2_1() { return cExtendsAssignment_2_1; }

		//TopLevelComplexTypeReference
		public RuleCall getExtendsTopLevelComplexTypeReferenceParserRuleCall_2_1_0() { return cExtendsTopLevelComplexTypeReferenceParserRuleCall_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_4_0() { return cPropertiesPropertyParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EmbeddedSimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmbeddedSimpleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSimpleTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRestrictionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRestrictionRestrictionParserRuleCall_1_0 = (RuleCall)cRestrictionAssignment_1.eContents().get(0);
		private final Assignment cDocumentationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDocumentationDocumentationParserRuleCall_2_0 = (RuleCall)cDocumentationAssignment_2.eContents().get(0);
		
		//EmbeddedSimpleType:
		//	"simple-type" restriction=Restriction documentation=Documentation?;
		public ParserRule getRule() { return rule; }

		//"simple-type" restriction=Restriction documentation=Documentation?
		public Group getGroup() { return cGroup; }

		//"simple-type"
		public Keyword getSimpleTypeKeyword_0() { return cSimpleTypeKeyword_0; }

		//restriction=Restriction
		public Assignment getRestrictionAssignment_1() { return cRestrictionAssignment_1; }

		//Restriction
		public RuleCall getRestrictionRestrictionParserRuleCall_1_0() { return cRestrictionRestrictionParserRuleCall_1_0; }

		//documentation=Documentation?
		public Assignment getDocumentationAssignment_2() { return cDocumentationAssignment_2; }

		//Documentation
		public RuleCall getDocumentationDocumentationParserRuleCall_2_0() { return cDocumentationDocumentationParserRuleCall_2_0; }
	}

	public class ComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTopLevelComplexTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEmbeddedComplexTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// only used to have the common super type in the generated Ecore model
		//ComplexType:
		//	TopLevelComplexType | EmbeddedComplexType;
		public ParserRule getRule() { return rule; }

		//TopLevelComplexType | EmbeddedComplexType
		public Alternatives getAlternatives() { return cAlternatives; }

		//TopLevelComplexType
		public RuleCall getTopLevelComplexTypeParserRuleCall_0() { return cTopLevelComplexTypeParserRuleCall_0; }

		//EmbeddedComplexType
		public RuleCall getEmbeddedComplexTypeParserRuleCall_1() { return cEmbeddedComplexTypeParserRuleCall_1; }
	}

	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTopLevelSimpleTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEmbeddedSimpleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// only used to have the common super type in the generated Ecore model
		//SimpleType:
		//	TopLevelSimpleType | EmbeddedSimpleType;
		public ParserRule getRule() { return rule; }

		//TopLevelSimpleType | EmbeddedSimpleType
		public Alternatives getAlternatives() { return cAlternatives; }

		//TopLevelSimpleType
		public RuleCall getTopLevelSimpleTypeParserRuleCall_0() { return cTopLevelSimpleTypeParserRuleCall_0; }

		//EmbeddedSimpleType
		public RuleCall getEmbeddedSimpleTypeParserRuleCall_1() { return cEmbeddedSimpleTypeParserRuleCall_1; }
	}
	
	
	public class BuiltinTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltinType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDurationEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDurationDurationKeyword_0_0 = (Keyword)cDurationEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDateTimeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDateTimeDateTimeKeyword_1_0 = (Keyword)cDateTimeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTimeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTimeTimeKeyword_2_0 = (Keyword)cTimeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDateDateKeyword_3_0 = (Keyword)cDateEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cStringStringKeyword_4_0 = (Keyword)cStringEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDecimalEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDecimalDecimalKeyword_5_0 = (Keyword)cDecimalEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cIntegerIntegerKeyword_6_0 = (Keyword)cIntegerEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cPositiveIntegerEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cPositiveIntegerPositiveIntegerKeyword_7_0 = (Keyword)cPositiveIntegerEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cNonNegativeIntegerEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cNonNegativeIntegerNonNegativeIntegerKeyword_8_0 = (Keyword)cNonNegativeIntegerEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cTokenEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cTokenTokenKeyword_9_0 = (Keyword)cTokenEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cBase64BinaryEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cBase64BinaryBase64BinaryKeyword_10_0 = (Keyword)cBase64BinaryEnumLiteralDeclaration_10.eContents().get(0);
		
		/// *
		// * +---------------+
		// * | miscellaneous |
		// * +---------------+
		// * /// definitions of types built into XSD:
		//enum BuiltinType:
		//	duration | dateTime | time | date | string | decimal | integer | positiveInteger | nonNegativeInteger | token |
		//	base64Binary;
		public EnumRule getRule() { return rule; }

		//duration | dateTime | time | date | string | decimal | integer | positiveInteger | nonNegativeInteger | token |
		//base64Binary
		public Alternatives getAlternatives() { return cAlternatives; }

		//duration
		public EnumLiteralDeclaration getDurationEnumLiteralDeclaration_0() { return cDurationEnumLiteralDeclaration_0; }

		//"duration"
		public Keyword getDurationDurationKeyword_0_0() { return cDurationDurationKeyword_0_0; }

		//dateTime
		public EnumLiteralDeclaration getDateTimeEnumLiteralDeclaration_1() { return cDateTimeEnumLiteralDeclaration_1; }

		//"dateTime"
		public Keyword getDateTimeDateTimeKeyword_1_0() { return cDateTimeDateTimeKeyword_1_0; }

		//time
		public EnumLiteralDeclaration getTimeEnumLiteralDeclaration_2() { return cTimeEnumLiteralDeclaration_2; }

		//"time"
		public Keyword getTimeTimeKeyword_2_0() { return cTimeTimeKeyword_2_0; }

		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_3() { return cDateEnumLiteralDeclaration_3; }

		//"date"
		public Keyword getDateDateKeyword_3_0() { return cDateDateKeyword_3_0; }

		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_4() { return cStringEnumLiteralDeclaration_4; }

		//"string"
		public Keyword getStringStringKeyword_4_0() { return cStringStringKeyword_4_0; }

		//decimal
		public EnumLiteralDeclaration getDecimalEnumLiteralDeclaration_5() { return cDecimalEnumLiteralDeclaration_5; }

		//"decimal"
		public Keyword getDecimalDecimalKeyword_5_0() { return cDecimalDecimalKeyword_5_0; }

		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_6() { return cIntegerEnumLiteralDeclaration_6; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_6_0() { return cIntegerIntegerKeyword_6_0; }

		//positiveInteger
		public EnumLiteralDeclaration getPositiveIntegerEnumLiteralDeclaration_7() { return cPositiveIntegerEnumLiteralDeclaration_7; }

		//"positiveInteger"
		public Keyword getPositiveIntegerPositiveIntegerKeyword_7_0() { return cPositiveIntegerPositiveIntegerKeyword_7_0; }

		//nonNegativeInteger
		public EnumLiteralDeclaration getNonNegativeIntegerEnumLiteralDeclaration_8() { return cNonNegativeIntegerEnumLiteralDeclaration_8; }

		//"nonNegativeInteger"
		public Keyword getNonNegativeIntegerNonNegativeIntegerKeyword_8_0() { return cNonNegativeIntegerNonNegativeIntegerKeyword_8_0; }

		//token
		public EnumLiteralDeclaration getTokenEnumLiteralDeclaration_9() { return cTokenEnumLiteralDeclaration_9; }

		//"token"
		public Keyword getTokenTokenKeyword_9_0() { return cTokenTokenKeyword_9_0; }

		//base64Binary
		public EnumLiteralDeclaration getBase64BinaryEnumLiteralDeclaration_10() { return cBase64BinaryEnumLiteralDeclaration_10; }

		//"base64Binary"
		public Keyword getBase64BinaryBase64BinaryKeyword_10_0() { return cBase64BinaryBase64BinaryKeyword_10_0; }
	}
	
	private SchemaElements pSchema;
	private ImportElements pImport;
	private TopLevelDefinitionElements pTopLevelDefinition;
	private TopLevelTypeElements pTopLevelType;
	private TopLevelElementElements pTopLevelElement;
	private TopLevelSimpleTypeElements pTopLevelSimpleType;
	private RestrictionElements pRestriction;
	private FacetElements pFacet;
	private EnumerationFacetElements pEnumerationFacet;
	private EnumerationLiteralElements pEnumerationLiteral;
	private MaxLengthFacetElements pMaxLengthFacet;
	private PatternFacetElements pPatternFacet;
	private TerminalRule tPATTERN_STRING;
	private RangeFacetElements pRangeFacet;
	private LengthFacetElements pLengthFacet;
	private DocumentationElements pDocumentation;
	private TopLevelComplexTypeElements pTopLevelComplexType;
	private PropertyElements pProperty;
	private ElementElements pElement;
	private AttributeElements pAttribute;
	private MultiplicityElements pMultiplicity;
	private NamedTypeReferenceElements pNamedTypeReference;
	private NonComplexTypeReferenceElements pNonComplexTypeReference;
	private BuiltinTypeReferenceElements pBuiltinTypeReference;
	private TopLevelTypeReferenceElements pTopLevelTypeReference;
	private TopLevelComplexTypeReferenceElements pTopLevelComplexTypeReference;
	private TopLevelSimpleTypeReferenceElements pTopLevelSimpleTypeReference;
	private DirectTopLevelTypeReferenceElements pDirectTopLevelTypeReference;
	private DirectTopLevelSimpleTypeReferenceElements pDirectTopLevelSimpleTypeReference;
	private DirectTopLevelComplexTypeReferenceElements pDirectTopLevelComplexTypeReference;
	private ImportedTopLevelTypeReferenceElements pImportedTopLevelTypeReference;
	private ImportedTopLevelSimpleTypeReferenceElements pImportedTopLevelSimpleTypeReference;
	private ImportedTopLevelComplexTypeReferenceElements pImportedTopLevelComplexTypeReference;
	private ImportedReferenceElements pImportedReference;
	private EmbeddedTypeElements pEmbeddedType;
	private EmbeddedComplexTypeElements pEmbeddedComplexType;
	private EmbeddedSimpleTypeElements pEmbeddedSimpleType;
	private ComplexTypeElements pComplexType;
	private SimpleTypeElements pSimpleType;
	private BuiltinTypeElements unknownRuleBuiltinType;
	private TerminalRule tID;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public XsdLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// root:
	//Schema:
	//	"schema" name= // name is mainly used for file generation
	//	ID "namespace" nsURI= // URI
	//	STRING imports+=Import* definitions+=TopLevelDefinition*;
	public SchemaElements getSchemaAccess() {
		return (pSchema != null) ? pSchema : (pSchema = new SchemaElements());
	}
	
	public ParserRule getSchemaRule() {
		return getSchemaAccess().getRule();
	}

	//Import:
	//	"import" importURI=STRING "as" nsPrefix=ID;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//TopLevelDefinition:
	//	TopLevelType | TopLevelElement;
	public TopLevelDefinitionElements getTopLevelDefinitionAccess() {
		return (pTopLevelDefinition != null) ? pTopLevelDefinition : (pTopLevelDefinition = new TopLevelDefinitionElements());
	}
	
	public ParserRule getTopLevelDefinitionRule() {
		return getTopLevelDefinitionAccess().getRule();
	}

	//TopLevelType:
	//	TopLevelSimpleType | TopLevelComplexType;
	public TopLevelTypeElements getTopLevelTypeAccess() {
		return (pTopLevelType != null) ? pTopLevelType : (pTopLevelType = new TopLevelTypeElements());
	}
	
	public ParserRule getTopLevelTypeRule() {
		return getTopLevelTypeAccess().getRule();
	}

	//TopLevelElement:
	//	"element" name=ID ("->" typeRef=NamedTypeReference | ":" embeddedTypeDef=EmbeddedType);
	public TopLevelElementElements getTopLevelElementAccess() {
		return (pTopLevelElement != null) ? pTopLevelElement : (pTopLevelElement = new TopLevelElementElements());
	}
	
	public ParserRule getTopLevelElementRule() {
		return getTopLevelElementAccess().getRule();
	}

	/// *
	// * +--------------+
	// * | simple types |
	// * +--------------+
	// * /TopLevelSimpleType:
	//	"simple-type" name=ID restriction=Restriction? documentation=Documentation?;
	public TopLevelSimpleTypeElements getTopLevelSimpleTypeAccess() {
		return (pTopLevelSimpleType != null) ? pTopLevelSimpleType : (pTopLevelSimpleType = new TopLevelSimpleTypeElements());
	}
	
	public ParserRule getTopLevelSimpleTypeRule() {
		return getTopLevelSimpleTypeAccess().getRule();
	}

	//Restriction:
	//	"[" typeRef=NonComplexTypeReference "]" ":" facets+=Facet+;
	public RestrictionElements getRestrictionAccess() {
		return (pRestriction != null) ? pRestriction : (pRestriction = new RestrictionElements());
	}
	
	public ParserRule getRestrictionRule() {
		return getRestrictionAccess().getRule();
	}

	//Facet:
	//	EnumerationFacet | MaxLengthFacet | PatternFacet | RangeFacet | LengthFacet;
	public FacetElements getFacetAccess() {
		return (pFacet != null) ? pFacet : (pFacet = new FacetElements());
	}
	
	public ParserRule getFacetRule() {
		return getFacetAccess().getRule();
	}

	//EnumerationFacet:
	//	"enumeration" "{" literals+=EnumerationLiteral+ "}";
	public EnumerationFacetElements getEnumerationFacetAccess() {
		return (pEnumerationFacet != null) ? pEnumerationFacet : (pEnumerationFacet = new EnumerationFacetElements());
	}
	
	public ParserRule getEnumerationFacetRule() {
		return getEnumerationFacetAccess().getRule();
	}

	//EnumerationLiteral:
	//	value=(ID | STRING) ("::" annotation=STRING)?;
	public EnumerationLiteralElements getEnumerationLiteralAccess() {
		return (pEnumerationLiteral != null) ? pEnumerationLiteral : (pEnumerationLiteral = new EnumerationLiteralElements());
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}

	//MaxLengthFacet:
	//	"maxLength" "=" maxLength=INT;
	public MaxLengthFacetElements getMaxLengthFacetAccess() {
		return (pMaxLengthFacet != null) ? pMaxLengthFacet : (pMaxLengthFacet = new MaxLengthFacetElements());
	}
	
	public ParserRule getMaxLengthFacetRule() {
		return getMaxLengthFacetAccess().getRule();
	}

	//// validation: typeRef must resolve to the built-in string type
	//PatternFacet:
	//	"pattern" "=" pattern=PATTERN_STRING;
	public PatternFacetElements getPatternFacetAccess() {
		return (pPatternFacet != null) ? pPatternFacet : (pPatternFacet = new PatternFacetElements());
	}
	
	public ParserRule getPatternFacetRule() {
		return getPatternFacetAccess().getRule();
	}

	//terminal PATTERN_STRING:
	//	"/" ("\\" "/" | !"/")* "/";
	public TerminalRule getPATTERN_STRINGRule() {
		return (tPATTERN_STRING != null) ? tPATTERN_STRING : (tPATTERN_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PATTERN_STRING"));
	} 

	//RangeFacet:
	//	"range" "=" lower=INT ".." upper=INT;
	public RangeFacetElements getRangeFacetAccess() {
		return (pRangeFacet != null) ? pRangeFacet : (pRangeFacet = new RangeFacetElements());
	}
	
	public ParserRule getRangeFacetRule() {
		return getRangeFacetAccess().getRule();
	}

	//LengthFacet:
	//	"length" "=" length=INT;
	public LengthFacetElements getLengthFacetAccess() {
		return (pLengthFacet != null) ? pLengthFacet : (pLengthFacet = new LengthFacetElements());
	}
	
	public ParserRule getLengthFacetRule() {
		return getLengthFacetAccess().getRule();
	}

	//Documentation:
	//	"::" text=STRING;
	public DocumentationElements getDocumentationAccess() {
		return (pDocumentation != null) ? pDocumentation : (pDocumentation = new DocumentationElements());
	}
	
	public ParserRule getDocumentationRule() {
		return getDocumentationAccess().getRule();
	}

	/// *
	// * +---------------+
	// * | complex types |
	// * +---------------+
	// * /TopLevelComplexType:
	//	abstract?="abstract"? "complex-type" name=ID ("extends" extends=TopLevelComplexTypeReference)? "{"
	//	properties+=Property* "}" ("documentation:" documentation=STRING)?;
	public TopLevelComplexTypeElements getTopLevelComplexTypeAccess() {
		return (pTopLevelComplexType != null) ? pTopLevelComplexType : (pTopLevelComplexType = new TopLevelComplexTypeElements());
	}
	
	public ParserRule getTopLevelComplexTypeRule() {
		return getTopLevelComplexTypeAccess().getRule();
	}

	//Property:
	//	Element | Attribute;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Element:
	//	name=ID ("->" typeRef=NamedTypeReference | ":" embeddedTypeDef=EmbeddedType) multiplicity=Multiplicity?;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//Attribute:
	//	required?="required"? "@" name=ID "->" typeRef=NonComplexTypeReference;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Multiplicity: // make sure this element always gets created
	//	{Multiplicity} "[" (lower=INT "..") (upper=INT | unbounded?="*") "]";
	public MultiplicityElements getMultiplicityAccess() {
		return (pMultiplicity != null) ? pMultiplicity : (pMultiplicity = new MultiplicityElements());
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}

	//// no Multiplicity (i.e., multiplicity=null) means: [1], i.e. required
	/// *
	// * +------------------+
	// * | type referencing |
	// * +------------------+
	// * /NamedTypeReference:
	//	TopLevelTypeReference | BuiltinTypeReference;
	public NamedTypeReferenceElements getNamedTypeReferenceAccess() {
		return (pNamedTypeReference != null) ? pNamedTypeReference : (pNamedTypeReference = new NamedTypeReferenceElements());
	}
	
	public ParserRule getNamedTypeReferenceRule() {
		return getNamedTypeReferenceAccess().getRule();
	}

	//NonComplexTypeReference:
	//	TopLevelSimpleTypeReference | BuiltinTypeReference;
	public NonComplexTypeReferenceElements getNonComplexTypeReferenceAccess() {
		return (pNonComplexTypeReference != null) ? pNonComplexTypeReference : (pNonComplexTypeReference = new NonComplexTypeReferenceElements());
	}
	
	public ParserRule getNonComplexTypeReferenceRule() {
		return getNonComplexTypeReferenceAccess().getRule();
	}

	//BuiltinTypeReference:
	//	builtin=BuiltinType;
	public BuiltinTypeReferenceElements getBuiltinTypeReferenceAccess() {
		return (pBuiltinTypeReference != null) ? pBuiltinTypeReference : (pBuiltinTypeReference = new BuiltinTypeReferenceElements());
	}
	
	public ParserRule getBuiltinTypeReferenceRule() {
		return getBuiltinTypeReferenceAccess().getRule();
	}

	//TopLevelTypeReference:
	//	DirectTopLevelTypeReference | ImportedTopLevelTypeReference;
	public TopLevelTypeReferenceElements getTopLevelTypeReferenceAccess() {
		return (pTopLevelTypeReference != null) ? pTopLevelTypeReference : (pTopLevelTypeReference = new TopLevelTypeReferenceElements());
	}
	
	public ParserRule getTopLevelTypeReferenceRule() {
		return getTopLevelTypeReferenceAccess().getRule();
	}

	//TopLevelComplexTypeReference:
	//	DirectTopLevelComplexTypeReference | ImportedTopLevelComplexTypeReference;
	public TopLevelComplexTypeReferenceElements getTopLevelComplexTypeReferenceAccess() {
		return (pTopLevelComplexTypeReference != null) ? pTopLevelComplexTypeReference : (pTopLevelComplexTypeReference = new TopLevelComplexTypeReferenceElements());
	}
	
	public ParserRule getTopLevelComplexTypeReferenceRule() {
		return getTopLevelComplexTypeReferenceAccess().getRule();
	}

	//TopLevelSimpleTypeReference:
	//	DirectTopLevelSimpleTypeReference | ImportedTopLevelSimpleTypeReference;
	public TopLevelSimpleTypeReferenceElements getTopLevelSimpleTypeReferenceAccess() {
		return (pTopLevelSimpleTypeReference != null) ? pTopLevelSimpleTypeReference : (pTopLevelSimpleTypeReference = new TopLevelSimpleTypeReferenceElements());
	}
	
	public ParserRule getTopLevelSimpleTypeReferenceRule() {
		return getTopLevelSimpleTypeReferenceAccess().getRule();
	}

	//DirectTopLevelTypeReference:
	//	ref=[TopLevelType];
	public DirectTopLevelTypeReferenceElements getDirectTopLevelTypeReferenceAccess() {
		return (pDirectTopLevelTypeReference != null) ? pDirectTopLevelTypeReference : (pDirectTopLevelTypeReference = new DirectTopLevelTypeReferenceElements());
	}
	
	public ParserRule getDirectTopLevelTypeReferenceRule() {
		return getDirectTopLevelTypeReferenceAccess().getRule();
	}

	//DirectTopLevelSimpleTypeReference:
	//	ref=[TopLevelSimpleType];
	public DirectTopLevelSimpleTypeReferenceElements getDirectTopLevelSimpleTypeReferenceAccess() {
		return (pDirectTopLevelSimpleTypeReference != null) ? pDirectTopLevelSimpleTypeReference : (pDirectTopLevelSimpleTypeReference = new DirectTopLevelSimpleTypeReferenceElements());
	}
	
	public ParserRule getDirectTopLevelSimpleTypeReferenceRule() {
		return getDirectTopLevelSimpleTypeReferenceAccess().getRule();
	}

	//DirectTopLevelComplexTypeReference:
	//	ref=[TopLevelComplexType];
	public DirectTopLevelComplexTypeReferenceElements getDirectTopLevelComplexTypeReferenceAccess() {
		return (pDirectTopLevelComplexTypeReference != null) ? pDirectTopLevelComplexTypeReference : (pDirectTopLevelComplexTypeReference = new DirectTopLevelComplexTypeReferenceElements());
	}
	
	public ParserRule getDirectTopLevelComplexTypeReferenceRule() {
		return getDirectTopLevelComplexTypeReferenceAccess().getRule();
	}

	//ImportedTopLevelTypeReference:
	//	^import=[Import] ":" ref=[TopLevelType];
	public ImportedTopLevelTypeReferenceElements getImportedTopLevelTypeReferenceAccess() {
		return (pImportedTopLevelTypeReference != null) ? pImportedTopLevelTypeReference : (pImportedTopLevelTypeReference = new ImportedTopLevelTypeReferenceElements());
	}
	
	public ParserRule getImportedTopLevelTypeReferenceRule() {
		return getImportedTopLevelTypeReferenceAccess().getRule();
	}

	//ImportedTopLevelSimpleTypeReference:
	//	^import=[Import] ":" ref=[TopLevelSimpleType];
	public ImportedTopLevelSimpleTypeReferenceElements getImportedTopLevelSimpleTypeReferenceAccess() {
		return (pImportedTopLevelSimpleTypeReference != null) ? pImportedTopLevelSimpleTypeReference : (pImportedTopLevelSimpleTypeReference = new ImportedTopLevelSimpleTypeReferenceElements());
	}
	
	public ParserRule getImportedTopLevelSimpleTypeReferenceRule() {
		return getImportedTopLevelSimpleTypeReferenceAccess().getRule();
	}

	//ImportedTopLevelComplexTypeReference:
	//	^import=[Import] ":" ref=[TopLevelComplexType];
	public ImportedTopLevelComplexTypeReferenceElements getImportedTopLevelComplexTypeReferenceAccess() {
		return (pImportedTopLevelComplexTypeReference != null) ? pImportedTopLevelComplexTypeReference : (pImportedTopLevelComplexTypeReference = new ImportedTopLevelComplexTypeReferenceElements());
	}
	
	public ParserRule getImportedTopLevelComplexTypeReferenceRule() {
		return getImportedTopLevelComplexTypeReferenceAccess().getRule();
	}

	//// only used to have the common super type in the generated Ecore model
	//ImportedReference:
	//	ImportedTopLevelTypeReference | ImportedTopLevelSimpleTypeReference | ImportedTopLevelComplexTypeReference;
	public ImportedReferenceElements getImportedReferenceAccess() {
		return (pImportedReference != null) ? pImportedReference : (pImportedReference = new ImportedReferenceElements());
	}
	
	public ParserRule getImportedReferenceRule() {
		return getImportedReferenceAccess().getRule();
	}

	/// *
	// * +----------------+
	// * | embedded types |
	// * +----------------+
	// * /EmbeddedType:
	//	EmbeddedComplexType | EmbeddedSimpleType;
	public EmbeddedTypeElements getEmbeddedTypeAccess() {
		return (pEmbeddedType != null) ? pEmbeddedType : (pEmbeddedType = new EmbeddedTypeElements());
	}
	
	public ParserRule getEmbeddedTypeRule() {
		return getEmbeddedTypeAccess().getRule();
	}

	//EmbeddedComplexType:
	//	{EmbeddedComplexType} "complex-type" ("extends" extends=TopLevelComplexTypeReference)? "{" properties+=Property* "}";
	public EmbeddedComplexTypeElements getEmbeddedComplexTypeAccess() {
		return (pEmbeddedComplexType != null) ? pEmbeddedComplexType : (pEmbeddedComplexType = new EmbeddedComplexTypeElements());
	}
	
	public ParserRule getEmbeddedComplexTypeRule() {
		return getEmbeddedComplexTypeAccess().getRule();
	}

	//EmbeddedSimpleType:
	//	"simple-type" restriction=Restriction documentation=Documentation?;
	public EmbeddedSimpleTypeElements getEmbeddedSimpleTypeAccess() {
		return (pEmbeddedSimpleType != null) ? pEmbeddedSimpleType : (pEmbeddedSimpleType = new EmbeddedSimpleTypeElements());
	}
	
	public ParserRule getEmbeddedSimpleTypeRule() {
		return getEmbeddedSimpleTypeAccess().getRule();
	}

	//// only used to have the common super type in the generated Ecore model
	//ComplexType:
	//	TopLevelComplexType | EmbeddedComplexType;
	public ComplexTypeElements getComplexTypeAccess() {
		return (pComplexType != null) ? pComplexType : (pComplexType = new ComplexTypeElements());
	}
	
	public ParserRule getComplexTypeRule() {
		return getComplexTypeAccess().getRule();
	}

	//// only used to have the common super type in the generated Ecore model
	//SimpleType:
	//	TopLevelSimpleType | EmbeddedSimpleType;
	public SimpleTypeElements getSimpleTypeAccess() {
		return (pSimpleType != null) ? pSimpleType : (pSimpleType = new SimpleTypeElements());
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	/// *
	// * +---------------+
	// * | miscellaneous |
	// * +---------------+
	// * /// definitions of types built into XSD:
	//enum BuiltinType:
	//	duration | dateTime | time | date | string | decimal | integer | positiveInteger | nonNegativeInteger | token |
	//	base64Binary;
	public BuiltinTypeElements getBuiltinTypeAccess() {
		return (unknownRuleBuiltinType != null) ? unknownRuleBuiltinType : (unknownRuleBuiltinType = new BuiltinTypeElements());
	}
	
	public EnumRule getBuiltinTypeRule() {
		return getBuiltinTypeAccess().getRule();
	}

	//// overwrite terminal ID rule to allow hyphens inside IDs:
	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "_" | "-" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
