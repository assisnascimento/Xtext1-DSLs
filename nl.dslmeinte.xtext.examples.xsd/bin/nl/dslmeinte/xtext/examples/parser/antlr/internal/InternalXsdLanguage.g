/*
* generated by Xtext
*/
grammar InternalXsdLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package nl.dslmeinte.xtext.examples.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.dslmeinte.xtext.examples.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import nl.dslmeinte.xtext.examples.services.XsdLanguageGrammarAccess;

}

@parser::members {

 	private XsdLanguageGrammarAccess grammarAccess;
 	
    public InternalXsdLanguageParser(TokenStream input, IAstFactory factory, XsdLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("nl/dslmeinte/xtext/examples/parser/antlr/internal/InternalXsdLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Schema";	
   	}
   	
   	@Override
   	protected XsdLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSchema
entryRuleSchema returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSchemaRule(), currentNode); }
	 iv_ruleSchema=ruleSchema 
	 { $current=$iv_ruleSchema.current; } 
	 EOF 
;

// Rule Schema
ruleSchema returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'schema' 
    {
        createLeafNode(grammarAccess.getSchemaAccess().getSchemaKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSchemaAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemaRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'namespace' 
    {
        createLeafNode(grammarAccess.getSchemaAccess().getNamespaceKeyword_2(), null); 
    }
(
(
		lv_nsURI_3_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getSchemaAccess().getNsURISTRINGTerminalRuleCall_3_0(), "nsURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemaRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"nsURI",
	        		lv_nsURI_3_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSchemaAccess().getImportsImportParserRuleCall_4_0(), currentNode); 
	    }
		lv_imports_4_0=ruleImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemaRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_4_0, 
	        		"Import", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSchemaAccess().getDefinitionsTopLevelDefinitionParserRuleCall_5_0(), currentNode); 
	    }
		lv_definitions_5_0=ruleTopLevelDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSchemaRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"definitions",
	        		lv_definitions_5_0, 
	        		"TopLevelDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_0(), null); 
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), "importURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importURI",
	        		lv_importURI_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'as' 
    {
        createLeafNode(grammarAccess.getImportAccess().getAsKeyword_2(), null); 
    }
(
(
		lv_nsPrefix_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getImportAccess().getNsPrefixIDTerminalRuleCall_3_0(), "nsPrefix"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"nsPrefix",
	        		lv_nsPrefix_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleTopLevelDefinition
entryRuleTopLevelDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTopLevelDefinitionRule(), currentNode); }
	 iv_ruleTopLevelDefinition=ruleTopLevelDefinition 
	 { $current=$iv_ruleTopLevelDefinition.current; } 
	 EOF 
;

// Rule TopLevelDefinition
ruleTopLevelDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTopLevelDefinitionAccess().getTopLevelTypeParserRuleCall_0(), currentNode); 
    }
    this_TopLevelType_0=ruleTopLevelType
    { 
        $current = $this_TopLevelType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTopLevelDefinitionAccess().getTopLevelElementParserRuleCall_1(), currentNode); 
    }
    this_TopLevelElement_1=ruleTopLevelElement
    { 
        $current = $this_TopLevelElement_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTopLevelType
entryRuleTopLevelType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTopLevelTypeRule(), currentNode); }
	 iv_ruleTopLevelType=ruleTopLevelType 
	 { $current=$iv_ruleTopLevelType.current; } 
	 EOF 
;

// Rule TopLevelType
ruleTopLevelType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTopLevelTypeAccess().getTopLevelSimpleTypeParserRuleCall_0(), currentNode); 
    }
    this_TopLevelSimpleType_0=ruleTopLevelSimpleType
    { 
        $current = $this_TopLevelSimpleType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTopLevelTypeAccess().getTopLevelComplexTypeParserRuleCall_1(), currentNode); 
    }
    this_TopLevelComplexType_1=ruleTopLevelComplexType
    { 
        $current = $this_TopLevelComplexType_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTopLevelElement
entryRuleTopLevelElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTopLevelElementRule(), currentNode); }
	 iv_ruleTopLevelElement=ruleTopLevelElement 
	 { $current=$iv_ruleTopLevelElement.current; } 
	 EOF 
;

// Rule TopLevelElement
ruleTopLevelElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'element' 
    {
        createLeafNode(grammarAccess.getTopLevelElementAccess().getElementKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTopLevelElementAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTopLevelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	'->' 
    {
        createLeafNode(grammarAccess.getTopLevelElementAccess().getHyphenMinusGreaterThanSignKeyword_2_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTopLevelElementAccess().getTypeRefNamedTypeReferenceParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_typeRef_3_0=ruleNamedTypeReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTopLevelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeRef",
	        		lv_typeRef_3_0, 
	        		"NamedTypeReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	':' 
    {
        createLeafNode(grammarAccess.getTopLevelElementAccess().getColonKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTopLevelElementAccess().getEmbeddedTypeDefEmbeddedTypeParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_embeddedTypeDef_5_0=ruleEmbeddedType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTopLevelElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"embeddedTypeDef",
	        		lv_embeddedTypeDef_5_0, 
	        		"EmbeddedType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))))
;





// Entry rule entryRuleTopLevelSimpleType
entryRuleTopLevelSimpleType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTopLevelSimpleTypeRule(), currentNode); }
	 iv_ruleTopLevelSimpleType=ruleTopLevelSimpleType 
	 { $current=$iv_ruleTopLevelSimpleType.current; } 
	 EOF 
;

// Rule TopLevelSimpleType
ruleTopLevelSimpleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'simple-type' 
    {
        createLeafNode(grammarAccess.getTopLevelSimpleTypeAccess().getSimpleTypeKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTopLevelSimpleTypeAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTopLevelSimpleTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTopLevelSimpleTypeAccess().getRestrictionRestrictionParserRuleCall_2_0(), currentNode); 
	    }
		lv_restriction_2_0=ruleRestriction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTopLevelSimpleTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"restriction",
	        		lv_restriction_2_0, 
	        		"Restriction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTopLevelSimpleTypeAccess().getDocumentationDocumentationParserRuleCall_3_0(), currentNode); 
	    }
		lv_documentation_3_0=ruleDocumentation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTopLevelSimpleTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"documentation",
	        		lv_documentation_3_0, 
	        		"Documentation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleRestriction
entryRuleRestriction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRestrictionRule(), currentNode); }
	 iv_ruleRestriction=ruleRestriction 
	 { $current=$iv_ruleRestriction.current; } 
	 EOF 
;

// Rule Restriction
ruleRestriction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'[' 
    {
        createLeafNode(grammarAccess.getRestrictionAccess().getLeftSquareBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRestrictionAccess().getTypeRefNonComplexTypeReferenceParserRuleCall_1_0(), currentNode); 
	    }
		lv_typeRef_1_0=ruleNonComplexTypeReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRestrictionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeRef",
	        		lv_typeRef_1_0, 
	        		"NonComplexTypeReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getRestrictionAccess().getRightSquareBracketKeyword_2(), null); 
    }
	':' 
    {
        createLeafNode(grammarAccess.getRestrictionAccess().getColonKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRestrictionAccess().getFacetsFacetParserRuleCall_4_0(), currentNode); 
	    }
		lv_facets_4_0=ruleFacet		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRestrictionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"facets",
	        		lv_facets_4_0, 
	        		"Facet", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleFacet
entryRuleFacet returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFacetRule(), currentNode); }
	 iv_ruleFacet=ruleFacet 
	 { $current=$iv_ruleFacet.current; } 
	 EOF 
;

// Rule Facet
ruleFacet returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getFacetAccess().getEnumerationFacetParserRuleCall_0(), currentNode); 
    }
    this_EnumerationFacet_0=ruleEnumerationFacet
    { 
        $current = $this_EnumerationFacet_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getFacetAccess().getMaxLengthFacetParserRuleCall_1(), currentNode); 
    }
    this_MaxLengthFacet_1=ruleMaxLengthFacet
    { 
        $current = $this_MaxLengthFacet_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getFacetAccess().getPatternFacetParserRuleCall_2(), currentNode); 
    }
    this_PatternFacet_2=rulePatternFacet
    { 
        $current = $this_PatternFacet_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getFacetAccess().getRangeFacetParserRuleCall_3(), currentNode); 
    }
    this_RangeFacet_3=ruleRangeFacet
    { 
        $current = $this_RangeFacet_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getFacetAccess().getLengthFacetParserRuleCall_4(), currentNode); 
    }
    this_LengthFacet_4=ruleLengthFacet
    { 
        $current = $this_LengthFacet_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleEnumerationFacet
entryRuleEnumerationFacet returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumerationFacetRule(), currentNode); }
	 iv_ruleEnumerationFacet=ruleEnumerationFacet 
	 { $current=$iv_ruleEnumerationFacet.current; } 
	 EOF 
;

// Rule EnumerationFacet
ruleEnumerationFacet returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'enumeration' 
    {
        createLeafNode(grammarAccess.getEnumerationFacetAccess().getEnumerationKeyword_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getEnumerationFacetAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEnumerationFacetAccess().getLiteralsEnumerationLiteralParserRuleCall_2_0(), currentNode); 
	    }
		lv_literals_2_0=ruleEnumerationLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationFacetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"literals",
	        		lv_literals_2_0, 
	        		"EnumerationLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+	'}' 
    {
        createLeafNode(grammarAccess.getEnumerationFacetAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleEnumerationLiteral
entryRuleEnumerationLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumerationLiteralRule(), currentNode); }
	 iv_ruleEnumerationLiteral=ruleEnumerationLiteral 
	 { $current=$iv_ruleEnumerationLiteral.current; } 
	 EOF 
;

// Rule EnumerationLiteral
ruleEnumerationLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
(
		lv_value_0_1=RULE_ID
		{
			createLeafNode(grammarAccess.getEnumerationLiteralAccess().getValueIDTerminalRuleCall_0_0_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_1, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_value_0_2=RULE_STRING
		{
			createLeafNode(grammarAccess.getEnumerationLiteralAccess().getValueSTRINGTerminalRuleCall_0_0_1(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_2, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	'::' 
    {
        createLeafNode(grammarAccess.getEnumerationLiteralAccess().getColonColonKeyword_1_0(), null); 
    }
(
(
		lv_annotation_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getEnumerationLiteralAccess().getAnnotationSTRINGTerminalRuleCall_1_1_0(), "annotation"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumerationLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"annotation",
	        		lv_annotation_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleMaxLengthFacet
entryRuleMaxLengthFacet returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMaxLengthFacetRule(), currentNode); }
	 iv_ruleMaxLengthFacet=ruleMaxLengthFacet 
	 { $current=$iv_ruleMaxLengthFacet.current; } 
	 EOF 
;

// Rule MaxLengthFacet
ruleMaxLengthFacet returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'maxLength' 
    {
        createLeafNode(grammarAccess.getMaxLengthFacetAccess().getMaxLengthKeyword_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getMaxLengthFacetAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		lv_maxLength_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getMaxLengthFacetAccess().getMaxLengthINTTerminalRuleCall_2_0(), "maxLength"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMaxLengthFacetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"maxLength",
	        		lv_maxLength_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRulePatternFacet
entryRulePatternFacet returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPatternFacetRule(), currentNode); }
	 iv_rulePatternFacet=rulePatternFacet 
	 { $current=$iv_rulePatternFacet.current; } 
	 EOF 
;

// Rule PatternFacet
rulePatternFacet returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'pattern' 
    {
        createLeafNode(grammarAccess.getPatternFacetAccess().getPatternKeyword_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getPatternFacetAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		lv_pattern_2_0=RULE_PATTERN_STRING
		{
			createLeafNode(grammarAccess.getPatternFacetAccess().getPatternPATTERN_STRINGTerminalRuleCall_2_0(), "pattern"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPatternFacetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"pattern",
	        		lv_pattern_2_0, 
	        		"PATTERN_STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleRangeFacet
entryRuleRangeFacet returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRangeFacetRule(), currentNode); }
	 iv_ruleRangeFacet=ruleRangeFacet 
	 { $current=$iv_ruleRangeFacet.current; } 
	 EOF 
;

// Rule RangeFacet
ruleRangeFacet returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'range' 
    {
        createLeafNode(grammarAccess.getRangeFacetAccess().getRangeKeyword_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getRangeFacetAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		lv_lower_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getRangeFacetAccess().getLowerINTTerminalRuleCall_2_0(), "lower"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRangeFacetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'..' 
    {
        createLeafNode(grammarAccess.getRangeFacetAccess().getFullStopFullStopKeyword_3(), null); 
    }
(
(
		lv_upper_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getRangeFacetAccess().getUpperINTTerminalRuleCall_4_0(), "upper"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRangeFacetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleLengthFacet
entryRuleLengthFacet returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLengthFacetRule(), currentNode); }
	 iv_ruleLengthFacet=ruleLengthFacet 
	 { $current=$iv_ruleLengthFacet.current; } 
	 EOF 
;

// Rule LengthFacet
ruleLengthFacet returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'length' 
    {
        createLeafNode(grammarAccess.getLengthFacetAccess().getLengthKeyword_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getLengthFacetAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		lv_length_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getLengthFacetAccess().getLengthINTTerminalRuleCall_2_0(), "length"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLengthFacetRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"length",
	        		lv_length_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleDocumentation
entryRuleDocumentation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDocumentationRule(), currentNode); }
	 iv_ruleDocumentation=ruleDocumentation 
	 { $current=$iv_ruleDocumentation.current; } 
	 EOF 
;

// Rule Documentation
ruleDocumentation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'::' 
    {
        createLeafNode(grammarAccess.getDocumentationAccess().getColonColonKeyword_0(), null); 
    }
(
(
		lv_text_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getDocumentationAccess().getTextSTRINGTerminalRuleCall_1_0(), "text"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"text",
	        		lv_text_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleTopLevelComplexType
entryRuleTopLevelComplexType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTopLevelComplexTypeRule(), currentNode); }
	 iv_ruleTopLevelComplexType=ruleTopLevelComplexType 
	 { $current=$iv_ruleTopLevelComplexType.current; } 
	 EOF 
;

// Rule TopLevelComplexType
ruleTopLevelComplexType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_abstract_0_0=	'abstract' 
    {
        createLeafNode(grammarAccess.getTopLevelComplexTypeAccess().getAbstractAbstractKeyword_0_0(), "abstract"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTopLevelComplexTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "abstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'complex-type' 
    {
        createLeafNode(grammarAccess.getTopLevelComplexTypeAccess().getComplexTypeKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTopLevelComplexTypeAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTopLevelComplexTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'extends' 
    {
        createLeafNode(grammarAccess.getTopLevelComplexTypeAccess().getExtendsKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTopLevelComplexTypeAccess().getExtendsTopLevelComplexTypeReferenceParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_extends_4_0=ruleTopLevelComplexTypeReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTopLevelComplexTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"extends",
	        		lv_extends_4_0, 
	        		"TopLevelComplexTypeReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'{' 
    {
        createLeafNode(grammarAccess.getTopLevelComplexTypeAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTopLevelComplexTypeAccess().getPropertiesPropertyParserRuleCall_5_0(), currentNode); 
	    }
		lv_properties_6_0=ruleProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTopLevelComplexTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_6_0, 
	        		"Property", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getTopLevelComplexTypeAccess().getRightCurlyBracketKeyword_6(), null); 
    }
(	'documentation:' 
    {
        createLeafNode(grammarAccess.getTopLevelComplexTypeAccess().getDocumentationKeyword_7_0(), null); 
    }
(
(
		lv_documentation_9_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getTopLevelComplexTypeAccess().getDocumentationSTRINGTerminalRuleCall_7_1_0(), "documentation"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTopLevelComplexTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"documentation",
	        		lv_documentation_9_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyRule(), currentNode); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getElementParserRuleCall_0(), currentNode); 
    }
    this_Element_0=ruleElement
    { 
        $current = $this_Element_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getAttributeParserRuleCall_1(), currentNode); 
    }
    this_Attribute_1=ruleAttribute
    { 
        $current = $this_Attribute_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getElementRule(), currentNode); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getElementAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	'->' 
    {
        createLeafNode(grammarAccess.getElementAccess().getHyphenMinusGreaterThanSignKeyword_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElementAccess().getTypeRefNamedTypeReferenceParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_typeRef_2_0=ruleNamedTypeReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeRef",
	        		lv_typeRef_2_0, 
	        		"NamedTypeReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	':' 
    {
        createLeafNode(grammarAccess.getElementAccess().getColonKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElementAccess().getEmbeddedTypeDefEmbeddedTypeParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_embeddedTypeDef_4_0=ruleEmbeddedType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"embeddedTypeDef",
	        		lv_embeddedTypeDef_4_0, 
	        		"EmbeddedType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getElementAccess().getMultiplicityMultiplicityParserRuleCall_2_0(), currentNode); 
	    }
		lv_multiplicity_5_0=ruleMultiplicity		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"multiplicity",
	        		lv_multiplicity_5_0, 
	        		"Multiplicity", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeRule(), currentNode); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_required_0_0=	'required' 
    {
        createLeafNode(grammarAccess.getAttributeAccess().getRequiredRequiredKeyword_0_0(), "required"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "required", true, "required", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'@' 
    {
        createLeafNode(grammarAccess.getAttributeAccess().getCommercialAtKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'->' 
    {
        createLeafNode(grammarAccess.getAttributeAccess().getHyphenMinusGreaterThanSignKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getTypeRefNonComplexTypeReferenceParserRuleCall_4_0(), currentNode); 
	    }
		lv_typeRef_4_0=ruleNonComplexTypeReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeRef",
	        		lv_typeRef_4_0, 
	        		"NonComplexTypeReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleMultiplicity
entryRuleMultiplicity returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicityRule(), currentNode); }
	 iv_ruleMultiplicity=ruleMultiplicity 
	 { $current=$iv_ruleMultiplicity.current; } 
	 EOF 
;

// Rule Multiplicity
ruleMultiplicity returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getMultiplicityAccess().getMultiplicityAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicityAccess().getMultiplicityAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'[' 
    {
        createLeafNode(grammarAccess.getMultiplicityAccess().getLeftSquareBracketKeyword_1(), null); 
    }
((
(
		lv_lower_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getMultiplicityAccess().getLowerINTTerminalRuleCall_2_0_0(), "lower"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'..' 
    {
        createLeafNode(grammarAccess.getMultiplicityAccess().getFullStopFullStopKeyword_2_1(), null); 
    }
)((
(
		lv_upper_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getMultiplicityAccess().getUpperINTTerminalRuleCall_3_0_0(), "upper"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_unbounded_5_0=	'*' 
    {
        createLeafNode(grammarAccess.getMultiplicityAccess().getUnboundedAsteriskKeyword_3_1_0(), "unbounded"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "unbounded", true, "*", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))	']' 
    {
        createLeafNode(grammarAccess.getMultiplicityAccess().getRightSquareBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleNamedTypeReference
entryRuleNamedTypeReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNamedTypeReferenceRule(), currentNode); }
	 iv_ruleNamedTypeReference=ruleNamedTypeReference 
	 { $current=$iv_ruleNamedTypeReference.current; } 
	 EOF 
;

// Rule NamedTypeReference
ruleNamedTypeReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNamedTypeReferenceAccess().getTopLevelTypeReferenceParserRuleCall_0(), currentNode); 
    }
    this_TopLevelTypeReference_0=ruleTopLevelTypeReference
    { 
        $current = $this_TopLevelTypeReference_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNamedTypeReferenceAccess().getBuiltinTypeReferenceParserRuleCall_1(), currentNode); 
    }
    this_BuiltinTypeReference_1=ruleBuiltinTypeReference
    { 
        $current = $this_BuiltinTypeReference_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleNonComplexTypeReference
entryRuleNonComplexTypeReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNonComplexTypeReferenceRule(), currentNode); }
	 iv_ruleNonComplexTypeReference=ruleNonComplexTypeReference 
	 { $current=$iv_ruleNonComplexTypeReference.current; } 
	 EOF 
;

// Rule NonComplexTypeReference
ruleNonComplexTypeReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNonComplexTypeReferenceAccess().getTopLevelSimpleTypeReferenceParserRuleCall_0(), currentNode); 
    }
    this_TopLevelSimpleTypeReference_0=ruleTopLevelSimpleTypeReference
    { 
        $current = $this_TopLevelSimpleTypeReference_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNonComplexTypeReferenceAccess().getBuiltinTypeReferenceParserRuleCall_1(), currentNode); 
    }
    this_BuiltinTypeReference_1=ruleBuiltinTypeReference
    { 
        $current = $this_BuiltinTypeReference_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleBuiltinTypeReference
entryRuleBuiltinTypeReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBuiltinTypeReferenceRule(), currentNode); }
	 iv_ruleBuiltinTypeReference=ruleBuiltinTypeReference 
	 { $current=$iv_ruleBuiltinTypeReference.current; } 
	 EOF 
;

// Rule BuiltinTypeReference
ruleBuiltinTypeReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBuiltinTypeReferenceAccess().getBuiltinBuiltinTypeEnumRuleCall_0(), currentNode); 
	    }
		lv_builtin_0_0=ruleBuiltinType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBuiltinTypeReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"builtin",
	        		lv_builtin_0_0, 
	        		"BuiltinType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleTopLevelTypeReference
entryRuleTopLevelTypeReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTopLevelTypeReferenceRule(), currentNode); }
	 iv_ruleTopLevelTypeReference=ruleTopLevelTypeReference 
	 { $current=$iv_ruleTopLevelTypeReference.current; } 
	 EOF 
;

// Rule TopLevelTypeReference
ruleTopLevelTypeReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTopLevelTypeReferenceAccess().getDirectTopLevelTypeReferenceParserRuleCall_0(), currentNode); 
    }
    this_DirectTopLevelTypeReference_0=ruleDirectTopLevelTypeReference
    { 
        $current = $this_DirectTopLevelTypeReference_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTopLevelTypeReferenceAccess().getImportedTopLevelTypeReferenceParserRuleCall_1(), currentNode); 
    }
    this_ImportedTopLevelTypeReference_1=ruleImportedTopLevelTypeReference
    { 
        $current = $this_ImportedTopLevelTypeReference_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTopLevelComplexTypeReference
entryRuleTopLevelComplexTypeReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTopLevelComplexTypeReferenceRule(), currentNode); }
	 iv_ruleTopLevelComplexTypeReference=ruleTopLevelComplexTypeReference 
	 { $current=$iv_ruleTopLevelComplexTypeReference.current; } 
	 EOF 
;

// Rule TopLevelComplexTypeReference
ruleTopLevelComplexTypeReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTopLevelComplexTypeReferenceAccess().getDirectTopLevelComplexTypeReferenceParserRuleCall_0(), currentNode); 
    }
    this_DirectTopLevelComplexTypeReference_0=ruleDirectTopLevelComplexTypeReference
    { 
        $current = $this_DirectTopLevelComplexTypeReference_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTopLevelComplexTypeReferenceAccess().getImportedTopLevelComplexTypeReferenceParserRuleCall_1(), currentNode); 
    }
    this_ImportedTopLevelComplexTypeReference_1=ruleImportedTopLevelComplexTypeReference
    { 
        $current = $this_ImportedTopLevelComplexTypeReference_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTopLevelSimpleTypeReference
entryRuleTopLevelSimpleTypeReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTopLevelSimpleTypeReferenceRule(), currentNode); }
	 iv_ruleTopLevelSimpleTypeReference=ruleTopLevelSimpleTypeReference 
	 { $current=$iv_ruleTopLevelSimpleTypeReference.current; } 
	 EOF 
;

// Rule TopLevelSimpleTypeReference
ruleTopLevelSimpleTypeReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTopLevelSimpleTypeReferenceAccess().getDirectTopLevelSimpleTypeReferenceParserRuleCall_0(), currentNode); 
    }
    this_DirectTopLevelSimpleTypeReference_0=ruleDirectTopLevelSimpleTypeReference
    { 
        $current = $this_DirectTopLevelSimpleTypeReference_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTopLevelSimpleTypeReferenceAccess().getImportedTopLevelSimpleTypeReferenceParserRuleCall_1(), currentNode); 
    }
    this_ImportedTopLevelSimpleTypeReference_1=ruleImportedTopLevelSimpleTypeReference
    { 
        $current = $this_ImportedTopLevelSimpleTypeReference_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDirectTopLevelTypeReference
entryRuleDirectTopLevelTypeReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDirectTopLevelTypeReferenceRule(), currentNode); }
	 iv_ruleDirectTopLevelTypeReference=ruleDirectTopLevelTypeReference 
	 { $current=$iv_ruleDirectTopLevelTypeReference.current; } 
	 EOF 
;

// Rule DirectTopLevelTypeReference
ruleDirectTopLevelTypeReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDirectTopLevelTypeReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDirectTopLevelTypeReferenceAccess().getRefTopLevelTypeCrossReference_0(), "ref"); 
	}

)
)
;





// Entry rule entryRuleDirectTopLevelSimpleTypeReference
entryRuleDirectTopLevelSimpleTypeReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDirectTopLevelSimpleTypeReferenceRule(), currentNode); }
	 iv_ruleDirectTopLevelSimpleTypeReference=ruleDirectTopLevelSimpleTypeReference 
	 { $current=$iv_ruleDirectTopLevelSimpleTypeReference.current; } 
	 EOF 
;

// Rule DirectTopLevelSimpleTypeReference
ruleDirectTopLevelSimpleTypeReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDirectTopLevelSimpleTypeReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDirectTopLevelSimpleTypeReferenceAccess().getRefTopLevelSimpleTypeCrossReference_0(), "ref"); 
	}

)
)
;





// Entry rule entryRuleDirectTopLevelComplexTypeReference
entryRuleDirectTopLevelComplexTypeReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDirectTopLevelComplexTypeReferenceRule(), currentNode); }
	 iv_ruleDirectTopLevelComplexTypeReference=ruleDirectTopLevelComplexTypeReference 
	 { $current=$iv_ruleDirectTopLevelComplexTypeReference.current; } 
	 EOF 
;

// Rule DirectTopLevelComplexTypeReference
ruleDirectTopLevelComplexTypeReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDirectTopLevelComplexTypeReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDirectTopLevelComplexTypeReferenceAccess().getRefTopLevelComplexTypeCrossReference_0(), "ref"); 
	}

)
)
;





// Entry rule entryRuleImportedTopLevelTypeReference
entryRuleImportedTopLevelTypeReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportedTopLevelTypeReferenceRule(), currentNode); }
	 iv_ruleImportedTopLevelTypeReference=ruleImportedTopLevelTypeReference 
	 { $current=$iv_ruleImportedTopLevelTypeReference.current; } 
	 EOF 
;

// Rule ImportedTopLevelTypeReference
ruleImportedTopLevelTypeReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getImportedTopLevelTypeReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getImportedTopLevelTypeReferenceAccess().getImportImportCrossReference_0_0(), "import"); 
	}

)
)	':' 
    {
        createLeafNode(grammarAccess.getImportedTopLevelTypeReferenceAccess().getColonKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getImportedTopLevelTypeReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getImportedTopLevelTypeReferenceAccess().getRefTopLevelTypeCrossReference_2_0(), "ref"); 
	}

)
))
;





// Entry rule entryRuleImportedTopLevelSimpleTypeReference
entryRuleImportedTopLevelSimpleTypeReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportedTopLevelSimpleTypeReferenceRule(), currentNode); }
	 iv_ruleImportedTopLevelSimpleTypeReference=ruleImportedTopLevelSimpleTypeReference 
	 { $current=$iv_ruleImportedTopLevelSimpleTypeReference.current; } 
	 EOF 
;

// Rule ImportedTopLevelSimpleTypeReference
ruleImportedTopLevelSimpleTypeReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getImportedTopLevelSimpleTypeReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getImportedTopLevelSimpleTypeReferenceAccess().getImportImportCrossReference_0_0(), "import"); 
	}

)
)	':' 
    {
        createLeafNode(grammarAccess.getImportedTopLevelSimpleTypeReferenceAccess().getColonKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getImportedTopLevelSimpleTypeReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getImportedTopLevelSimpleTypeReferenceAccess().getRefTopLevelSimpleTypeCrossReference_2_0(), "ref"); 
	}

)
))
;





// Entry rule entryRuleImportedTopLevelComplexTypeReference
entryRuleImportedTopLevelComplexTypeReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportedTopLevelComplexTypeReferenceRule(), currentNode); }
	 iv_ruleImportedTopLevelComplexTypeReference=ruleImportedTopLevelComplexTypeReference 
	 { $current=$iv_ruleImportedTopLevelComplexTypeReference.current; } 
	 EOF 
;

// Rule ImportedTopLevelComplexTypeReference
ruleImportedTopLevelComplexTypeReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getImportedTopLevelComplexTypeReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getImportedTopLevelComplexTypeReferenceAccess().getImportImportCrossReference_0_0(), "import"); 
	}

)
)	':' 
    {
        createLeafNode(grammarAccess.getImportedTopLevelComplexTypeReferenceAccess().getColonKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getImportedTopLevelComplexTypeReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getImportedTopLevelComplexTypeReferenceAccess().getRefTopLevelComplexTypeCrossReference_2_0(), "ref"); 
	}

)
))
;







// Entry rule entryRuleEmbeddedType
entryRuleEmbeddedType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEmbeddedTypeRule(), currentNode); }
	 iv_ruleEmbeddedType=ruleEmbeddedType 
	 { $current=$iv_ruleEmbeddedType.current; } 
	 EOF 
;

// Rule EmbeddedType
ruleEmbeddedType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEmbeddedTypeAccess().getEmbeddedComplexTypeParserRuleCall_0(), currentNode); 
    }
    this_EmbeddedComplexType_0=ruleEmbeddedComplexType
    { 
        $current = $this_EmbeddedComplexType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEmbeddedTypeAccess().getEmbeddedSimpleTypeParserRuleCall_1(), currentNode); 
    }
    this_EmbeddedSimpleType_1=ruleEmbeddedSimpleType
    { 
        $current = $this_EmbeddedSimpleType_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleEmbeddedComplexType
entryRuleEmbeddedComplexType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEmbeddedComplexTypeRule(), currentNode); }
	 iv_ruleEmbeddedComplexType=ruleEmbeddedComplexType 
	 { $current=$iv_ruleEmbeddedComplexType.current; } 
	 EOF 
;

// Rule EmbeddedComplexType
ruleEmbeddedComplexType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getEmbeddedComplexTypeAccess().getEmbeddedComplexTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEmbeddedComplexTypeAccess().getEmbeddedComplexTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'complex-type' 
    {
        createLeafNode(grammarAccess.getEmbeddedComplexTypeAccess().getComplexTypeKeyword_1(), null); 
    }
(	'extends' 
    {
        createLeafNode(grammarAccess.getEmbeddedComplexTypeAccess().getExtendsKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEmbeddedComplexTypeAccess().getExtendsTopLevelComplexTypeReferenceParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_extends_3_0=ruleTopLevelComplexTypeReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmbeddedComplexTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"extends",
	        		lv_extends_3_0, 
	        		"TopLevelComplexTypeReference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'{' 
    {
        createLeafNode(grammarAccess.getEmbeddedComplexTypeAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEmbeddedComplexTypeAccess().getPropertiesPropertyParserRuleCall_4_0(), currentNode); 
	    }
		lv_properties_5_0=ruleProperty		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmbeddedComplexTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"properties",
	        		lv_properties_5_0, 
	        		"Property", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getEmbeddedComplexTypeAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleEmbeddedSimpleType
entryRuleEmbeddedSimpleType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEmbeddedSimpleTypeRule(), currentNode); }
	 iv_ruleEmbeddedSimpleType=ruleEmbeddedSimpleType 
	 { $current=$iv_ruleEmbeddedSimpleType.current; } 
	 EOF 
;

// Rule EmbeddedSimpleType
ruleEmbeddedSimpleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'simple-type' 
    {
        createLeafNode(grammarAccess.getEmbeddedSimpleTypeAccess().getSimpleTypeKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEmbeddedSimpleTypeAccess().getRestrictionRestrictionParserRuleCall_1_0(), currentNode); 
	    }
		lv_restriction_1_0=ruleRestriction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmbeddedSimpleTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"restriction",
	        		lv_restriction_1_0, 
	        		"Restriction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEmbeddedSimpleTypeAccess().getDocumentationDocumentationParserRuleCall_2_0(), currentNode); 
	    }
		lv_documentation_2_0=ruleDocumentation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEmbeddedSimpleTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"documentation",
	        		lv_documentation_2_0, 
	        		"Documentation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;









// Rule BuiltinType
ruleBuiltinType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'duration' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getDurationEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBuiltinTypeAccess().getDurationEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'dateTime' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getDateTimeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBuiltinTypeAccess().getDateTimeEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'time' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getTimeEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBuiltinTypeAccess().getTimeEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'date' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getDateEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBuiltinTypeAccess().getDateEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'string' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getStringEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBuiltinTypeAccess().getStringEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'decimal' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getDecimalEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBuiltinTypeAccess().getDecimalEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'integer' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getIntegerEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBuiltinTypeAccess().getIntegerEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'positiveInteger' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getPositiveIntegerEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBuiltinTypeAccess().getPositiveIntegerEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'nonNegativeInteger' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getNonNegativeIntegerEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBuiltinTypeAccess().getNonNegativeIntegerEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'token' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getTokenEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBuiltinTypeAccess().getTokenEnumLiteralDeclaration_9(), null); 
    }
)
    |(	'base64Binary' 
	{
        $current = grammarAccess.getBuiltinTypeAccess().getBase64BinaryEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBuiltinTypeAccess().getBase64BinaryEnumLiteralDeclaration_10(), null); 
    }
));



RULE_PATTERN_STRING : '/' ('\\' '/'|~('/'))* '/';

RULE_ID : '^'? ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'-'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


