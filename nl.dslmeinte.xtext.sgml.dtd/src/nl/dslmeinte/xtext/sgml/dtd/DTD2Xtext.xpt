«IMPORT dtdModel»

«EXTENSION org::eclipse::xtend::util::stdlib::io»
«EXTENSION nl::dslmeinte::xtend::util::emfExtensions»
«EXTENSION nl::dslmeinte::xtext::dtd::util::dtdExtensions»
«EXTENSION nl::dslmeinte::xtext::sgml::dtd::grammarHelper»


«DEFINE main(String fqLanguageName, String nsURI) FOR DocumentTypeDefinition -»
// generated by DTD2Xtext.xpt
grammar «fqLanguageName» with nl.dslmeinte.xtext.sgml.base.Base hidden()

«EXPAND additionalMetamodelsContent»

generate «fileNameWithoutExtension().toLowerCase()» «nsURI»

«EXPAND sgmlDocumentRuleOverride»

«EXPAND element FOREACH definitions.typeSelect(Element)»

«EXPAND additionalGrammarContent»

«ENDDEFINE»

«DEFINE additionalMetamodelsContent FOR DocumentTypeDefinition»
«ENDDEFINE»

«DEFINE additionalGrammarContent FOR DocumentTypeDefinition»
«ENDDEFINE»

«DEFINE element FOR Element»
«name» hidden(SGML_COMMENTS«IF !canHaveFollowingContent()», WHITESPACE«ENDIF»):
	«name»_tagOpen=«name»_tagOpen
	«EXPAND expression FOR content»
	«IF isCloseTagOptional()»(«ENDIF»«name»_tagClose=«name»_tagClose«IF isCloseTagOptional()»)?«ENDIF»
	;

«name»_tagOpen hidden(): «IF attributesCanBeEmpty()»{«name»_tagOpen} «ENDIF»'<' '«name»' «IF attributes().size > 0»WHITESPACE attributes=«name»_attributes«ENDIF» '>';
«IF attributes().size > 0»«name»_attributes hidden(WHITESPACE): «IF attributesCanBeEmpty()»{«name»_attributes} «ENDIF»«IF attributes().size > 1»(«ENDIF»«EXPAND attribute FOREACH attributes() SEPARATOR ' & '»«IF attributes().size > 1»)«ENDIF»;«ENDIF»
«name»_tagClose hidden(): {«name»_tagClose} '<' '/' '«name»' '>';
«ENDDEFINE»

«DEFINE attribute FOR Attribute»«IF isOptional()»(«ENDIF»'«name»' '=' «name»=QuotedString«IF isOptional()»)?«ENDIF»«ENDDEFINE»

«DEFINE sgmlDocumentRuleOverride FOR DocumentTypeDefinition»
// override from Base to include root (of right type):
SgmlDocument hidden(WHITESPACE, SGML_COMMENTS):
		docType=DocumentType
		root=«definitions.typeSelect(Element).first().name»
	;

DocumentType hidden(WHITESPACE):
	'<' '!DOCTYPE' rootName=IDENTIFIER ('PUBLIC' | 'SYSTEM') header1=QuotedString header2=QuotedString?
		('[' ( entities+=Entity | SGML_COMMENTS )* ']')? '>'	
	;
«ENDDEFINE»


«REM»generation for Expression content«ENDREM»

«DEFINE expression FOR Expression»
«( "no DEFINE block for sub type " + metaType.name + " of " + Expression.metaType.name ).error()»
«ENDDEFINE»

«DEFINE expression FOR Alternatives»( «EXPAND expression FOREACH alternatives SEPARATOR ' | '» )«ENDDEFINE»

«DEFINE expression FOR Concatenation»«EXPAND expression FOREACH members SEPARATOR ' '»«ENDDEFINE»

«DEFINE expression FOR Cardinality»(«EXPAND expression FOR nestedExpr»)«cardinality.syntax()»«ENDDEFINE»

«DEFINE expression FOR EmptyContent»«ENDDEFINE»

«DEFINE expression FOR PCData»contents+=_PCDATA«ENDDEFINE»

«DEFINE expression FOR ElementReference»contents+=«element.name»«ENDDEFINE»

