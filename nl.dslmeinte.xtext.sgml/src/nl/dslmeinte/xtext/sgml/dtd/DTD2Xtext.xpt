«IMPORT dtdModel»

«EXTENSION org::eclipse::xtend::util::stdlib::io»
«EXTENSION nl::dslmeinte::xtext::generation::emfExtensions»
«EXTENSION nl::dslmeinte::xtext::dtd::dtdExtensions»
«EXTENSION nl::dslmeinte::xtext::sgml::dtd::grammarHelper»


«DEFINE main(String fqLanguageName, String nsURI) FOR DocumentTypeDefinition -»
// generated by DTD2Xtext.xpt
grammar «fqLanguageName» with nl.dslmeinte.xtext.sgml.dtd.Base

generate «fileNameWithoutExtension().toLowerCase()» «nsURI»

«EXPAND sgmlDocumentRuleOverride»

«EXPAND element FOREACH definitions.typeSelect(Element)»

«ENDDEFINE»

«DEFINE element FOR Element»
«name» hidden(SGML_COMMENTS):
	«IF canBeEmpty()»{«name»}«ENDIF -»
	«EXPAND tagOpen»
	«EXPAND expression FOR content»
	«IF isCloseTagOptional()»(«ENDIF»«EXPAND tagClose»«IF isCloseTagOptional()»)?«ENDIF»
	;
«ENDDEFINE»

«DEFINE tagOpen FOR Element -»
	OPEN_TAG '«name»' «EXPAND attributeList FOR attributes() -»CLOSE_TAG
«ENDDEFINE»

«DEFINE tagClose FOR Element -»
	OPEN_TAG SLASH_SYMBOL '«name»' CLOSE_TAG
«ENDDEFINE»

«DEFINE attributeList FOR List[Attribute] -»
	«IF size>0»WHITESPACE «ENDIF -»«IF size>1»(«ENDIF»«EXPAND attribute FOREACH this SEPARATOR ' & ' -»«IF size>1»)«ENDIF -»
«ENDDEFINE»

«DEFINE attribute FOR Attribute»«name»=QUOTED_STRING«IF isOptional()»?«ENDIF»«ENDDEFINE»

«DEFINE sgmlDocumentRuleOverride FOR DocumentTypeDefinition»
// override from Base to include root (of right type):
SgmlDocument hidden(WHITESPACE, HEADER_COMMENTS):
	OPEN_TAG 'SISGML' ('PUBLIC' | 'SYSTEM') header1=QUOTED_STRING header2=QUOTED_STRING?
		(OPEN_BRACKET entities+=Entity* CLOSE_BRACKET)? CLOSE_TAG
		root=«definitions.typeSelect(Element).first().name»
	;
«ENDDEFINE»


«REM»generation for Expression content«ENDREM»

«DEFINE expression FOR Expression»
«( "no DEFINE block for sub type " + metaType.name + " of " + Expression.metaType.name ).error()»
«ENDDEFINE»

«DEFINE expression FOR Alternatives»( «EXPAND expression FOREACH alternatives SEPARATOR ' | '» )«ENDDEFINE»

«DEFINE expression FOR Concatenation»( «EXPAND expression FOREACH members SEPARATOR ' '» )«ENDDEFINE»

«DEFINE expression FOR Cardinality»(«EXPAND expression FOR nestedExpr»)«cardinality.syntax()»«ENDDEFINE»

«DEFINE expression FOR EmptyContent»«ENDDEFINE»

«DEFINE expression FOR PCData»contents+=_PCDATAContents*«ENDDEFINE»

«DEFINE expression FOR ElementReference»contents+=«element.name»«ENDDEFINE»

