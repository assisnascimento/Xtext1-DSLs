«IMPORT dtdModel»

«EXTENSION org::eclipse::xtend::util::stdlib::io»
«EXTENSION nl::dslmeinte::xtext::generation::emfExtensions»
«EXTENSION nl::dslmeinte::xtext::dtd::dtdExtensions»
«EXTENSION nl::dslmeinte::xtext::sgml::dtd::grammarHelper»


«DEFINE main(String fqLanguageName, String nsURI) FOR DocumentTypeDefinition -»
// generated by DTD2Xtext.xpt
grammar «fqLanguageName» with nl.dslmeinte.xtext.sgml.base.Base hidden()

generate «fileNameWithoutExtension().toLowerCase()» «nsURI»

«EXPAND sgmlDocumentRuleOverride»

«EXPAND element FOREACH definitions.typeSelect(Element)»

«FOREACH keywords() AS keyword»
terminal «keyword»_KEYWORD : '«keyword»';
«ENDFOREACH»

«ENDDEFINE»

«DEFINE element FOR Element»
«name» hidden(SGML_COMMENTS):
	«name»_tagOpen=«name»_tagOpen
	«EXPAND expression FOR content»
	«IF isCloseTagOptional()»(«ENDIF»«name»_tagClose=«name»_tagClose«IF isCloseTagOptional()»)?«ENDIF»
	;

«name»_tagOpen hidden(): OPEN_TAG_SYMBOL «name»_KEYWORD «IF attributes().size > 0»attributes=«name»_attributes«ENDIF» CLOSE_TAG_SYMBOL;
«IF attributes().size > 0»«name»_attributes hidden(WHITESPACE): «IF attributesCanBeEmpty()»{«name»_attributes}«ENDIF»«IF attributes().size > 1»(«ENDIF»«EXPAND attribute FOREACH attributes() SEPARATOR ' & '»«IF attributes().size > 1»)«ENDIF»;«ENDIF»
«name»_tagClose hidden(): OPEN_TAG_SYMBOL SLASH_SYMBOL «name»_KEYWORD CLOSE_TAG_SYMBOL;
«ENDDEFINE»

«DEFINE attribute FOR Attribute»«IF isOptional()»(«ENDIF»«name»_KEYWORD EQUALS_SYMBOL «name»=QUOTED_STRING«IF isOptional()»)?«ENDIF»«ENDDEFINE»

«DEFINE sgmlDocumentRuleOverride FOR DocumentTypeDefinition»
// override from Base to include root (of right type):
SgmlDocument hidden(WHITESPACE, HEADER_COMMENTS):
	OPEN_TAG_SYMBOL SISGML_KEYWORD (PUBLIC_KEYWORD | SYSTEM_KEYWORD) header1=QUOTED_STRING header2=QUOTED_STRING?
		(OPEN_BRACKET_SYMBOL entities+=Entity* CLOSE_BRACKET_SYMBOL)? CLOSE_TAG_SYMBOL
		root=«definitions.typeSelect(Element).first().name»
	;
«ENDDEFINE»


«REM»generation for Expression content«ENDREM»

«DEFINE expression FOR Expression»
«( "no DEFINE block for sub type " + metaType.name + " of " + Expression.metaType.name ).error()»
«ENDDEFINE»

«DEFINE expression FOR Alternatives»( «EXPAND expression FOREACH alternatives SEPARATOR ' | '» )«ENDDEFINE»

«DEFINE expression FOR Concatenation»«EXPAND expression FOREACH members SEPARATOR ' '»«ENDDEFINE»

«DEFINE expression FOR Cardinality»(«EXPAND expression FOR nestedExpr»)«cardinality.syntax()»«ENDDEFINE»

«DEFINE expression FOR EmptyContent»«ENDDEFINE»

«DEFINE expression FOR PCData»contents+=_PCDATAContents«ENDDEFINE»

«DEFINE expression FOR ElementReference»contents+=«element.name»«ENDDEFINE»

