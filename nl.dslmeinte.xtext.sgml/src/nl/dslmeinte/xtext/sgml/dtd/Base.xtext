grammar nl.dslmeinte.xtext.sgml.dtd.Base

generate base "http://www.dslmeinte.nl/xtext/sgml/dtd/Base"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
	// (need to import Ecore because of terminal definitions)

// will be overridden by including grammar to add 'root' feature:
SgmlDocument:
	OPEN_TAG header1=ID header2=ID header3=STRING header4=STRING?
		(OPEN_BRACKET entities+=Entity CLOSE_BRACKET)? CLOSE_TAG
	;

Entity hidden(WHITESPACE):
	OPEN_TAG ENTITY_KEYWORD name=ID CLOSE_TAG
	;

_PCDATAEntityReference:
	AMPERSAND entity=[Entity] SEMICOLON;


terminal ID  				: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal STRING				: 
								'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
								"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
								;

terminal SGML_COMMENTS		: '<!--' -> '-->';
terminal HEADER_COMMENTS	: '--' -> '--';

terminal WHITESPACE			: (' '|'\t'|'\r'|'\n')+;

/*
 * Note that we give the keywords which are known beforehand
 * their own, separate terminal rules so that it is easier
 * to marry up the generic SgmlLexer part to the custom
 * Lexer.
 */

terminal OPEN_TAG			: '<';
terminal CLOSE_TAG			: '>';

terminal DOCTYPE_KEYWORD	: '!DOCTYPE';
terminal ENTITY_KEYWORD		: '!ENTITY';

terminal OPEN_BRACKET		: '[';
terminal CLOSE_BRACKET		: ']';

terminal AMPERSAND			: '&';
terminal SEMICOLON			: ';';

terminal LITERAL_CONTENTS	: .;

