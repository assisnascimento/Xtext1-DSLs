/*
* generated by Xtext
*/
grammar InternalDynamicScreenDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package nl.dslmeinte.xtext.examples.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.dslmeinte.xtext.examples.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import nl.dslmeinte.xtext.examples.services.DynamicScreenDslGrammarAccess;

}

@parser::members {

 	private DynamicScreenDslGrammarAccess grammarAccess;
 	
    public InternalDynamicScreenDslParser(TokenStream input, IAstFactory factory, DynamicScreenDslGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("nl/dslmeinte/xtext/examples/parser/antlr/internal/InternalDynamicScreenDsl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DynamicScreen";	
   	}
   	
   	@Override
   	protected DynamicScreenDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDynamicScreen
entryRuleDynamicScreen returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDynamicScreenRule(), currentNode); }
	 iv_ruleDynamicScreen=ruleDynamicScreen 
	 { $current=$iv_ruleDynamicScreen.current; } 
	 EOF 
;

// Rule DynamicScreen
ruleDynamicScreen returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'dynamic-screen' 
    {
        createLeafNode(grammarAccess.getDynamicScreenAccess().getDynamicScreenKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDynamicScreenAccess().getLabelLabelParserRuleCall_1_0(), currentNode); 
	    }
		lv_label_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDynamicScreenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"label",
	        		lv_label_1_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'data-import' 
    {
        createLeafNode(grammarAccess.getDynamicScreenAccess().getDataImportKeyword_2(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getDynamicScreenAccess().getEqualsSignKeyword_3(), null); 
    }
(
(
		lv_importURI_4_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getDynamicScreenAccess().getImportURISTRINGTerminalRuleCall_4_0(), "importURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDynamicScreenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importURI",
	        		lv_importURI_4_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'view-class' 
    {
        createLeafNode(grammarAccess.getDynamicScreenAccess().getViewClassKeyword_5(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getDynamicScreenAccess().getEqualsSignKeyword_6(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDynamicScreenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDynamicScreenAccess().getViewClassEntityCrossReference_7_0(), "viewClass"); 
	}

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDynamicScreenAccess().getDeclarationsDeclarationParserRuleCall_8_0(), currentNode); 
	    }
		lv_declarations_8_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDynamicScreenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"declarations",
	        		lv_declarations_8_0, 
	        		"Declaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDynamicScreenAccess().getGroupsFieldGroupParserRuleCall_9_0(), currentNode); 
	    }
		lv_groups_9_0=ruleFieldGroup		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDynamicScreenRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"groups",
	        		lv_groups_9_0, 
	        		"FieldGroup", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLabelRule(), currentNode); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_en_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getLabelAccess().getEnSTRINGTerminalRuleCall_0_0(), "en"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLabelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"en",
	        		lv_en_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'[nl:' 
    {
        createLeafNode(grammarAccess.getLabelAccess().getNlKeyword_1_0(), null); 
    }
(
(
		lv_nl_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getLabelAccess().getNlSTRINGTerminalRuleCall_1_1_0(), "nl"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLabelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"nl",
	        		lv_nl_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getLabelAccess().getRightSquareBracketKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRulePathTail
entryRulePathTail returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPathTailRule(), currentNode); }
	 iv_rulePathTail=rulePathTail 
	 { $current=$iv_rulePathTail.current; } 
	 EOF 
;

// Rule PathTail
rulePathTail returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'/' 
    {
        createLeafNode(grammarAccess.getPathTailAccess().getSolidusKeyword_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPathTailRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getPathTailAccess().getFieldFieldCrossReference_1_0(), "field"); 
	}

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getPathTailAccess().getLeftParenthesisKeyword_2_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPathTailRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getPathTailAccess().getAsEntityEntityCrossReference_2_1_0(), "asEntity"); 
	}

)
)	')' 
    {
        createLeafNode(grammarAccess.getPathTailAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPathTailAccess().getTailPathTailParserRuleCall_3_0(), currentNode); 
	    }
		lv_tail_5_0=rulePathTail		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPathTailRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tail",
	        		lv_tail_5_0, 
	        		"PathTail", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeclarationRule(), currentNode); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getExternalVariableParserRuleCall_0(), currentNode); 
    }
    this_ExternalVariable_0=ruleExternalVariable
    { 
        $current = $this_ExternalVariable_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getEnumListParserRuleCall_1(), currentNode); 
    }
    this_EnumList_1=ruleEnumList
    { 
        $current = $this_EnumList_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getDataStoreParserRuleCall_2(), currentNode); 
    }
    this_DataStore_2=ruleDataStore
    { 
        $current = $this_DataStore_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleExternalVariable
entryRuleExternalVariable returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExternalVariableRule(), currentNode); }
	 iv_ruleExternalVariable=ruleExternalVariable 
	 { $current=$iv_ruleExternalVariable.current; } 
	 EOF 
;

// Rule ExternalVariable
ruleExternalVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'external-var' 
    {
        createLeafNode(grammarAccess.getExternalVariableAccess().getExternalVarKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExternalVariableAccess().getPathPathTailParserRuleCall_1_0(), currentNode); 
	    }
		lv_path_1_0=rulePathTail		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExternalVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_1_0, 
	        		"PathTail", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'as' 
    {
        createLeafNode(grammarAccess.getExternalVariableAccess().getAsKeyword_2(), null); 
    }
(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getExternalVariableAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExternalVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleEnumList
entryRuleEnumList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumListRule(), currentNode); }
	 iv_ruleEnumList=ruleEnumList 
	 { $current=$iv_ruleEnumList.current; } 
	 EOF 
;

// Rule EnumList
ruleEnumList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'define' 
    {
        createLeafNode(grammarAccess.getEnumListAccess().getDefineKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getEnumListAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'as' 
    {
        createLeafNode(grammarAccess.getEnumListAccess().getAsKeyword_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getEnumListAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEnumListAccess().getLiteralsEnumLiteralCrossReference_4_0(), "literals"); 
	}

)
)+	')' 
    {
        createLeafNode(grammarAccess.getEnumListAccess().getRightParenthesisKeyword_5(), null); 
    }
	'of' 
    {
        createLeafNode(grammarAccess.getEnumListAccess().getOfKeyword_6(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEnumListAccess().getEnumEnumerationCrossReference_7_0(), "enum"); 
	}

)
))
;





// Entry rule entryRuleDataStore
entryRuleDataStore returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataStoreRule(), currentNode); }
	 iv_ruleDataStore=ruleDataStore 
	 { $current=$iv_ruleDataStore.current; } 
	 EOF 
;

// Rule DataStore
ruleDataStore returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'data-store' 
    {
        createLeafNode(grammarAccess.getDataStoreAccess().getDataStoreKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDataStoreAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataStoreRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'of-type' 
    {
        createLeafNode(grammarAccess.getDataStoreAccess().getOfTypeKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDataStoreRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDataStoreAccess().getClassEntityCrossReference_3_0(), "class"); 
	}

)
)(
(
		lv_multi_4_0=	'is-multi-valued' 
    {
        createLeafNode(grammarAccess.getDataStoreAccess().getMultiIsMultiValuedKeyword_4_0(), "multi"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDataStoreRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multi", true, "is-multi-valued", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)
;





// Entry rule entryRuleGroupElement
entryRuleGroupElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getGroupElementRule(), currentNode); }
	 iv_ruleGroupElement=ruleGroupElement 
	 { $current=$iv_ruleGroupElement.current; } 
	 EOF 
;

// Rule GroupElement
ruleGroupElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getGroupElementAccess().getFieldParserRuleCall_0(), currentNode); 
    }
    this_Field_0=ruleField
    { 
        $current = $this_Field_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getGroupElementAccess().getFieldGroupParserRuleCall_1(), currentNode); 
    }
    this_FieldGroup_1=ruleFieldGroup
    { 
        $current = $this_FieldGroup_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFieldRule(), currentNode); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getLabelLabelParserRuleCall_1_0(), currentNode); 
	    }
		lv_label_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"label",
	        		lv_label_1_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getPathPathTailParserRuleCall_2_0(), currentNode); 
	    }
		lv_path_2_0=rulePathTail		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_2_0, 
	        		"PathTail", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldAccess().getAttributesAttributeParserRuleCall_3_0(), currentNode); 
	    }
		lv_attributes_3_0=ruleAttribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_3_0, 
	        		"Attribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleFieldGroup
entryRuleFieldGroup returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFieldGroupRule(), currentNode); }
	 iv_ruleFieldGroup=ruleFieldGroup 
	 { $current=$iv_ruleFieldGroup.current; } 
	 EOF 
;

// Rule FieldGroup
ruleFieldGroup returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'group' 
    {
        createLeafNode(grammarAccess.getFieldGroupAccess().getGroupKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldGroupAccess().getLabelLabelParserRuleCall_1_0(), currentNode); 
	    }
		lv_label_1_0=ruleLabel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"label",
	        		lv_label_1_0, 
	        		"Label", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	'with' 
    {
        createLeafNode(grammarAccess.getFieldGroupAccess().getWithKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldGroupAccess().getWithPathTailParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_with_3_0=rulePathTail		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"with",
	        		lv_with_3_0, 
	        		"PathTail", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'{' 
    {
        createLeafNode(grammarAccess.getFieldGroupAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldGroupAccess().getElementsGroupElementParserRuleCall_4_0(), currentNode); 
	    }
		lv_elements_5_0=ruleGroupElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_5_0, 
	        		"GroupElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+	'}' 
    {
        createLeafNode(grammarAccess.getFieldGroupAccess().getRightCurlyBracketKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFieldGroupAccess().getAttributesAttributeParserRuleCall_6_0(), currentNode); 
	    }
		lv_attributes_7_0=ruleAttribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFieldGroupRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_7_0, 
	        		"Attribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeRule(), currentNode); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getNormalAttributeParserRuleCall_0(), currentNode); 
    }
    this_NormalAttribute_0=ruleNormalAttribute
    { 
        $current = $this_NormalAttribute_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getEnumFieldAttributeParserRuleCall_1(), currentNode); 
    }
    this_EnumFieldAttribute_1=ruleEnumFieldAttribute
    { 
        $current = $this_EnumFieldAttribute_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleEnumFieldAttribute
entryRuleEnumFieldAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumFieldAttributeRule(), currentNode); }
	 iv_ruleEnumFieldAttribute=ruleEnumFieldAttribute 
	 { $current=$iv_ruleEnumFieldAttribute.current; } 
	 EOF 
;

// Rule EnumFieldAttribute
ruleEnumFieldAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEnumFieldAttributeAccess().getRestrictionAttributeParserRuleCall_0(), currentNode); 
    }
    this_RestrictionAttribute_0=ruleRestrictionAttribute
    { 
        $current = $this_RestrictionAttribute_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEnumFieldAttributeAccess().getRestrictionGroupAttributeParserRuleCall_1(), currentNode); 
    }
    this_RestrictionGroupAttribute_1=ruleRestrictionGroupAttribute
    { 
        $current = $this_RestrictionGroupAttribute_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleNormalAttribute
entryRuleNormalAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNormalAttributeRule(), currentNode); }
	 iv_ruleNormalAttribute=ruleNormalAttribute 
	 { $current=$iv_ruleNormalAttribute.current; } 
	 EOF 
;

// Rule NormalAttribute
ruleNormalAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNormalAttributeAccess().getClassExprAttributeClassExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_classExpr_0_0=ruleAttributeClassExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNormalAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"classExpr",
	        		lv_classExpr_0_0, 
	        		"AttributeClassExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'if' 
    {
        createLeafNode(grammarAccess.getNormalAttributeAccess().getIfKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNormalAttributeAccess().getClauseBExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_clause_2_0=ruleBExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNormalAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"clause",
	        		lv_clause_2_0, 
	        		"BExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleAttributeClassExpression
entryRuleAttributeClassExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeClassExpressionRule(), currentNode); }
	 iv_ruleAttributeClassExpression=ruleAttributeClassExpression 
	 { $current=$iv_ruleAttributeClassExpression.current; } 
	 EOF 
;

// Rule AttributeClassExpression
ruleAttributeClassExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeClassExpressionAccess().getClassesAttributeClassEnumRuleCall_0_0(), currentNode); 
	    }
		lv_classes_0_0=ruleAttributeClass		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeClassExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"classes",
	        		lv_classes_0_0, 
	        		"AttributeClass", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'+' 
    {
        createLeafNode(grammarAccess.getAttributeClassExpressionAccess().getPlusSignKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAttributeClassExpressionAccess().getClassesAttributeClassEnumRuleCall_1_1_0(), currentNode); 
	    }
		lv_classes_2_0=ruleAttributeClass		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeClassExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"classes",
	        		lv_classes_2_0, 
	        		"AttributeClass", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleRestrictionAttribute
entryRuleRestrictionAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRestrictionAttributeRule(), currentNode); }
	 iv_ruleRestrictionAttribute=ruleRestrictionAttribute 
	 { $current=$iv_ruleRestrictionAttribute.current; } 
	 EOF 
;

// Rule RestrictionAttribute
ruleRestrictionAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'restrict-to' 
    {
        createLeafNode(grammarAccess.getRestrictionAttributeAccess().getRestrictToKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRestrictionAttributeAccess().getLiteralsEnumLiteralsCollectionParserRuleCall_1_0(), currentNode); 
	    }
		lv_literals_1_0=ruleEnumLiteralsCollection		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRestrictionAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"literals",
	        		lv_literals_1_0, 
	        		"EnumLiteralsCollection", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'if' 
    {
        createLeafNode(grammarAccess.getRestrictionAttributeAccess().getIfKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRestrictionAttributeAccess().getClauseBExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_clause_3_0=ruleBExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRestrictionAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"clause",
	        		lv_clause_3_0, 
	        		"BExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleRestrictionGroupAttribute
entryRuleRestrictionGroupAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRestrictionGroupAttributeRule(), currentNode); }
	 iv_ruleRestrictionGroupAttribute=ruleRestrictionGroupAttribute 
	 { $current=$iv_ruleRestrictionGroupAttribute.current; } 
	 EOF 
;

// Rule RestrictionGroupAttribute
ruleRestrictionGroupAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getRestrictionGroupAttributeAccess().getRestrictionGroupAttributeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRestrictionGroupAttributeAccess().getRestrictionGroupAttributeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'restrict-to-group' 
    {
        createLeafNode(grammarAccess.getRestrictionGroupAttributeAccess().getRestrictToGroupKeyword_1(), null); 
    }
	'<' 
    {
        createLeafNode(grammarAccess.getRestrictionGroupAttributeAccess().getLessThanSignKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRestrictionGroupAttributeAccess().getRulesRestrictionRuleParserRuleCall_3_0(), currentNode); 
	    }
		lv_rules_3_0=ruleRestrictionRule		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRestrictionGroupAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"rules",
	        		lv_rules_3_0, 
	        		"RestrictionRule", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+	'>' 
    {
        createLeafNode(grammarAccess.getRestrictionGroupAttributeAccess().getGreaterThanSignKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleRestrictionRule
entryRuleRestrictionRule returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRestrictionRuleRule(), currentNode); }
	 iv_ruleRestrictionRule=ruleRestrictionRule 
	 { $current=$iv_ruleRestrictionRule.current; } 
	 EOF 
;

// Rule RestrictionRule
ruleRestrictionRule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRestrictionRuleAccess().getLiteralsEnumLiteralsCollectionParserRuleCall_0_0(), currentNode); 
	    }
		lv_literals_0_0=ruleEnumLiteralsCollection		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRestrictionRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"literals",
	        		lv_literals_0_0, 
	        		"EnumLiteralsCollection", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'if' 
    {
        createLeafNode(grammarAccess.getRestrictionRuleAccess().getIfKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRestrictionRuleAccess().getClauseBExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_clause_2_0=ruleBExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRestrictionRuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"clause",
	        		lv_clause_2_0, 
	        		"BExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleReferenceTarget
entryRuleReferenceTarget returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferenceTargetRule(), currentNode); }
	 iv_ruleReferenceTarget=ruleReferenceTarget 
	 { $current=$iv_ruleReferenceTarget.current; } 
	 EOF 
;

// Rule ReferenceTarget
ruleReferenceTarget returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getReferenceTargetAccess().getFieldParserRuleCall_0(), currentNode); 
    }
    this_Field_0=ruleField
    { 
        $current = $this_Field_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getReferenceTargetAccess().getExternalVariableParserRuleCall_1(), currentNode); 
    }
    this_ExternalVariable_1=ruleExternalVariable
    { 
        $current = $this_ExternalVariable_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReferenceRule(), currentNode); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getReferenceAccess().getRefReferenceTargetCrossReference_0(), "ref"); 
	}

)
)
;







// Entry rule entryRuleBExpression
entryRuleBExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBExpressionRule(), currentNode); }
	 iv_ruleBExpression=ruleBExpression 
	 { $current=$iv_ruleBExpression.current; } 
	 EOF 
;

// Rule BExpression
ruleBExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getBExpressionAccess().getBOrExpressionParserRuleCall(), currentNode); 
    }
    this_BOrExpression_0=ruleBOrExpression
    { 
        $current = $this_BOrExpression_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleBOrExpression
entryRuleBOrExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBOrExpressionRule(), currentNode); }
	 iv_ruleBOrExpression=ruleBOrExpression 
	 { $current=$iv_ruleBOrExpression.current; } 
	 EOF 
;

// Rule BOrExpression
ruleBOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getBOrExpressionAccess().getBAndExpressionParserRuleCall_0(), currentNode); 
    }
    this_BAndExpression_0=ruleBAndExpression
    { 
        $current = $this_BAndExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getBOrExpressionAccess().getOrOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBOrExpressionAccess().getOrOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'or' 
    {
        createLeafNode(grammarAccess.getBOrExpressionAccess().getOrKeyword_1_1_0(), null); 
    }

    |	'|' 
    {
        createLeafNode(grammarAccess.getBOrExpressionAccess().getVerticalLineKeyword_1_1_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBOrExpressionAccess().getRightBAndExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_4_0=ruleBAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_4_0, 
	        		"BAndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleBAndExpression
entryRuleBAndExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBAndExpressionRule(), currentNode); }
	 iv_ruleBAndExpression=ruleBAndExpression 
	 { $current=$iv_ruleBAndExpression.current; } 
	 EOF 
;

// Rule BAndExpression
ruleBAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getBAndExpressionAccess().getNegationExpressionParserRuleCall_0(), currentNode); 
    }
    this_NegationExpression_0=ruleNegationExpression
    { 
        $current = $this_NegationExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getBAndExpressionAccess().getAndOperationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBAndExpressionAccess().getAndOperationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'and' 
    {
        createLeafNode(grammarAccess.getBAndExpressionAccess().getAndKeyword_1_1_0(), null); 
    }

    |	'&' 
    {
        createLeafNode(grammarAccess.getBAndExpressionAccess().getAmpersandKeyword_1_1_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBAndExpressionAccess().getRightNegationExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_4_0=ruleNegationExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_4_0, 
	        		"NegationExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleNegationExpression
entryRuleNegationExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNegationExpressionRule(), currentNode); }
	 iv_ruleNegationExpression=ruleNegationExpression 
	 { $current=$iv_ruleNegationExpression.current; } 
	 EOF 
;

// Rule NegationExpression
ruleNegationExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNegationExpressionAccess().getTerminalBExpressionParserRuleCall_0(), currentNode); 
    }
    this_TerminalBExpression_0=ruleTerminalBExpression
    { 
        $current = $this_TerminalBExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |((
    { 
        temp=factory.create(grammarAccess.getNegationExpressionAccess().getNegationExpressionAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNegationExpressionAccess().getNegationExpressionAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'not' 
    {
        createLeafNode(grammarAccess.getNegationExpressionAccess().getNotKeyword_1_1_0(), null); 
    }

    |	'!' 
    {
        createLeafNode(grammarAccess.getNegationExpressionAccess().getExclamationMarkKeyword_1_1_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNegationExpressionAccess().getExprNegationExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_expr_4_0=ruleNegationExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNegationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_4_0, 
	        		"NegationExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleTerminalBExpression
entryRuleTerminalBExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTerminalBExpressionRule(), currentNode); }
	 iv_ruleTerminalBExpression=ruleTerminalBExpression 
	 { $current=$iv_ruleTerminalBExpression.current; } 
	 EOF 
;

// Rule TerminalBExpression
ruleTerminalBExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalBExpressionAccess().getAtomicReferringBExpressionParserRuleCall_0(), currentNode); 
    }
    this_AtomicReferringBExpression_0=ruleAtomicReferringBExpression
    { 
        $current = $this_AtomicReferringBExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |(	'(' 
    {
        createLeafNode(grammarAccess.getTerminalBExpressionAccess().getLeftParenthesisKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getTerminalBExpressionAccess().getBExpressionParserRuleCall_1_1(), currentNode); 
    }
    this_BExpression_2=ruleBExpression
    { 
        $current = $this_BExpression_2.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getTerminalBExpressionAccess().getRightParenthesisKeyword_1_2(), null); 
    }
))
;





// Entry rule entryRuleAtomicReferringBExpression
entryRuleAtomicReferringBExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAtomicReferringBExpressionRule(), currentNode); }
	 iv_ruleAtomicReferringBExpression=ruleAtomicReferringBExpression 
	 { $current=$iv_ruleAtomicReferringBExpression.current; } 
	 EOF 
;

// Rule AtomicReferringBExpression
ruleAtomicReferringBExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicReferringBExpressionAccess().getBComparisonParserRuleCall_0(), currentNode); 
    }
    this_BComparison_0=ruleBComparison
    { 
        $current = $this_BComparison_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicReferringBExpressionAccess().getEnumComparisonParserRuleCall_1(), currentNode); 
    }
    this_EnumComparison_1=ruleEnumComparison
    { 
        $current = $this_EnumComparison_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicReferringBExpressionAccess().getStringValueComparisonParserRuleCall_2(), currentNode); 
    }
    this_StringValueComparison_2=ruleStringValueComparison
    { 
        $current = $this_StringValueComparison_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomicReferringBExpressionAccess().getPresenceCheckParserRuleCall_3(), currentNode); 
    }
    this_PresenceCheck_3=rulePresenceCheck
    { 
        $current = $this_PresenceCheck_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleBComparison
entryRuleBComparison returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBComparisonRule(), currentNode); }
	 iv_ruleBComparison=ruleBComparison 
	 { $current=$iv_ruleBComparison.current; } 
	 EOF 
;

// Rule BComparison
ruleBComparison returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getBComparisonAccess().getBComparisonAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBComparisonAccess().getBComparisonAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBComparisonAccess().getRefReferenceParserRuleCall_1_0(), currentNode); 
	    }
		lv_ref_1_0=ruleReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBComparisonRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ref",
	        		lv_ref_1_0, 
	        		"Reference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'is' 
    {
        createLeafNode(grammarAccess.getBComparisonAccess().getIsKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBComparisonAccess().getBLiteralBLiteralEnumRuleCall_2_1_0(), currentNode); 
	    }
		lv_bLiteral_3_0=ruleBLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBComparisonRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"bLiteral",
	        		lv_bLiteral_3_0, 
	        		"BLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleEnumComparison
entryRuleEnumComparison returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumComparisonRule(), currentNode); }
	 iv_ruleEnumComparison=ruleEnumComparison 
	 { $current=$iv_ruleEnumComparison.current; } 
	 EOF 
;

// Rule EnumComparison
ruleEnumComparison returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEnumComparisonAccess().getSingleEnumComparisonParserRuleCall_0(), currentNode); 
    }
    this_SingleEnumComparison_0=ruleSingleEnumComparison
    { 
        $current = $this_SingleEnumComparison_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEnumComparisonAccess().getMultiEnumComparisonParserRuleCall_1(), currentNode); 
    }
    this_MultiEnumComparison_1=ruleMultiEnumComparison
    { 
        $current = $this_MultiEnumComparison_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSingleEnumComparison
entryRuleSingleEnumComparison returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSingleEnumComparisonRule(), currentNode); }
	 iv_ruleSingleEnumComparison=ruleSingleEnumComparison 
	 { $current=$iv_ruleSingleEnumComparison.current; } 
	 EOF 
;

// Rule SingleEnumComparison
ruleSingleEnumComparison returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSingleEnumComparisonAccess().getRefReferenceParserRuleCall_0_0(), currentNode); 
	    }
		lv_ref_0_0=ruleReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSingleEnumComparisonRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ref",
	        		lv_ref_0_0, 
	        		"Reference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getSingleEnumComparisonAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSingleEnumComparisonRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSingleEnumComparisonAccess().getELiteralEnumLiteralCrossReference_2_0(), "eLiteral"); 
	}

)
))
;





// Entry rule entryRuleMultiEnumComparison
entryRuleMultiEnumComparison returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiEnumComparisonRule(), currentNode); }
	 iv_ruleMultiEnumComparison=ruleMultiEnumComparison 
	 { $current=$iv_ruleMultiEnumComparison.current; } 
	 EOF 
;

// Rule MultiEnumComparison
ruleMultiEnumComparison returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiEnumComparisonAccess().getRefReferenceParserRuleCall_0_0(), currentNode); 
	    }
		lv_ref_0_0=ruleReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiEnumComparisonRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ref",
	        		lv_ref_0_0, 
	        		"Reference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiEnumComparisonAccess().getMembershipEnumMembershipEnumRuleCall_1_0(), currentNode); 
	    }
		lv_membership_1_0=ruleEnumMembership		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiEnumComparisonRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"membership",
	        		lv_membership_1_0, 
	        		"EnumMembership", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiEnumComparisonAccess().getELiteralsEnumLiteralsCollectionParserRuleCall_2_0(), currentNode); 
	    }
		lv_eLiterals_2_0=ruleEnumLiteralsCollection		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiEnumComparisonRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"eLiterals",
	        		lv_eLiterals_2_0, 
	        		"EnumLiteralsCollection", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleStringValueComparison
entryRuleStringValueComparison returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringValueComparisonRule(), currentNode); }
	 iv_ruleStringValueComparison=ruleStringValueComparison 
	 { $current=$iv_ruleStringValueComparison.current; } 
	 EOF 
;

// Rule StringValueComparison
ruleStringValueComparison returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStringValueComparisonAccess().getRefReferenceParserRuleCall_0_0(), currentNode); 
	    }
		lv_ref_0_0=ruleReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringValueComparisonRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ref",
	        		lv_ref_0_0, 
	        		"Reference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'equals' 
    {
        createLeafNode(grammarAccess.getStringValueComparisonAccess().getEqualsKeyword_1(), null); 
    }
(
(
		lv_targetValue_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStringValueComparisonAccess().getTargetValueSTRINGTerminalRuleCall_2_0(), "targetValue"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringValueComparisonRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"targetValue",
	        		lv_targetValue_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRulePresenceCheck
entryRulePresenceCheck returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPresenceCheckRule(), currentNode); }
	 iv_rulePresenceCheck=rulePresenceCheck 
	 { $current=$iv_rulePresenceCheck.current; } 
	 EOF 
;

// Rule PresenceCheck
rulePresenceCheck returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPresenceCheckAccess().getRefReferenceParserRuleCall_0_0(), currentNode); 
	    }
		lv_ref_0_0=ruleReference		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPresenceCheckRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ref",
	        		lv_ref_0_0, 
	        		"Reference", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'is-present' 
    {
        createLeafNode(grammarAccess.getPresenceCheckAccess().getIsPresentKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleEnumLiteralsCollection
entryRuleEnumLiteralsCollection returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumLiteralsCollectionRule(), currentNode); }
	 iv_ruleEnumLiteralsCollection=ruleEnumLiteralsCollection 
	 { $current=$iv_ruleEnumLiteralsCollection.current; } 
	 EOF 
;

// Rule EnumLiteralsCollection
ruleEnumLiteralsCollection returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getEnumLiteralsCollectionAccess().getDirectEnumLiteralsCollectionParserRuleCall_0(), currentNode); 
    }
    this_DirectEnumLiteralsCollection_0=ruleDirectEnumLiteralsCollection
    { 
        $current = $this_DirectEnumLiteralsCollection_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getEnumLiteralsCollectionAccess().getEnumListReferenceParserRuleCall_1(), currentNode); 
    }
    this_EnumListReference_1=ruleEnumListReference
    { 
        $current = $this_EnumListReference_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDirectEnumLiteralsCollection
entryRuleDirectEnumLiteralsCollection returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDirectEnumLiteralsCollectionRule(), currentNode); }
	 iv_ruleDirectEnumLiteralsCollection=ruleDirectEnumLiteralsCollection 
	 { $current=$iv_ruleDirectEnumLiteralsCollection.current; } 
	 EOF 
;

// Rule DirectEnumLiteralsCollection
ruleDirectEnumLiteralsCollection returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getDirectEnumLiteralsCollectionAccess().getDirectEnumLiteralsCollectionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDirectEnumLiteralsCollectionAccess().getDirectEnumLiteralsCollectionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getDirectEnumLiteralsCollectionAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getDirectEnumLiteralsCollectionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getDirectEnumLiteralsCollectionAccess().getLiteralsEnumLiteralCrossReference_2_0(), "literals"); 
	}

)
)*	')' 
    {
        createLeafNode(grammarAccess.getDirectEnumLiteralsCollectionAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleEnumListReference
entryRuleEnumListReference returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEnumListReferenceRule(), currentNode); }
	 iv_ruleEnumListReference=ruleEnumListReference 
	 { $current=$iv_ruleEnumListReference.current; } 
	 EOF 
;

// Rule EnumListReference
ruleEnumListReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getEnumListReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getEnumListReferenceAccess().getRefEnumListCrossReference_0(), "ref"); 
	}

)
)
;





// Rule AttributeClass
ruleAttributeClass returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'display' 
	{
        $current = grammarAccess.getAttributeClassAccess().getDisplayEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeClassAccess().getDisplayEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'required' 
	{
        $current = grammarAccess.getAttributeClassAccess().getRequiredEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeClassAccess().getRequiredEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'readonly' 
	{
        $current = grammarAccess.getAttributeClassAccess().getReadonlyEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeClassAccess().getReadonlyEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'calculated' 
	{
        $current = grammarAccess.getAttributeClassAccess().getCalculatedEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeClassAccess().getCalculatedEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'doubleAsterisk' 
	{
        $current = grammarAccess.getAttributeClassAccess().getDoubleAsteriskEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAttributeClassAccess().getDoubleAsteriskEnumLiteralDeclaration_4(), null); 
    }
));



// Rule BLiteral
ruleBLiteral returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'true' 
	{
        $current = grammarAccess.getBLiteralAccess().getTrueEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBLiteralAccess().getTrueEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'false' 
	{
        $current = grammarAccess.getBLiteralAccess().getFalseEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBLiteralAccess().getFalseEnumLiteralDeclaration_1(), null); 
    }
));



// Rule EnumMembership
ruleEnumMembership returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'is-one-of' 
	{
        $current = grammarAccess.getEnumMembershipAccess().getIsInEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEnumMembershipAccess().getIsInEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'is-not-one-of' 
	{
        $current = grammarAccess.getEnumMembershipAccess().getIsNotInEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getEnumMembershipAccess().getIsNotInEnumLiteralDeclaration_1(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


