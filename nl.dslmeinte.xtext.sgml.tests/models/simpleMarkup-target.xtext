
// generated by DTD2Xtext.xpt
grammar nl.dslmeinte.xtext.sgml.dtd.test.SimpleMarkup with nl.dslmeinte.xtext.sgml.dtd.Base hidden()

generate simplemarkup "http://dslmeinte.nl/Xtext/sgml/dtd/tests/simpleMarkup"


// override from Base to include root (of right type):
SgmlDocument hidden(WHITESPACE, HEADER_COMMENTS):
	OPEN_TAG 'SISGML' ('PUBLIC' | 'SYSTEM') header1=QUOTED_STRING header2=QUOTED_STRING?
		(OPEN_BRACKET entities+=Entity* CLOSE_BRACKET)? CLOSE_TAG
		root=Content
	;



Content hidden(SGML_COMMENTS):
	{Content}
	
	OPEN_TAG 'Content' 
	
CLOSE_TAG

	( (contents+=Reference)? (contents+=Section)+ )
	
	OPEN_TAG SLASH_SYMBOL 'Content' CLOSE_TAG

	;

Content_tagOpen hidden():
	OPEN_TAG 'Content' CLOSE_TAG
	;

Reference hidden(SGML_COMMENTS):
	referenceOpen=Reference_tagOpen
	
	OPEN_TAG 'Reference' 
	WHITESPACE to=QUOTED_STRING
CLOSE_TAG

	
	(
	OPEN_TAG SLASH_SYMBOL 'Reference' CLOSE_TAG
)?
	;

Reference_tagOpen hidden():
	OPEN_TAG 'Reference' WHITESPACE to=QUOTED_STRING CLOSE_TAG
	;

Section hidden(SGML_COMMENTS):
	{Section}
	
	OPEN_TAG 'Section' 
	WHITESPACE styleName=QUOTED_STRING?
CLOSE_TAG

	(contents+=Par)*
	
	OPEN_TAG SLASH_SYMBOL 'Section' CLOSE_TAG

	;

Par hidden(SGML_COMMENTS):
	{Par}
	
	OPEN_TAG 'Par' 
	WHITESPACE styleName=QUOTED_STRING?
CLOSE_TAG

	(( contents+=em | contents+=bf | contents+=_PCDATAContents* ))*
	
	OPEN_TAG SLASH_SYMBOL 'Par' CLOSE_TAG

	;

em hidden(SGML_COMMENTS):
	{em}
	
	OPEN_TAG 'em' 
	
CLOSE_TAG

	(( contents+=bf | contents+=_PCDATAContents* ))*
	
	OPEN_TAG SLASH_SYMBOL 'em' CLOSE_TAG

	;

bf hidden(SGML_COMMENTS):
	{bf}
	
	OPEN_TAG 'bf' 
	
CLOSE_TAG

	(( contents+=em | contents+=_PCDATAContents* ))*
	
	OPEN_TAG SLASH_SYMBOL 'bf' CLOSE_TAG

	;


