/*
 * The grammar definition for (currently: a sub set of) the DTD language
 * intended for defining SGML documents.
 *
 * (c) 2011 Meinte Boersma (http://www.dslconsultancy.com/)
 */

grammar nl.dslmeinte.xtext.dtd.DtdLanguage hidden(WS, COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore"	// required for defining terminal rules

generate dtdModel "http://www.dslmeinte.nl/xtext/DTD/model"


DocumentTypeDefinition:
	definitions+=Definition+
	;

Definition:
	Entity | Element | AttributeList
	;

Entity:
	'<!ENTITY' name=ID entity=STRING '>';

Element:
	'<!ELEMENT' name=ID content=Expression '>'
	;

Expression:
	PipeExpression
	;

PipeExpression returns Expression:
	CommaExpression ( {Alternatives.alternatives+=current} ( '|' alternatives+=CommaExpression )+ )?
	;

CommaExpression returns Expression:
	CardinalityExpression ( {Concatenation.members+=current} (',' members+=CardinalityExpression)+ )?
	;

CardinalityExpression returns Expression:
	PrimaryExpression ({Cardinality.nestedExpr=current} cardinality=ElementCardinality)?
	;

enum ElementCardinality:
	optional='?' | zeroOrMore='*' | oneOrMore='+'
	;
	// (no syntax for default cardinality which is 1 ~ required)

PrimaryExpression returns Expression:
	'(' Expression ')'
	| {EmptyContent} 'EMPTY'
	| {PCData} '#PCDATA'
	| {ElementReference} element=[Element]
	;

AttributeList:
	'<!ATTLIST' element=[Element] attributes+=Attribute+ '>'
	;

Attribute:
	name=ID 'CDATA' cardinality=AttributeCardinality
	;

enum AttributeCardinality:
	  required='#REQUIRED'
	| implied='#IMPLIED'
	;

terminal COMMENT	: '<!--' -> '-->';

// convenience super type for implemented a call stack:
//Rule:
//	Element | Expression;

// copied from org.eclipse.xtext.common.Terminals:
terminal ID		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal STRING	:
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		;
terminal WS		: (' '|'\t'|'\r'|'\n')+;

