/*
* generated by Xtext
*/
package nl.dslmeinte.xtext.examples.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import nl.dslmeinte.xtext.examples.services.XsdLanguageGrammarAccess;

public class XsdLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private XsdLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected nl.dslmeinte.xtext.examples.ui.contentassist.antlr.internal.InternalXsdLanguageParser createParser() {
		nl.dslmeinte.xtext.examples.ui.contentassist.antlr.internal.InternalXsdLanguageParser result = new nl.dslmeinte.xtext.examples.ui.contentassist.antlr.internal.InternalXsdLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTopLevelDefinitionAccess().getAlternatives(), "rule__TopLevelDefinition__Alternatives");
					put(grammarAccess.getTopLevelTypeAccess().getAlternatives(), "rule__TopLevelType__Alternatives");
					put(grammarAccess.getTopLevelElementAccess().getAlternatives_2(), "rule__TopLevelElement__Alternatives_2");
					put(grammarAccess.getFacetAccess().getAlternatives(), "rule__Facet__Alternatives");
					put(grammarAccess.getEnumerationLiteralAccess().getValueAlternatives_0_0(), "rule__EnumerationLiteral__ValueAlternatives_0_0");
					put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
					put(grammarAccess.getElementAccess().getAlternatives_1(), "rule__Element__Alternatives_1");
					put(grammarAccess.getMultiplicityAccess().getAlternatives_3(), "rule__Multiplicity__Alternatives_3");
					put(grammarAccess.getNamedTypeReferenceAccess().getAlternatives(), "rule__NamedTypeReference__Alternatives");
					put(grammarAccess.getNonComplexTypeReferenceAccess().getAlternatives(), "rule__NonComplexTypeReference__Alternatives");
					put(grammarAccess.getTopLevelTypeReferenceAccess().getAlternatives(), "rule__TopLevelTypeReference__Alternatives");
					put(grammarAccess.getTopLevelComplexTypeReferenceAccess().getAlternatives(), "rule__TopLevelComplexTypeReference__Alternatives");
					put(grammarAccess.getTopLevelSimpleTypeReferenceAccess().getAlternatives(), "rule__TopLevelSimpleTypeReference__Alternatives");
					put(grammarAccess.getImportedReferenceAccess().getAlternatives(), "rule__ImportedReference__Alternatives");
					put(grammarAccess.getEmbeddedTypeAccess().getAlternatives(), "rule__EmbeddedType__Alternatives");
					put(grammarAccess.getComplexTypeAccess().getAlternatives(), "rule__ComplexType__Alternatives");
					put(grammarAccess.getSimpleTypeAccess().getAlternatives(), "rule__SimpleType__Alternatives");
					put(grammarAccess.getBuiltinTypeAccess().getAlternatives(), "rule__BuiltinType__Alternatives");
					put(grammarAccess.getSchemaAccess().getGroup(), "rule__Schema__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getTopLevelElementAccess().getGroup(), "rule__TopLevelElement__Group__0");
					put(grammarAccess.getTopLevelElementAccess().getGroup_2_0(), "rule__TopLevelElement__Group_2_0__0");
					put(grammarAccess.getTopLevelElementAccess().getGroup_2_1(), "rule__TopLevelElement__Group_2_1__0");
					put(grammarAccess.getTopLevelSimpleTypeAccess().getGroup(), "rule__TopLevelSimpleType__Group__0");
					put(grammarAccess.getRestrictionAccess().getGroup(), "rule__Restriction__Group__0");
					put(grammarAccess.getEnumerationFacetAccess().getGroup(), "rule__EnumerationFacet__Group__0");
					put(grammarAccess.getEnumerationLiteralAccess().getGroup(), "rule__EnumerationLiteral__Group__0");
					put(grammarAccess.getEnumerationLiteralAccess().getGroup_1(), "rule__EnumerationLiteral__Group_1__0");
					put(grammarAccess.getMaxLengthFacetAccess().getGroup(), "rule__MaxLengthFacet__Group__0");
					put(grammarAccess.getPatternFacetAccess().getGroup(), "rule__PatternFacet__Group__0");
					put(grammarAccess.getRangeFacetAccess().getGroup(), "rule__RangeFacet__Group__0");
					put(grammarAccess.getLengthFacetAccess().getGroup(), "rule__LengthFacet__Group__0");
					put(grammarAccess.getDocumentationAccess().getGroup(), "rule__Documentation__Group__0");
					put(grammarAccess.getTopLevelComplexTypeAccess().getGroup(), "rule__TopLevelComplexType__Group__0");
					put(grammarAccess.getTopLevelComplexTypeAccess().getGroup_3(), "rule__TopLevelComplexType__Group_3__0");
					put(grammarAccess.getTopLevelComplexTypeAccess().getGroup_7(), "rule__TopLevelComplexType__Group_7__0");
					put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
					put(grammarAccess.getElementAccess().getGroup_1_0(), "rule__Element__Group_1_0__0");
					put(grammarAccess.getElementAccess().getGroup_1_1(), "rule__Element__Group_1_1__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getMultiplicityAccess().getGroup(), "rule__Multiplicity__Group__0");
					put(grammarAccess.getMultiplicityAccess().getGroup_2(), "rule__Multiplicity__Group_2__0");
					put(grammarAccess.getImportedTopLevelTypeReferenceAccess().getGroup(), "rule__ImportedTopLevelTypeReference__Group__0");
					put(grammarAccess.getImportedTopLevelSimpleTypeReferenceAccess().getGroup(), "rule__ImportedTopLevelSimpleTypeReference__Group__0");
					put(grammarAccess.getImportedTopLevelComplexTypeReferenceAccess().getGroup(), "rule__ImportedTopLevelComplexTypeReference__Group__0");
					put(grammarAccess.getEmbeddedComplexTypeAccess().getGroup(), "rule__EmbeddedComplexType__Group__0");
					put(grammarAccess.getEmbeddedComplexTypeAccess().getGroup_2(), "rule__EmbeddedComplexType__Group_2__0");
					put(grammarAccess.getEmbeddedSimpleTypeAccess().getGroup(), "rule__EmbeddedSimpleType__Group__0");
					put(grammarAccess.getSchemaAccess().getNameAssignment_1(), "rule__Schema__NameAssignment_1");
					put(grammarAccess.getSchemaAccess().getNsURIAssignment_3(), "rule__Schema__NsURIAssignment_3");
					put(grammarAccess.getSchemaAccess().getImportsAssignment_4(), "rule__Schema__ImportsAssignment_4");
					put(grammarAccess.getSchemaAccess().getDefinitionsAssignment_5(), "rule__Schema__DefinitionsAssignment_5");
					put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
					put(grammarAccess.getImportAccess().getNsPrefixAssignment_3(), "rule__Import__NsPrefixAssignment_3");
					put(grammarAccess.getTopLevelElementAccess().getNameAssignment_1(), "rule__TopLevelElement__NameAssignment_1");
					put(grammarAccess.getTopLevelElementAccess().getTypeRefAssignment_2_0_1(), "rule__TopLevelElement__TypeRefAssignment_2_0_1");
					put(grammarAccess.getTopLevelElementAccess().getEmbeddedTypeDefAssignment_2_1_1(), "rule__TopLevelElement__EmbeddedTypeDefAssignment_2_1_1");
					put(grammarAccess.getTopLevelSimpleTypeAccess().getNameAssignment_1(), "rule__TopLevelSimpleType__NameAssignment_1");
					put(grammarAccess.getTopLevelSimpleTypeAccess().getRestrictionAssignment_2(), "rule__TopLevelSimpleType__RestrictionAssignment_2");
					put(grammarAccess.getTopLevelSimpleTypeAccess().getDocumentationAssignment_3(), "rule__TopLevelSimpleType__DocumentationAssignment_3");
					put(grammarAccess.getRestrictionAccess().getTypeRefAssignment_1(), "rule__Restriction__TypeRefAssignment_1");
					put(grammarAccess.getRestrictionAccess().getFacetsAssignment_4(), "rule__Restriction__FacetsAssignment_4");
					put(grammarAccess.getEnumerationFacetAccess().getLiteralsAssignment_2(), "rule__EnumerationFacet__LiteralsAssignment_2");
					put(grammarAccess.getEnumerationLiteralAccess().getValueAssignment_0(), "rule__EnumerationLiteral__ValueAssignment_0");
					put(grammarAccess.getEnumerationLiteralAccess().getAnnotationAssignment_1_1(), "rule__EnumerationLiteral__AnnotationAssignment_1_1");
					put(grammarAccess.getMaxLengthFacetAccess().getMaxLengthAssignment_2(), "rule__MaxLengthFacet__MaxLengthAssignment_2");
					put(grammarAccess.getPatternFacetAccess().getPatternAssignment_2(), "rule__PatternFacet__PatternAssignment_2");
					put(grammarAccess.getRangeFacetAccess().getLowerAssignment_2(), "rule__RangeFacet__LowerAssignment_2");
					put(grammarAccess.getRangeFacetAccess().getUpperAssignment_4(), "rule__RangeFacet__UpperAssignment_4");
					put(grammarAccess.getLengthFacetAccess().getLengthAssignment_2(), "rule__LengthFacet__LengthAssignment_2");
					put(grammarAccess.getDocumentationAccess().getTextAssignment_1(), "rule__Documentation__TextAssignment_1");
					put(grammarAccess.getTopLevelComplexTypeAccess().getAbstractAssignment_0(), "rule__TopLevelComplexType__AbstractAssignment_0");
					put(grammarAccess.getTopLevelComplexTypeAccess().getNameAssignment_2(), "rule__TopLevelComplexType__NameAssignment_2");
					put(grammarAccess.getTopLevelComplexTypeAccess().getExtendsAssignment_3_1(), "rule__TopLevelComplexType__ExtendsAssignment_3_1");
					put(grammarAccess.getTopLevelComplexTypeAccess().getPropertiesAssignment_5(), "rule__TopLevelComplexType__PropertiesAssignment_5");
					put(grammarAccess.getTopLevelComplexTypeAccess().getDocumentationAssignment_7_1(), "rule__TopLevelComplexType__DocumentationAssignment_7_1");
					put(grammarAccess.getElementAccess().getNameAssignment_0(), "rule__Element__NameAssignment_0");
					put(grammarAccess.getElementAccess().getTypeRefAssignment_1_0_1(), "rule__Element__TypeRefAssignment_1_0_1");
					put(grammarAccess.getElementAccess().getEmbeddedTypeDefAssignment_1_1_1(), "rule__Element__EmbeddedTypeDefAssignment_1_1_1");
					put(grammarAccess.getElementAccess().getMultiplicityAssignment_2(), "rule__Element__MultiplicityAssignment_2");
					put(grammarAccess.getAttributeAccess().getRequiredAssignment_0(), "rule__Attribute__RequiredAssignment_0");
					put(grammarAccess.getAttributeAccess().getNameAssignment_2(), "rule__Attribute__NameAssignment_2");
					put(grammarAccess.getAttributeAccess().getTypeRefAssignment_4(), "rule__Attribute__TypeRefAssignment_4");
					put(grammarAccess.getMultiplicityAccess().getLowerAssignment_2_0(), "rule__Multiplicity__LowerAssignment_2_0");
					put(grammarAccess.getMultiplicityAccess().getUpperAssignment_3_0(), "rule__Multiplicity__UpperAssignment_3_0");
					put(grammarAccess.getMultiplicityAccess().getUnboundedAssignment_3_1(), "rule__Multiplicity__UnboundedAssignment_3_1");
					put(grammarAccess.getBuiltinTypeReferenceAccess().getBuiltinAssignment(), "rule__BuiltinTypeReference__BuiltinAssignment");
					put(grammarAccess.getDirectTopLevelTypeReferenceAccess().getRefAssignment(), "rule__DirectTopLevelTypeReference__RefAssignment");
					put(grammarAccess.getDirectTopLevelSimpleTypeReferenceAccess().getRefAssignment(), "rule__DirectTopLevelSimpleTypeReference__RefAssignment");
					put(grammarAccess.getDirectTopLevelComplexTypeReferenceAccess().getRefAssignment(), "rule__DirectTopLevelComplexTypeReference__RefAssignment");
					put(grammarAccess.getImportedTopLevelTypeReferenceAccess().getImportAssignment_0(), "rule__ImportedTopLevelTypeReference__ImportAssignment_0");
					put(grammarAccess.getImportedTopLevelTypeReferenceAccess().getRefAssignment_2(), "rule__ImportedTopLevelTypeReference__RefAssignment_2");
					put(grammarAccess.getImportedTopLevelSimpleTypeReferenceAccess().getImportAssignment_0(), "rule__ImportedTopLevelSimpleTypeReference__ImportAssignment_0");
					put(grammarAccess.getImportedTopLevelSimpleTypeReferenceAccess().getRefAssignment_2(), "rule__ImportedTopLevelSimpleTypeReference__RefAssignment_2");
					put(grammarAccess.getImportedTopLevelComplexTypeReferenceAccess().getImportAssignment_0(), "rule__ImportedTopLevelComplexTypeReference__ImportAssignment_0");
					put(grammarAccess.getImportedTopLevelComplexTypeReferenceAccess().getRefAssignment_2(), "rule__ImportedTopLevelComplexTypeReference__RefAssignment_2");
					put(grammarAccess.getEmbeddedComplexTypeAccess().getExtendsAssignment_2_1(), "rule__EmbeddedComplexType__ExtendsAssignment_2_1");
					put(grammarAccess.getEmbeddedComplexTypeAccess().getPropertiesAssignment_4(), "rule__EmbeddedComplexType__PropertiesAssignment_4");
					put(grammarAccess.getEmbeddedSimpleTypeAccess().getRestrictionAssignment_1(), "rule__EmbeddedSimpleType__RestrictionAssignment_1");
					put(grammarAccess.getEmbeddedSimpleTypeAccess().getDocumentationAssignment_2(), "rule__EmbeddedSimpleType__DocumentationAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			nl.dslmeinte.xtext.examples.ui.contentassist.antlr.internal.InternalXsdLanguageParser typedParser = (nl.dslmeinte.xtext.examples.ui.contentassist.antlr.internal.InternalXsdLanguageParser) parser;
			typedParser.entryRuleSchema();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public XsdLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(XsdLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
