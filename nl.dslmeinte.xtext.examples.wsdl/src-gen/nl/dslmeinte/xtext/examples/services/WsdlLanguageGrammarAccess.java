/*
* generated by Xtext
*/

package nl.dslmeinte.xtext.examples.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class WsdlLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWsdlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cNamespaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNsUriAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNsUriSTRINGTerminalRuleCall_3_0 = (RuleCall)cNsUriAssignment_3.eContents().get(0);
		private final Assignment cXsdImportAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXsdImportXsdImportParserRuleCall_4_0 = (RuleCall)cXsdImportAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMessagesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMessagesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMessagesMessageParserRuleCall_5_1_0 = (RuleCall)cMessagesAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPortTypesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPortTypesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPortTypesPortTypeParserRuleCall_6_1_0 = (RuleCall)cPortTypesAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cBindingsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cBindingsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cBindingsBindingParserRuleCall_7_1_0 = (RuleCall)cBindingsAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cServicesKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cServicesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cServicesServiceParserRuleCall_8_1_0 = (RuleCall)cServicesAssignment_8_1.eContents().get(0);
		
		/// *
		// * Grammar for a Web Service Definition Language.
		// *
		// * Currently, it still follows the WSDL specification quite literally,
		// * not raising the level of abstraction and basically only providing
		// * some syntactic above anything else.
		// * Beyond that, it (somewhat) mimics the possibilities offered by the
		// * Eclipse WTP WSDL Wizard.
		// * /Definitions:
		//	"wsdl" name=ID "namespace:" nsUri=STRING xsdImport=XsdImport ("messages:" messages+=Message*)? ("portTypes:"
		//	portTypes+=PortType*)? ("bindings:" bindings+=Binding*)? ("services:" services+=Service*)?;
		public ParserRule getRule() { return rule; }

		//"wsdl" name=ID "namespace:" nsUri=STRING xsdImport=XsdImport ("messages:" messages+=Message*)? ("portTypes:"
		//portTypes+=PortType*)? ("bindings:" bindings+=Binding*)? ("services:" services+=Service*)?
		public Group getGroup() { return cGroup; }

		//"wsdl"
		public Keyword getWsdlKeyword_0() { return cWsdlKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"namespace:"
		public Keyword getNamespaceKeyword_2() { return cNamespaceKeyword_2; }

		//nsUri=STRING
		public Assignment getNsUriAssignment_3() { return cNsUriAssignment_3; }

		//STRING
		public RuleCall getNsUriSTRINGTerminalRuleCall_3_0() { return cNsUriSTRINGTerminalRuleCall_3_0; }

		//xsdImport=XsdImport
		public Assignment getXsdImportAssignment_4() { return cXsdImportAssignment_4; }

		//XsdImport
		public RuleCall getXsdImportXsdImportParserRuleCall_4_0() { return cXsdImportXsdImportParserRuleCall_4_0; }

		//("messages:" messages+=Message*)?
		public Group getGroup_5() { return cGroup_5; }

		//"messages:"
		public Keyword getMessagesKeyword_5_0() { return cMessagesKeyword_5_0; }

		//messages+=Message*
		public Assignment getMessagesAssignment_5_1() { return cMessagesAssignment_5_1; }

		//Message
		public RuleCall getMessagesMessageParserRuleCall_5_1_0() { return cMessagesMessageParserRuleCall_5_1_0; }

		//("portTypes:" portTypes+=PortType*)?
		public Group getGroup_6() { return cGroup_6; }

		//"portTypes:"
		public Keyword getPortTypesKeyword_6_0() { return cPortTypesKeyword_6_0; }

		//portTypes+=PortType*
		public Assignment getPortTypesAssignment_6_1() { return cPortTypesAssignment_6_1; }

		//PortType
		public RuleCall getPortTypesPortTypeParserRuleCall_6_1_0() { return cPortTypesPortTypeParserRuleCall_6_1_0; }

		//("bindings:" bindings+=Binding*)?
		public Group getGroup_7() { return cGroup_7; }

		//"bindings:"
		public Keyword getBindingsKeyword_7_0() { return cBindingsKeyword_7_0; }

		//bindings+=Binding*
		public Assignment getBindingsAssignment_7_1() { return cBindingsAssignment_7_1; }

		//Binding
		public RuleCall getBindingsBindingParserRuleCall_7_1_0() { return cBindingsBindingParserRuleCall_7_1_0; }

		//("services:" services+=Service*)?
		public Group getGroup_8() { return cGroup_8; }

		//"services:"
		public Keyword getServicesKeyword_8_0() { return cServicesKeyword_8_0; }

		//services+=Service*
		public Assignment getServicesAssignment_8_1() { return cServicesAssignment_8_1; }

		//Service
		public RuleCall getServicesServiceParserRuleCall_8_1_0() { return cServicesServiceParserRuleCall_8_1_0; }
	}

	public class XsdImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XsdImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXsdImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNsPrefixAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNsPrefixIDTerminalRuleCall_3_0 = (RuleCall)cNsPrefixAssignment_3.eContents().get(0);
		
		/// *
		//     * Note: optionality is currently for convenience only.
		//     * In the future, it may be useful for modularization/composition through importing.
		//     * /XsdImport:
		//	"xsd-import" importURI=STRING "as" nsPrefix=ID;
		public ParserRule getRule() { return rule; }

		//"xsd-import" importURI=STRING "as" nsPrefix=ID
		public Group getGroup() { return cGroup; }

		//"xsd-import"
		public Keyword getXsdImportKeyword_0() { return cXsdImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//nsPrefix=ID
		public Assignment getNsPrefixAssignment_3() { return cNsPrefixAssignment_3; }

		//ID
		public RuleCall getNsPrefixIDTerminalRuleCall_3_0() { return cNsPrefixIDTerminalRuleCall_3_0; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartsPartParserRuleCall_2_0 = (RuleCall)cPartsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// *
		//     * As an alternative to a full (and currently, single) XSD import,
		//     * consider creating a (similar) sub-DSL with the same intent and
		//     * expressiveness.
		//     * /// semantically: payload definitions
		//Message:
		//	name=ID "{" parts+=Part* "}";
		public ParserRule getRule() { return rule; }

		//name=ID "{" parts+=Part* "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//parts+=Part*
		public Assignment getPartsAssignment_2() { return cPartsAssignment_2; }

		//Part
		public RuleCall getPartsPartParserRuleCall_2_0() { return cPartsPartParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDefTopLevelDefinitionCrossReference_2_0 = (CrossReference)cDefAssignment_2.eContents().get(0);
		private final RuleCall cDefTopLevelDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cDefTopLevelDefinitionCrossReference_2_0.eContents().get(1);
		
		//Part:
		//	name=ID "->" def=[xsdr::TopLevelDefinition];
		public ParserRule getRule() { return rule; }

		//name=ID "->" def=[xsdr::TopLevelDefinition]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//def=[xsdr::TopLevelDefinition]
		public Assignment getDefAssignment_2() { return cDefAssignment_2; }

		//[xsdr::TopLevelDefinition]
		public CrossReference getDefTopLevelDefinitionCrossReference_2_0() { return cDefTopLevelDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getDefTopLevelDefinitionIDTerminalRuleCall_2_0_1() { return cDefTopLevelDefinitionIDTerminalRuleCall_2_0_1; }
	}

	public class PortTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperationsOperationParserRuleCall_2_0 = (RuleCall)cOperationsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// scoping: all Representation.definitions of imported XSDr
		//PortType:
		//	name=ID "{" operations+=Operation* "}";
		public ParserRule getRule() { return rule; }

		//name=ID "{" operations+=Operation* "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//operations+=Operation*
		public Assignment getOperationsAssignment_2() { return cOperationsAssignment_2; }

		//Operation
		public RuleCall getOperationsOperationParserRuleCall_2_0() { return cOperationsOperationParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOneWayOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRequestResponseOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSolicitResponseOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNotificationOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Operation:
		//	OneWayOperation | RequestResponseOperation | SolicitResponseOperation | NotificationOperation;
		public ParserRule getRule() { return rule; }

		//OneWayOperation | RequestResponseOperation | SolicitResponseOperation | NotificationOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//OneWayOperation
		public RuleCall getOneWayOperationParserRuleCall_0() { return cOneWayOperationParserRuleCall_0; }

		//RequestResponseOperation
		public RuleCall getRequestResponseOperationParserRuleCall_1() { return cRequestResponseOperationParserRuleCall_1; }

		//SolicitResponseOperation
		public RuleCall getSolicitResponseOperationParserRuleCall_2() { return cSolicitResponseOperationParserRuleCall_2; }

		//NotificationOperation
		public RuleCall getNotificationOperationParserRuleCall_3() { return cNotificationOperationParserRuleCall_3; }
	}

	public class OneWayOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OneWayOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInputMessageCrossReference_3_0 = (CrossReference)cInputAssignment_3.eContents().get(0);
		private final RuleCall cInputMessageIDTerminalRuleCall_3_0_1 = (RuleCall)cInputMessageCrossReference_3_0.eContents().get(1);
		
		//OneWayOperation:
		//	"operation" name=ID ":" input=[Message];
		public ParserRule getRule() { return rule; }

		//"operation" name=ID ":" input=[Message]
		public Group getGroup() { return cGroup; }

		//"operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//input=[Message]
		public Assignment getInputAssignment_3() { return cInputAssignment_3; }

		//[Message]
		public CrossReference getInputMessageCrossReference_3_0() { return cInputMessageCrossReference_3_0; }

		//ID
		public RuleCall getInputMessageIDTerminalRuleCall_3_0_1() { return cInputMessageIDTerminalRuleCall_3_0_1; }
	}

	public class RequestResponseOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequestResponseOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInputMessageCrossReference_3_0 = (CrossReference)cInputAssignment_3.eContents().get(0);
		private final RuleCall cInputMessageIDTerminalRuleCall_3_0_1 = (RuleCall)cInputMessageCrossReference_3_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutputAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cOutputMessageCrossReference_5_0 = (CrossReference)cOutputAssignment_5.eContents().get(0);
		private final RuleCall cOutputMessageIDTerminalRuleCall_5_0_1 = (RuleCall)cOutputMessageCrossReference_5_0.eContents().get(1);
		
		//RequestResponseOperation:
		//	"operation" name=ID ":" input=[Message] "->" output=[Message];
		public ParserRule getRule() { return rule; }

		//"operation" name=ID ":" input=[Message] "->" output=[Message]
		public Group getGroup() { return cGroup; }

		//"operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//input=[Message]
		public Assignment getInputAssignment_3() { return cInputAssignment_3; }

		//[Message]
		public CrossReference getInputMessageCrossReference_3_0() { return cInputMessageCrossReference_3_0; }

		//ID
		public RuleCall getInputMessageIDTerminalRuleCall_3_0_1() { return cInputMessageIDTerminalRuleCall_3_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }

		//output=[Message]
		public Assignment getOutputAssignment_5() { return cOutputAssignment_5; }

		//[Message]
		public CrossReference getOutputMessageCrossReference_5_0() { return cOutputMessageCrossReference_5_0; }

		//ID
		public RuleCall getOutputMessageIDTerminalRuleCall_5_0_1() { return cOutputMessageIDTerminalRuleCall_5_0_1; }
	}

	public class SolicitResponseOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SolicitResponseOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInputMessageCrossReference_3_0 = (CrossReference)cInputAssignment_3.eContents().get(0);
		private final RuleCall cInputMessageIDTerminalRuleCall_3_0_1 = (RuleCall)cInputMessageCrossReference_3_0.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutputAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cOutputMessageCrossReference_5_0 = (CrossReference)cOutputAssignment_5.eContents().get(0);
		private final RuleCall cOutputMessageIDTerminalRuleCall_5_0_1 = (RuleCall)cOutputMessageCrossReference_5_0.eContents().get(1);
		
		//SolicitResponseOperation:
		//	"operation" name=ID ":" input=[Message] "<-" output=[Message];
		public ParserRule getRule() { return rule; }

		//"operation" name=ID ":" input=[Message] "<-" output=[Message]
		public Group getGroup() { return cGroup; }

		//"operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//input=[Message]
		public Assignment getInputAssignment_3() { return cInputAssignment_3; }

		//[Message]
		public CrossReference getInputMessageCrossReference_3_0() { return cInputMessageCrossReference_3_0; }

		//ID
		public RuleCall getInputMessageIDTerminalRuleCall_3_0_1() { return cInputMessageIDTerminalRuleCall_3_0_1; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_4() { return cLessThanSignHyphenMinusKeyword_4; }

		//output=[Message]
		public Assignment getOutputAssignment_5() { return cOutputAssignment_5; }

		//[Message]
		public CrossReference getOutputMessageCrossReference_5_0() { return cOutputMessageCrossReference_5_0; }

		//ID
		public RuleCall getOutputMessageIDTerminalRuleCall_5_0_1() { return cOutputMessageIDTerminalRuleCall_5_0_1; }
	}

	public class NotificationOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotificationOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutputAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cOutputMessageCrossReference_4_0 = (CrossReference)cOutputAssignment_4.eContents().get(0);
		private final RuleCall cOutputMessageIDTerminalRuleCall_4_0_1 = (RuleCall)cOutputMessageCrossReference_4_0.eContents().get(1);
		
		//NotificationOperation:
		//	"operation" name=ID ":" "->" output=[Message];
		public ParserRule getRule() { return rule; }

		//"operation" name=ID ":" "->" output=[Message]
		public Group getGroup() { return cGroup; }

		//"operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//output=[Message]
		public Assignment getOutputAssignment_4() { return cOutputAssignment_4; }

		//[Message]
		public CrossReference getOutputMessageCrossReference_4_0() { return cOutputMessageCrossReference_4_0; }

		//ID
		public RuleCall getOutputMessageIDTerminalRuleCall_4_0_1() { return cOutputMessageIDTerminalRuleCall_4_0_1; }
	}

	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cBindsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypePortTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypePortTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypePortTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cUsingKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTransportAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransportTransportParserRuleCall_4_0 = (RuleCall)cTransportAssignment_4.eContents().get(0);
		
		//// TODO  add fault functionality
		//Binding:
		//	name=ID "binds" type=[PortType] "using" transport=Transport;
		public ParserRule getRule() { return rule; }

		//name=ID "binds" type=[PortType] "using" transport=Transport
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"binds"
		public Keyword getBindsKeyword_1() { return cBindsKeyword_1; }

		//type=[PortType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[PortType]
		public CrossReference getTypePortTypeCrossReference_2_0() { return cTypePortTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypePortTypeIDTerminalRuleCall_2_0_1() { return cTypePortTypeIDTerminalRuleCall_2_0_1; }

		//"using"
		public Keyword getUsingKeyword_3() { return cUsingKeyword_3; }

		//transport=Transport
		public Assignment getTransportAssignment_4() { return cTransportAssignment_4; }

		//Transport
		public RuleCall getTransportTransportParserRuleCall_4_0() { return cTransportTransportParserRuleCall_4_0; }
	}

	public class TransportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transport");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSoapTransportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHttpTransportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Transport:
		//	SoapTransport | HttpTransport;
		public ParserRule getRule() { return rule; }

		//SoapTransport | HttpTransport
		public Alternatives getAlternatives() { return cAlternatives; }

		//SoapTransport
		public RuleCall getSoapTransportParserRuleCall_0() { return cSoapTransportParserRuleCall_0; }

		//HttpTransport
		public RuleCall getHttpTransportParserRuleCall_1() { return cHttpTransportParserRuleCall_1; }
	}

	public class SoapTransportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SoapTransport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSoapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeSoapTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SoapTransport:
		//	"soap" "(" type=SoapType ")";
		public ParserRule getRule() { return rule; }

		//"soap" "(" type=SoapType ")"
		public Group getGroup() { return cGroup; }

		//"soap"
		public Keyword getSoapKeyword_0() { return cSoapKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=SoapType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//SoapType
		public RuleCall getTypeSoapTypeEnumRuleCall_2_0() { return cTypeSoapTypeEnumRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class HttpTransportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HttpTransport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHttpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeHttpTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//HttpTransport:
		//	"http" "-" type=HttpType;
		public ParserRule getRule() { return rule; }

		//"http" "-" type=HttpType
		public Group getGroup() { return cGroup; }

		//"http"
		public Keyword getHttpKeyword_0() { return cHttpKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//type=HttpType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//HttpType
		public RuleCall getTypeHttpTypeEnumRuleCall_2_0() { return cTypeHttpTypeEnumRuleCall_2_0; }
	}

	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDocumentationKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDocumentationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDocumentationSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDocumentationAssignment_2_1.eContents().get(0);
		private final Assignment cPortsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPortsPortParserRuleCall_3_0 = (RuleCall)cPortsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Service:
		//	name=ID "{" ("documentation" documentation=STRING)? ports+=Port* "}";
		public ParserRule getRule() { return rule; }

		//name=ID "{" ("documentation" documentation=STRING)? ports+=Port* "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("documentation" documentation=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"documentation"
		public Keyword getDocumentationKeyword_2_0() { return cDocumentationKeyword_2_0; }

		//documentation=STRING
		public Assignment getDocumentationAssignment_2_1() { return cDocumentationAssignment_2_1; }

		//STRING
		public RuleCall getDocumentationSTRINGTerminalRuleCall_2_1_0() { return cDocumentationSTRINGTerminalRuleCall_2_1_0; }

		//ports+=Port*
		public Assignment getPortsAssignment_3() { return cPortsAssignment_3; }

		//Port
		public RuleCall getPortsPortParserRuleCall_3_0() { return cPortsPortParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cBindsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBindingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cBindingBindingCrossReference_3_0 = (CrossReference)cBindingAssignment_3.eContents().get(0);
		private final RuleCall cBindingBindingIDTerminalRuleCall_3_0_1 = (RuleCall)cBindingBindingCrossReference_3_0.eContents().get(1);
		private final Keyword cOnKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLocationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLocationSTRINGTerminalRuleCall_5_0 = (RuleCall)cLocationAssignment_5.eContents().get(0);
		
		//Port:
		//	"port" name=ID "binds" binding=[Binding] "on" location= // URI
		//	STRING;
		public ParserRule getRule() { return rule; }

		//"port" name=ID "binds" binding=[Binding] "on" location= // URI
		//STRING
		public Group getGroup() { return cGroup; }

		//"port"
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"binds"
		public Keyword getBindsKeyword_2() { return cBindsKeyword_2; }

		//binding=[Binding]
		public Assignment getBindingAssignment_3() { return cBindingAssignment_3; }

		//[Binding]
		public CrossReference getBindingBindingCrossReference_3_0() { return cBindingBindingCrossReference_3_0; }

		//ID
		public RuleCall getBindingBindingIDTerminalRuleCall_3_0_1() { return cBindingBindingIDTerminalRuleCall_3_0_1; }

		//"on"
		public Keyword getOnKeyword_4() { return cOnKeyword_4; }

		//location= // URI
		//STRING
		public Assignment getLocationAssignment_5() { return cLocationAssignment_5; }

		//// URI
		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_5_0() { return cLocationSTRINGTerminalRuleCall_5_0; }
	}
	
	
	public class SoapTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SoapType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDocumentEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDocumentDocumentKeyword_0_0 = (Keyword)cDocumentEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRpcEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRpcRpcKeyword_1_0 = (Keyword)cRpcEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SoapType:
		//	document | rpc;
		public EnumRule getRule() { return rule; }

		//document | rpc
		public Alternatives getAlternatives() { return cAlternatives; }

		//document
		public EnumLiteralDeclaration getDocumentEnumLiteralDeclaration_0() { return cDocumentEnumLiteralDeclaration_0; }

		//"document"
		public Keyword getDocumentDocumentKeyword_0_0() { return cDocumentDocumentKeyword_0_0; }

		//rpc
		public EnumLiteralDeclaration getRpcEnumLiteralDeclaration_1() { return cRpcEnumLiteralDeclaration_1; }

		//"rpc"
		public Keyword getRpcRpcKeyword_1_0() { return cRpcRpcKeyword_1_0; }
	}

	public class HttpTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "HttpType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGetEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGetGetKeyword_0_0 = (Keyword)cGetEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPutPutKeyword_1_0 = (Keyword)cPutEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum HttpType:
		//	get | put;
		public EnumRule getRule() { return rule; }

		//get | put
		public Alternatives getAlternatives() { return cAlternatives; }

		//get
		public EnumLiteralDeclaration getGetEnumLiteralDeclaration_0() { return cGetEnumLiteralDeclaration_0; }

		//"get"
		public Keyword getGetGetKeyword_0_0() { return cGetGetKeyword_0_0; }

		//put
		public EnumLiteralDeclaration getPutEnumLiteralDeclaration_1() { return cPutEnumLiteralDeclaration_1; }

		//"put"
		public Keyword getPutPutKeyword_1_0() { return cPutPutKeyword_1_0; }
	}
	
	private DefinitionsElements pDefinitions;
	private XsdImportElements pXsdImport;
	private MessageElements pMessage;
	private PartElements pPart;
	private PortTypeElements pPortType;
	private OperationElements pOperation;
	private OneWayOperationElements pOneWayOperation;
	private RequestResponseOperationElements pRequestResponseOperation;
	private SolicitResponseOperationElements pSolicitResponseOperation;
	private NotificationOperationElements pNotificationOperation;
	private BindingElements pBinding;
	private TransportElements pTransport;
	private SoapTransportElements pSoapTransport;
	private SoapTypeElements unknownRuleSoapType;
	private HttpTransportElements pHttpTransport;
	private HttpTypeElements unknownRuleHttpType;
	private ServiceElements pService;
	private PortElements pPort;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public WsdlLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * Grammar for a Web Service Definition Language.
	// *
	// * Currently, it still follows the WSDL specification quite literally,
	// * not raising the level of abstraction and basically only providing
	// * some syntactic above anything else.
	// * Beyond that, it (somewhat) mimics the possibilities offered by the
	// * Eclipse WTP WSDL Wizard.
	// * /Definitions:
	//	"wsdl" name=ID "namespace:" nsUri=STRING xsdImport=XsdImport ("messages:" messages+=Message*)? ("portTypes:"
	//	portTypes+=PortType*)? ("bindings:" bindings+=Binding*)? ("services:" services+=Service*)?;
	public DefinitionsElements getDefinitionsAccess() {
		return (pDefinitions != null) ? pDefinitions : (pDefinitions = new DefinitionsElements());
	}
	
	public ParserRule getDefinitionsRule() {
		return getDefinitionsAccess().getRule();
	}

	/// *
	//     * Note: optionality is currently for convenience only.
	//     * In the future, it may be useful for modularization/composition through importing.
	//     * /XsdImport:
	//	"xsd-import" importURI=STRING "as" nsPrefix=ID;
	public XsdImportElements getXsdImportAccess() {
		return (pXsdImport != null) ? pXsdImport : (pXsdImport = new XsdImportElements());
	}
	
	public ParserRule getXsdImportRule() {
		return getXsdImportAccess().getRule();
	}

	/// *
	//     * As an alternative to a full (and currently, single) XSD import,
	//     * consider creating a (similar) sub-DSL with the same intent and
	//     * expressiveness.
	//     * /// semantically: payload definitions
	//Message:
	//	name=ID "{" parts+=Part* "}";
	public MessageElements getMessageAccess() {
		return (pMessage != null) ? pMessage : (pMessage = new MessageElements());
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//Part:
	//	name=ID "->" def=[xsdr::TopLevelDefinition];
	public PartElements getPartAccess() {
		return (pPart != null) ? pPart : (pPart = new PartElements());
	}
	
	public ParserRule getPartRule() {
		return getPartAccess().getRule();
	}

	//// scoping: all Representation.definitions of imported XSDr
	//PortType:
	//	name=ID "{" operations+=Operation* "}";
	public PortTypeElements getPortTypeAccess() {
		return (pPortType != null) ? pPortType : (pPortType = new PortTypeElements());
	}
	
	public ParserRule getPortTypeRule() {
		return getPortTypeAccess().getRule();
	}

	//Operation:
	//	OneWayOperation | RequestResponseOperation | SolicitResponseOperation | NotificationOperation;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//OneWayOperation:
	//	"operation" name=ID ":" input=[Message];
	public OneWayOperationElements getOneWayOperationAccess() {
		return (pOneWayOperation != null) ? pOneWayOperation : (pOneWayOperation = new OneWayOperationElements());
	}
	
	public ParserRule getOneWayOperationRule() {
		return getOneWayOperationAccess().getRule();
	}

	//RequestResponseOperation:
	//	"operation" name=ID ":" input=[Message] "->" output=[Message];
	public RequestResponseOperationElements getRequestResponseOperationAccess() {
		return (pRequestResponseOperation != null) ? pRequestResponseOperation : (pRequestResponseOperation = new RequestResponseOperationElements());
	}
	
	public ParserRule getRequestResponseOperationRule() {
		return getRequestResponseOperationAccess().getRule();
	}

	//SolicitResponseOperation:
	//	"operation" name=ID ":" input=[Message] "<-" output=[Message];
	public SolicitResponseOperationElements getSolicitResponseOperationAccess() {
		return (pSolicitResponseOperation != null) ? pSolicitResponseOperation : (pSolicitResponseOperation = new SolicitResponseOperationElements());
	}
	
	public ParserRule getSolicitResponseOperationRule() {
		return getSolicitResponseOperationAccess().getRule();
	}

	//NotificationOperation:
	//	"operation" name=ID ":" "->" output=[Message];
	public NotificationOperationElements getNotificationOperationAccess() {
		return (pNotificationOperation != null) ? pNotificationOperation : (pNotificationOperation = new NotificationOperationElements());
	}
	
	public ParserRule getNotificationOperationRule() {
		return getNotificationOperationAccess().getRule();
	}

	//// TODO  add fault functionality
	//Binding:
	//	name=ID "binds" type=[PortType] "using" transport=Transport;
	public BindingElements getBindingAccess() {
		return (pBinding != null) ? pBinding : (pBinding = new BindingElements());
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//Transport:
	//	SoapTransport | HttpTransport;
	public TransportElements getTransportAccess() {
		return (pTransport != null) ? pTransport : (pTransport = new TransportElements());
	}
	
	public ParserRule getTransportRule() {
		return getTransportAccess().getRule();
	}

	//SoapTransport:
	//	"soap" "(" type=SoapType ")";
	public SoapTransportElements getSoapTransportAccess() {
		return (pSoapTransport != null) ? pSoapTransport : (pSoapTransport = new SoapTransportElements());
	}
	
	public ParserRule getSoapTransportRule() {
		return getSoapTransportAccess().getRule();
	}

	//enum SoapType:
	//	document | rpc;
	public SoapTypeElements getSoapTypeAccess() {
		return (unknownRuleSoapType != null) ? unknownRuleSoapType : (unknownRuleSoapType = new SoapTypeElements());
	}
	
	public EnumRule getSoapTypeRule() {
		return getSoapTypeAccess().getRule();
	}

	//HttpTransport:
	//	"http" "-" type=HttpType;
	public HttpTransportElements getHttpTransportAccess() {
		return (pHttpTransport != null) ? pHttpTransport : (pHttpTransport = new HttpTransportElements());
	}
	
	public ParserRule getHttpTransportRule() {
		return getHttpTransportAccess().getRule();
	}

	//enum HttpType:
	//	get | put;
	public HttpTypeElements getHttpTypeAccess() {
		return (unknownRuleHttpType != null) ? unknownRuleHttpType : (unknownRuleHttpType = new HttpTypeElements());
	}
	
	public EnumRule getHttpTypeRule() {
		return getHttpTypeAccess().getRule();
	}

	//Service:
	//	name=ID "{" ("documentation" documentation=STRING)? ports+=Port* "}";
	public ServiceElements getServiceAccess() {
		return (pService != null) ? pService : (pService = new ServiceElements());
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}

	//Port:
	//	"port" name=ID "binds" binding=[Binding] "on" location= // URI
	//	STRING;
	public PortElements getPortAccess() {
		return (pPort != null) ? pPort : (pPort = new PortElements());
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
