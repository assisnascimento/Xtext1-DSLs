/*
* generated by Xtext
*/
grammar InternalWsdlLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package nl.dslmeinte.xtext.examples.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package nl.dslmeinte.xtext.examples.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import nl.dslmeinte.xtext.examples.services.WsdlLanguageGrammarAccess;

}

@parser::members {

 	private WsdlLanguageGrammarAccess grammarAccess;
 	
    public InternalWsdlLanguageParser(TokenStream input, IAstFactory factory, WsdlLanguageGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("nl/dslmeinte/xtext/examples/parser/antlr/internal/InternalWsdlLanguage.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Definitions";	
   	}
   	
   	@Override
   	protected WsdlLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDefinitions
entryRuleDefinitions returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDefinitionsRule(), currentNode); }
	 iv_ruleDefinitions=ruleDefinitions 
	 { $current=$iv_ruleDefinitions.current; } 
	 EOF 
;

// Rule Definitions
ruleDefinitions returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'wsdl' 
    {
        createLeafNode(grammarAccess.getDefinitionsAccess().getWsdlKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDefinitionsAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'namespace:' 
    {
        createLeafNode(grammarAccess.getDefinitionsAccess().getNamespaceKeyword_2(), null); 
    }
(
(
		lv_nsUri_3_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getDefinitionsAccess().getNsUriSTRINGTerminalRuleCall_3_0(), "nsUri"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"nsUri",
	        		lv_nsUri_3_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionsAccess().getXsdImportXsdImportParserRuleCall_4_0(), currentNode); 
	    }
		lv_xsdImport_4_0=ruleXsdImport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"xsdImport",
	        		lv_xsdImport_4_0, 
	        		"XsdImport", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'messages:' 
    {
        createLeafNode(grammarAccess.getDefinitionsAccess().getMessagesKeyword_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionsAccess().getMessagesMessageParserRuleCall_5_1_0(), currentNode); 
	    }
		lv_messages_6_0=ruleMessage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"messages",
	        		lv_messages_6_0, 
	        		"Message", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)?(	'portTypes:' 
    {
        createLeafNode(grammarAccess.getDefinitionsAccess().getPortTypesKeyword_6_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionsAccess().getPortTypesPortTypeParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_portTypes_8_0=rulePortType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"portTypes",
	        		lv_portTypes_8_0, 
	        		"PortType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)?(	'bindings:' 
    {
        createLeafNode(grammarAccess.getDefinitionsAccess().getBindingsKeyword_7_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionsAccess().getBindingsBindingParserRuleCall_7_1_0(), currentNode); 
	    }
		lv_bindings_10_0=ruleBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"bindings",
	        		lv_bindings_10_0, 
	        		"Binding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)?(	'services:' 
    {
        createLeafNode(grammarAccess.getDefinitionsAccess().getServicesKeyword_8_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefinitionsAccess().getServicesServiceParserRuleCall_8_1_0(), currentNode); 
	    }
		lv_services_12_0=ruleService		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefinitionsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"services",
	        		lv_services_12_0, 
	        		"Service", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)?)
;





// Entry rule entryRuleXsdImport
entryRuleXsdImport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getXsdImportRule(), currentNode); }
	 iv_ruleXsdImport=ruleXsdImport 
	 { $current=$iv_ruleXsdImport.current; } 
	 EOF 
;

// Rule XsdImport
ruleXsdImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'xsd-import' 
    {
        createLeafNode(grammarAccess.getXsdImportAccess().getXsdImportKeyword_0(), null); 
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getXsdImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), "importURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXsdImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importURI",
	        		lv_importURI_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'as' 
    {
        createLeafNode(grammarAccess.getXsdImportAccess().getAsKeyword_2(), null); 
    }
(
(
		lv_nsPrefix_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getXsdImportAccess().getNsPrefixIDTerminalRuleCall_3_0(), "nsPrefix"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getXsdImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"nsPrefix",
	        		lv_nsPrefix_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMessageRule(), currentNode); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMessageAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getMessageAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMessageAccess().getPartsPartParserRuleCall_2_0(), currentNode); 
	    }
		lv_parts_2_0=rulePart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMessageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parts",
	        		lv_parts_2_0, 
	        		"Part", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getMessageAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRulePart
entryRulePart returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPartRule(), currentNode); }
	 iv_rulePart=rulePart 
	 { $current=$iv_rulePart.current; } 
	 EOF 
;

// Rule Part
rulePart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPartAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'->' 
    {
        createLeafNode(grammarAccess.getPartAccess().getHyphenMinusGreaterThanSignKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getPartAccess().getDefTopLevelDefinitionCrossReference_2_0(), "def"); 
	}

)
))
;





// Entry rule entryRulePortType
entryRulePortType returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPortTypeRule(), currentNode); }
	 iv_rulePortType=rulePortType 
	 { $current=$iv_rulePortType.current; } 
	 EOF 
;

// Rule PortType
rulePortType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPortTypeAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPortTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getPortTypeAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPortTypeAccess().getOperationsOperationParserRuleCall_2_0(), currentNode); 
	    }
		lv_operations_2_0=ruleOperation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPortTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_2_0, 
	        		"Operation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getPortTypeAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationRule(), currentNode); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getOperationAccess().getOneWayOperationParserRuleCall_0(), currentNode); 
    }
    this_OneWayOperation_0=ruleOneWayOperation
    { 
        $current = $this_OneWayOperation_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getOperationAccess().getRequestResponseOperationParserRuleCall_1(), currentNode); 
    }
    this_RequestResponseOperation_1=ruleRequestResponseOperation
    { 
        $current = $this_RequestResponseOperation_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getOperationAccess().getSolicitResponseOperationParserRuleCall_2(), currentNode); 
    }
    this_SolicitResponseOperation_2=ruleSolicitResponseOperation
    { 
        $current = $this_SolicitResponseOperation_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getOperationAccess().getNotificationOperationParserRuleCall_3(), currentNode); 
    }
    this_NotificationOperation_3=ruleNotificationOperation
    { 
        $current = $this_NotificationOperation_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleOneWayOperation
entryRuleOneWayOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOneWayOperationRule(), currentNode); }
	 iv_ruleOneWayOperation=ruleOneWayOperation 
	 { $current=$iv_ruleOneWayOperation.current; } 
	 EOF 
;

// Rule OneWayOperation
ruleOneWayOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'operation' 
    {
        createLeafNode(grammarAccess.getOneWayOperationAccess().getOperationKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOneWayOperationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOneWayOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getOneWayOperationAccess().getColonKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOneWayOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getOneWayOperationAccess().getInputMessageCrossReference_3_0(), "input"); 
	}

)
))
;





// Entry rule entryRuleRequestResponseOperation
entryRuleRequestResponseOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRequestResponseOperationRule(), currentNode); }
	 iv_ruleRequestResponseOperation=ruleRequestResponseOperation 
	 { $current=$iv_ruleRequestResponseOperation.current; } 
	 EOF 
;

// Rule RequestResponseOperation
ruleRequestResponseOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'operation' 
    {
        createLeafNode(grammarAccess.getRequestResponseOperationAccess().getOperationKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getRequestResponseOperationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRequestResponseOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getRequestResponseOperationAccess().getColonKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRequestResponseOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRequestResponseOperationAccess().getInputMessageCrossReference_3_0(), "input"); 
	}

)
)	'->' 
    {
        createLeafNode(grammarAccess.getRequestResponseOperationAccess().getHyphenMinusGreaterThanSignKeyword_4(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getRequestResponseOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getRequestResponseOperationAccess().getOutputMessageCrossReference_5_0(), "output"); 
	}

)
))
;





// Entry rule entryRuleSolicitResponseOperation
entryRuleSolicitResponseOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSolicitResponseOperationRule(), currentNode); }
	 iv_ruleSolicitResponseOperation=ruleSolicitResponseOperation 
	 { $current=$iv_ruleSolicitResponseOperation.current; } 
	 EOF 
;

// Rule SolicitResponseOperation
ruleSolicitResponseOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'operation' 
    {
        createLeafNode(grammarAccess.getSolicitResponseOperationAccess().getOperationKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSolicitResponseOperationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSolicitResponseOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getSolicitResponseOperationAccess().getColonKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSolicitResponseOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSolicitResponseOperationAccess().getInputMessageCrossReference_3_0(), "input"); 
	}

)
)	'<-' 
    {
        createLeafNode(grammarAccess.getSolicitResponseOperationAccess().getLessThanSignHyphenMinusKeyword_4(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSolicitResponseOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSolicitResponseOperationAccess().getOutputMessageCrossReference_5_0(), "output"); 
	}

)
))
;





// Entry rule entryRuleNotificationOperation
entryRuleNotificationOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNotificationOperationRule(), currentNode); }
	 iv_ruleNotificationOperation=ruleNotificationOperation 
	 { $current=$iv_ruleNotificationOperation.current; } 
	 EOF 
;

// Rule NotificationOperation
ruleNotificationOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'operation' 
    {
        createLeafNode(grammarAccess.getNotificationOperationAccess().getOperationKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getNotificationOperationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNotificationOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getNotificationOperationAccess().getColonKeyword_2(), null); 
    }
	'->' 
    {
        createLeafNode(grammarAccess.getNotificationOperationAccess().getHyphenMinusGreaterThanSignKeyword_3(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getNotificationOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getNotificationOperationAccess().getOutputMessageCrossReference_4_0(), "output"); 
	}

)
))
;





// Entry rule entryRuleBinding
entryRuleBinding returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBindingRule(), currentNode); }
	 iv_ruleBinding=ruleBinding 
	 { $current=$iv_ruleBinding.current; } 
	 EOF 
;

// Rule Binding
ruleBinding returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getBindingAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'binds' 
    {
        createLeafNode(grammarAccess.getBindingAccess().getBindsKeyword_1(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getBindingAccess().getTypePortTypeCrossReference_2_0(), "type"); 
	}

)
)	'using' 
    {
        createLeafNode(grammarAccess.getBindingAccess().getUsingKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBindingAccess().getTransportTransportParserRuleCall_4_0(), currentNode); 
	    }
		lv_transport_4_0=ruleTransport		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"transport",
	        		lv_transport_4_0, 
	        		"Transport", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleTransport
entryRuleTransport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTransportRule(), currentNode); }
	 iv_ruleTransport=ruleTransport 
	 { $current=$iv_ruleTransport.current; } 
	 EOF 
;

// Rule Transport
ruleTransport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTransportAccess().getSoapTransportParserRuleCall_0(), currentNode); 
    }
    this_SoapTransport_0=ruleSoapTransport
    { 
        $current = $this_SoapTransport_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTransportAccess().getHttpTransportParserRuleCall_1(), currentNode); 
    }
    this_HttpTransport_1=ruleHttpTransport
    { 
        $current = $this_HttpTransport_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSoapTransport
entryRuleSoapTransport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSoapTransportRule(), currentNode); }
	 iv_ruleSoapTransport=ruleSoapTransport 
	 { $current=$iv_ruleSoapTransport.current; } 
	 EOF 
;

// Rule SoapTransport
ruleSoapTransport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'soap' 
    {
        createLeafNode(grammarAccess.getSoapTransportAccess().getSoapKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getSoapTransportAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSoapTransportAccess().getTypeSoapTypeEnumRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleSoapType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSoapTransportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"SoapType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getSoapTransportAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleHttpTransport
entryRuleHttpTransport returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getHttpTransportRule(), currentNode); }
	 iv_ruleHttpTransport=ruleHttpTransport 
	 { $current=$iv_ruleHttpTransport.current; } 
	 EOF 
;

// Rule HttpTransport
ruleHttpTransport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'http' 
    {
        createLeafNode(grammarAccess.getHttpTransportAccess().getHttpKeyword_0(), null); 
    }
	'-' 
    {
        createLeafNode(grammarAccess.getHttpTransportAccess().getHyphenMinusKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getHttpTransportAccess().getTypeHttpTypeEnumRuleCall_2_0(), currentNode); 
	    }
		lv_type_2_0=ruleHttpType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHttpTransportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_2_0, 
	        		"HttpType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleService
entryRuleService returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getServiceRule(), currentNode); }
	 iv_ruleService=ruleService 
	 { $current=$iv_ruleService.current; } 
	 EOF 
;

// Rule Service
ruleService returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getServiceAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(	'documentation' 
    {
        createLeafNode(grammarAccess.getServiceAccess().getDocumentationKeyword_2_0(), null); 
    }
(
(
		lv_documentation_3_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getServiceAccess().getDocumentationSTRINGTerminalRuleCall_2_1_0(), "documentation"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"documentation",
	        		lv_documentation_3_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getServiceAccess().getPortsPortParserRuleCall_3_0(), currentNode); 
	    }
		lv_ports_4_0=rulePort		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ports",
	        		lv_ports_4_0, 
	        		"Port", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRulePort
entryRulePort returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPortRule(), currentNode); }
	 iv_rulePort=rulePort 
	 { $current=$iv_rulePort.current; } 
	 EOF 
;

// Rule Port
rulePort returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'port' 
    {
        createLeafNode(grammarAccess.getPortAccess().getPortKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPortAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'binds' 
    {
        createLeafNode(grammarAccess.getPortAccess().getBindsKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getPortAccess().getBindingBindingCrossReference_3_0(), "binding"); 
	}

)
)	'on' 
    {
        createLeafNode(grammarAccess.getPortAccess().getOnKeyword_4(), null); 
    }
(
(
		lv_location_5_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getPortAccess().getLocationSTRINGTerminalRuleCall_5_0(), "location"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPortRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"location",
	        		lv_location_5_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Rule SoapType
ruleSoapType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'document' 
	{
        $current = grammarAccess.getSoapTypeAccess().getDocumentEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSoapTypeAccess().getDocumentEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'rpc' 
	{
        $current = grammarAccess.getSoapTypeAccess().getRpcEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSoapTypeAccess().getRpcEnumLiteralDeclaration_1(), null); 
    }
));



// Rule HttpType
ruleHttpType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'get' 
	{
        $current = grammarAccess.getHttpTypeAccess().getGetEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getHttpTypeAccess().getGetEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'put' 
	{
        $current = grammarAccess.getHttpTypeAccess().getPutEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getHttpTypeAccess().getPutEnumLiteralDeclaration_1(), null); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


