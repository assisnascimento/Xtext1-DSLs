grammar nl.dslmeinte.xtext.examples.AmbiguityDsl with org.eclipse.xtext.common.Terminals

generate ambiguityDsl "http://www.dslmeinte.nl/xtext/examples/AmbiguityDsl"


Model:
	classes+=Class*
	statements+=Statement*
	;


Variable: name=ID;

Statement:
	SpecHead
	(
		  ( {VariableDeclaration.typeSpec=current} var=Variable ( ':=' initValue=STRING )? )
		| ( {Assignment.lhs=current} ':=' rhs=STRING )
	)
	;
	/*
	 * validation:
	 *		- VariableDeclaration.typeSpec.target may not be a Variable
	 *		- Assignment.lhs.target may not be a Class (no static features)
	 *		- tail element of lhs must be a Field, not a InnerClass
	 */

// (head of a) specification of either a site to assign to or a particular Class or nested Feature:
SpecHead:			target=[HeadTarget] tail=FeatureSpecTail?;

// the valid targets of the SpecHead.target cross-reference:
HeadTarget:			Class | Variable;

// specifies the rest of the specification "path" pointing to a nested Feature:
FeatureSpecTail:	'.' feature=[Feature|ID]	tail=FeatureSpecTail?;
	/*
	 * scoping: feature must be a feature of
	 *	- the containing referenced feature (FeatureSpecTail case), or
	 *	- class or variable (SpecHead case)
	 */


// (convenience type:)
TailedElement:	SpecHead | FeatureSpecTail;


Class:
	'class' name=ID '{'
		features+=Feature*
	'}'
	;

InnerClass:
	'class' name=ID '{'
		features+=Feature*
	'}'
	;
	/*
	 * OK, these two parser rules look _remarkably_ the same,
	 * but it does distinguish top-level classes (Class; can be referenced directly)
	 * from nested classes (InnerClass; can only be referenced through a "path").
	 *
	 * The actual reason to do it like this, is that the next type rule
	 * would trigger an (infinite) "Pull Up"-cycle w.r.t. to the 'name' feature
	 * if declared as alternatives between Class and Field (==> Xtext error)...
	 */

Feature:
	InnerClass | Field;

Field:
	'field' name=ID;

