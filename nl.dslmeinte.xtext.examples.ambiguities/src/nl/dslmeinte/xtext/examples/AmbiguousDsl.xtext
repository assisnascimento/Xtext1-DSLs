grammar nl.dslmeinte.xtext.examples.AmbiguityDsl with org.eclipse.xtext.common.Terminals

generate ambiguityDsl "http://www.dslmeinte.nl/xtext/examples/AmbiguityDsl"


Model:
	classes+=Class*
	statements+=Statement*
	;


Variable:				name=ID;
Statement:				VariableDeclaration | Assignment;
VariableDeclaration:	type=TypeRef var=Variable (':=' initValue=STRING)?;
Assignment:				lhs=AssignSite ':=' rhs=STRING;

// specifies a site to which to assign to:
AssignSite:		var=[Variable|ID]			tail=FeatureRefTail?;
// specifies a particular Class or nested Feature:
TypeRef:		type=[Class|ID]				tail=FeatureRefTail?;
// specifies the rest of the "path" pointing to a nested Feature:
FeatureRefTail:	'.' feature=[Feature|ID]	tail=FeatureRefTail?;
	// scoping: feature must be feature of the containing referenced feature, class or variable


Class:
	'class' name=ID '{'
		features+=Feature*
	'}'
	;

InnerClass:
	'class' name=ID '{'
		features+=Feature*
	'}'
	;
	/*
	 * OK, these two parser rules look _remarkably_ the same,
	 * but it does distinguish top-level classes (Class; can be referenced directly)
	 * from nested classes (InnerClass; can only be referenced through a "path").
	 *
	 * The actual reason to do it like this, is that the next type rule
	 * would trigger an (infinite) "Pull Up"-cycle w.r.t. to the 'name' feature
	 * if declared as alternatives between Class and Field (==> Xtext error)...
	 */

Feature:
	InnerClass | Field;

Field:
	'field' name=ID;

