module nl.dslmeinte.xtext.sgml.base.Base

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/nl/dslmeinte/xtext/sgml/base/Base.xtext"
var file.extensions = "#base"	// matches as bad as possible...
var projectName = "nl.dslmeinte.xtext.sgml.base"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen/nl"    // do not wipe out directory itself to preserve Git-related files
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			fragment = grammarAccess.GrammarAccessFragment {}
			fragment = ecore.EcoreGeneratorFragment {}
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
			fragment = resourceFactory.ResourceFactoryFragment { fileExtensions = file.extensions }
			fragment = parser.antlr.XtextAntlrGeneratorFragment {}
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}

			fragment = builder.BuilderIntegrationFragment {}
			fragment = formatting.FormatterFragment {}
			fragment = labeling.LabelProviderFragment {}
			fragment = outline.TransformerFragment {}
			fragment = outline.OutlineNodeAdapterFactoryFragment {}
			fragment = outline.QuickOutlineFragment {}
			fragment = quickfix.QuickfixProviderFragment {}
			fragment = contentAssist.JavaBasedContentAssistFragment {}
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}
		}
	}
}
