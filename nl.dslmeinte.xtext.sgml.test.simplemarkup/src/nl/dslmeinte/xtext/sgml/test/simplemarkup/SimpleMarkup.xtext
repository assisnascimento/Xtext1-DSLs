

// generated by DTD2Xtext.xpt
grammar nl.dslmeinte.xtext.sgml.test.simplemarkup.SimpleMarkup with nl.dslmeinte.xtext.sgml.base.Base hidden()




generate simplemarkup "http://dslmeinte.nl/Xtext/sgml/dtd/test/simpleMarkup"


// override from Base to include root (of right type):
SgmlDocument hidden(WHITESPACE, SGML_COMMENTS):
		docType=DocumentType
		root=Content
	;

DocumentType hidden(WHITESPACE):
	'<' '!DOCTYPE' rootName=IDENTIFIER ('PUBLIC' | 'SYSTEM') header1=QuotedString header2=QuotedString? HEADER_COMMENTS*
		('[' ( entities+=Entity | SGML_COMMENTS )* ']')? '>'	
	;



Content hidden(SGML_COMMENTS, WHITESPACE):
	Content_tagOpen=Content_tagOpen
	(contents+=Reference)? (contents+=Section)+
	Content_tagClose=Content_tagClose
	;

Content_tagOpen hidden(): {Content_tagOpen} '<' 'Content'  '>';
Content_tagClose hidden(): {Content_tagClose} '<' '/' 'Content' '>';

Reference hidden(SGML_COMMENTS, WHITESPACE):
	Reference_tagOpen=Reference_tagOpen
	
	(Reference_tagClose=Reference_tagClose)?
	;

Reference_tagOpen hidden(): '<' 'Reference' (WHITESPACE to=Reference_to_attribute) '>';
Reference_tagClose hidden(): {Reference_tagClose} '<' '/' 'Reference' '>';

Section hidden(SGML_COMMENTS, WHITESPACE):
	Section_tagOpen=Section_tagOpen
	(contents+=Par)*
	Section_tagClose=Section_tagClose
	;

Section_tagOpen hidden(): '<' 'Section' (WHITESPACE styleName=Section_styleName_attribute & (WHITESPACE condition=Section_condition_attribute)? & (WHITESPACE name=Section_name_attribute)?) '>';
Section_tagClose hidden(): {Section_tagClose} '<' '/' 'Section' '>';

Par hidden(SGML_COMMENTS):
	Par_tagOpen=Par_tagOpen
	(( contents+=em | contents+=bf | contents+=_PCDATA ))*
	Par_tagClose=Par_tagClose
	;

Par_tagOpen hidden(): {Par_tagOpen} '<' 'Par' ((WHITESPACE styleName=Par_styleName_attribute)?) '>';
Par_tagClose hidden(): {Par_tagClose} '<' '/' 'Par' '>';

em hidden(SGML_COMMENTS):
	em_tagOpen=em_tagOpen
	(( contents+=bf | contents+=_PCDATA ))*
	em_tagClose=em_tagClose
	;

em_tagOpen hidden(): {em_tagOpen} '<' 'em'  '>';
em_tagClose hidden(): {em_tagClose} '<' '/' 'em' '>';

bf hidden(SGML_COMMENTS):
	bf_tagOpen=bf_tagOpen
	(( contents+=em | contents+=_PCDATA ))*
	bf_tagClose=bf_tagClose
	;

bf_tagOpen hidden(): {bf_tagOpen} '<' 'bf'  '>';
bf_tagClose hidden(): {bf_tagClose} '<' '/' 'bf' '>';



Reference_to_attribute hidden(WHITESPACE): 
	{Reference_to_attribute}
	
		'to' '=' ('"'|"'") to=[Section|QUOTED_STRING] ('"'|"'")	// notice: AOP happened here
	
	;

Section_styleName_attribute hidden(WHITESPACE): 
	{Section_styleName_attribute}
	
		'styleName' '=' styleName=QuotedString
	
	;

Section_condition_attribute hidden(WHITESPACE): 
	{Section_condition_attribute}
	(
		'condition' '=' condition=Condition	// notice: AOP happened here
	)?
	;

Section_name_attribute hidden(WHITESPACE): 
	{Section_name_attribute}
	(
		'name' '=' name=QuotedString
	)?
	;

Par_styleName_attribute hidden(WHITESPACE): 
	{Par_styleName_attribute}
	(
		'styleName' '=' styleName=QuotedString
	)?
	;



// extra rule to be able to trigger validation conveniently:
Condition: expr=QuotedString;



