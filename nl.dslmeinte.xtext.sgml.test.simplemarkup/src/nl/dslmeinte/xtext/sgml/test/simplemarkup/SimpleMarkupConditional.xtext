
// generated by DTD2Xtext.xpt
grammar nl.dslmeinte.xtext.sgml.test.simplemarkup.SimpleMarkupConditional with nl.dslmeinte.xtext.sgml.base.Base hidden()

generate simplemarkup "http://dslmeinte.nl/Xtext/sgml/dtd/test/simpleMarkup/conditional"


// override from Base to include root (of right type):
SgmlDocument hidden(WHITESPACE, HEADER_COMMENTS):
	OPEN_TAG_SYMBOL DOCTYPE_BASE_KEYWORD SISGML_BASE_KEYWORD (PUBLIC_BASE_KEYWORD | SYSTEM_BASE_KEYWORD) header1=QUOTED_STRING header2=QUOTED_STRING?
		(OPEN_BRACKET_SYMBOL entities+=Entity* CLOSE_BRACKET_SYMBOL)? CLOSE_TAG_SYMBOL
		root=Content
	;



Content hidden(SGML_COMMENTS, WHITESPACE):
	Content_tagOpen=Content_tagOpen
	(contents+=Reference)? (contents+=Section)+
	Content_tagClose=Content_tagClose
	;

Content_tagOpen hidden(): {Content_tagOpen}OPEN_TAG_SYMBOL Content_KEYWORD  CLOSE_TAG_SYMBOL;

Content_tagClose hidden(): {Content_tagClose} OPEN_TAG_SYMBOL SLASH_SYMBOL Content_KEYWORD CLOSE_TAG_SYMBOL;

Reference hidden(SGML_COMMENTS, WHITESPACE):
	Reference_tagOpen=Reference_tagOpen
	
	(Reference_tagClose=Reference_tagClose)?
	;

Reference_tagOpen hidden(): OPEN_TAG_SYMBOL Reference_KEYWORD attributes=Reference_attributes CLOSE_TAG_SYMBOL;
Reference_attributes hidden(WHITESPACE): 
to_KEYWORD EQUALS_SYMBOL to=QUOTED_STRING
;
Reference_tagClose hidden(): {Reference_tagClose} OPEN_TAG_SYMBOL SLASH_SYMBOL Reference_KEYWORD CLOSE_TAG_SYMBOL;

Section hidden(SGML_COMMENTS, WHITESPACE):
	Section_tagOpen=Section_tagOpen
	(contents+=Par)*
	Section_tagClose=Section_tagClose
	;

Section_tagOpen hidden(): OPEN_TAG_SYMBOL Section_KEYWORD attributes=Section_attributes CLOSE_TAG_SYMBOL;
Section_attributes hidden(WHITESPACE): (
styleName_KEYWORD EQUALS_SYMBOL styleName=QUOTED_STRING
 & 
(condition_KEYWORD EQUALS_SYMBOL condition=ConditionalExpression)?
);
Section_tagClose hidden(): {Section_tagClose} OPEN_TAG_SYMBOL SLASH_SYMBOL Section_KEYWORD CLOSE_TAG_SYMBOL;

Par hidden(SGML_COMMENTS):
	Par_tagOpen=Par_tagOpen
	(( contents+=em | contents+=bf | contents+=_PCDATAContents ))*
	Par_tagClose=Par_tagClose
	;

Par_tagOpen hidden(): {Par_tagOpen}OPEN_TAG_SYMBOL Par_KEYWORD attributes=Par_attributes CLOSE_TAG_SYMBOL;
Par_attributes hidden(WHITESPACE): {Par_attributes}
(styleName_KEYWORD EQUALS_SYMBOL styleName=QUOTED_STRING)?
;
Par_tagClose hidden(): {Par_tagClose} OPEN_TAG_SYMBOL SLASH_SYMBOL Par_KEYWORD CLOSE_TAG_SYMBOL;

em hidden(SGML_COMMENTS):
	em_tagOpen=em_tagOpen
	(( contents+=bf | contents+=_PCDATAContents ))*
	em_tagClose=em_tagClose
	;

em_tagOpen hidden(): {em_tagOpen}OPEN_TAG_SYMBOL em_KEYWORD  CLOSE_TAG_SYMBOL;

em_tagClose hidden(): {em_tagClose} OPEN_TAG_SYMBOL SLASH_SYMBOL em_KEYWORD CLOSE_TAG_SYMBOL;

bf hidden(SGML_COMMENTS):
	bf_tagOpen=bf_tagOpen
	(( contents+=em | contents+=_PCDATAContents ))*
	bf_tagClose=bf_tagClose
	;

bf_tagOpen hidden(): {bf_tagOpen}OPEN_TAG_SYMBOL bf_KEYWORD  CLOSE_TAG_SYMBOL;

bf_tagClose hidden(): {bf_tagClose} OPEN_TAG_SYMBOL SLASH_SYMBOL bf_KEYWORD CLOSE_TAG_SYMBOL;



ConditionalExpression: ConditionalOR;

ConditionalOR returns ConditionalExpression hidden(WHITESPACE):
    ConditionalAND ({ConditionalOR.left=current} OR_KEYWORD right=ConditionalAND)*;

ConditionalAND returns ConditionalExpression hidden(WHITESPACE):
    ConditionalNOT ({ConditionalAND.left=current} AND_KEYWORD right=ConditionalNOT)*;

ConditionalNOT returns ConditionalExpression hidden(WHITESPACE):
    NOT_SYMBOL? right=ConditionalPrimary;	// TODO  fix this into a correct prefix operator

ConditionalPrimary returns ConditionalExpression hidden(WHITESPACE):
    {ConditionLiteral} id=IDENTIFIER | OPEN_PARENTHESIS_SYMBOL ConditionalOR CLOSE_PARENTHESIS_SYMBOL;

terminal OR_KEYWORD					: '||';
terminal AND_KEYWORD				: '&&';
terminal NOT_SYMBOL					: '!';
terminal OPEN_PARENTHESIS_SYMBOL	: '(';
terminal CLOSE_PARENTHESIS_SYMBOL	: ')';


// It's useful to have explicit terminal rules for keywords to do keyword discovery:

terminal styleName_KEYWORD : 'styleName';
terminal to_KEYWORD : 'to';
terminal Section_KEYWORD : 'Section';
terminal condition_KEYWORD : 'condition';
terminal bf_KEYWORD : 'bf';
terminal Par_KEYWORD : 'Par';
terminal Reference_KEYWORD : 'Reference';
terminal em_KEYWORD : 'em';
terminal Content_KEYWORD : 'Content';
