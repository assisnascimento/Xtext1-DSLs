
// generated by DTD2Xtext.xpt
grammar nl.dslmeinte.xtext.sgml.test.simplemarkup.SimpleMarkupConditional with nl.dslmeinte.xtext.sgml.base.Base hidden()

generate simplemarkup "http://dslmeinte.nl/Xtext/sgml/dtd/test/simpleMarkup/conditional"


// override from Base to include root (of right type):
SgmlDocument hidden(WHITESPACE, HEADER_COMMENTS):
	'<' '!DOCTYPE' 'SISGML' ('PUBLIC' | 'SYSTEM') header1=QUOTED_STRING header2=QUOTED_STRING?
		('[' entities+=Entity* ']')? '>'
		root=Content
	;



Content hidden(SGML_COMMENTS, WHITESPACE):
	Content_tagOpen=Content_tagOpen
	(contents+=Reference)? (contents+=Section)+
	Content_tagClose=Content_tagClose
	;

Content_tagOpen hidden(): {Content_tagOpen} '<' 'Content'  '>';

Content_tagClose hidden(): {Content_tagClose} '<' '/' 'Content' '>';

Reference hidden(SGML_COMMENTS, WHITESPACE):
	Reference_tagOpen=Reference_tagOpen
	
	(Reference_tagClose=Reference_tagClose)?
	;

Reference_tagOpen hidden(): '<' 'Reference' attributes=Reference_attributes '>';
Reference_attributes hidden(WHITESPACE): 
'to' '=' to=QUOTED_STRING
;
Reference_tagClose hidden(): {Reference_tagClose} '<' '/' 'Reference' '>';

Section hidden(SGML_COMMENTS, WHITESPACE):
	Section_tagOpen=Section_tagOpen
	(contents+=Par)*
	Section_tagClose=Section_tagClose
	;

Section_tagOpen hidden(): '<' 'Section' attributes=Section_attributes '>';
Section_attributes hidden(WHITESPACE): (
'styleName' '=' styleName=QUOTED_STRING
 & 
('condition' '=' condition=ConditionalExpression)?
);
Section_tagClose hidden(): {Section_tagClose} '<' '/' 'Section' '>';

Par hidden(SGML_COMMENTS):
	Par_tagOpen=Par_tagOpen
	(( contents+=em | contents+=bf | contents+=_PCDATA ))*
	Par_tagClose=Par_tagClose
	;

Par_tagOpen hidden(): {Par_tagOpen} '<' 'Par' attributes=Par_attributes '>';
Par_attributes hidden(WHITESPACE): {Par_attributes} 
('styleName' '=' styleName=QUOTED_STRING)?
;
Par_tagClose hidden(): {Par_tagClose} '<' '/' 'Par' '>';

em hidden(SGML_COMMENTS):
	em_tagOpen=em_tagOpen
	(( contents+=bf | contents+=_PCDATA ))*
	em_tagClose=em_tagClose
	;

em_tagOpen hidden(): {em_tagOpen} '<' 'em'  '>';

em_tagClose hidden(): {em_tagClose} '<' '/' 'em' '>';

bf hidden(SGML_COMMENTS):
	bf_tagOpen=bf_tagOpen
	(( contents+=em | contents+=_PCDATA ))*
	bf_tagClose=bf_tagClose
	;

bf_tagOpen hidden(): {bf_tagOpen} '<' 'bf'  '>';

bf_tagClose hidden(): {bf_tagClose} '<' '/' 'bf' '>';



ConditionalExpression: ConditionalOR;

ConditionalOR returns ConditionalExpression hidden(WHITESPACE):
    ConditionalAND ({ConditionalOR.left=current} '||' right=ConditionalAND)*;

ConditionalAND returns ConditionalExpression hidden(WHITESPACE):
    ConditionalNOT ({ConditionalAND.left=current} '&&' right=ConditionalNOT)*;

ConditionalNOT returns ConditionalExpression hidden(WHITESPACE):
    '!'? right=ConditionalPrimary;	// TODO  fix this into a correct prefix operator

ConditionalPrimary returns ConditionalExpression hidden(WHITESPACE):
    {ConditionLiteral} id=IDENTIFIER | '(' ConditionalOR ')';


